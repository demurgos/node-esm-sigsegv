/**
 * @module kryo/readers/qs-value
 */
import { Incident } from "incident";
import { createInvalidTypeError } from "../errors/invalid-type";
import { JsonReader } from "./json";
export class QsValueReader {
    constructor(trust) {
        this.trustInput = trust;
    }
    readAny(input, visitor) {
        switch (typeof input) {
            case "boolean":
                return visitor.fromBoolean(input);
            case "string":
                return visitor.fromString(input);
            case "object":
                return input === null
                    ? visitor.fromNull()
                    : visitor.fromMap(new Map(Object.keys(input).map(k => [k, input[k]])), this, this);
            default:
                throw createInvalidTypeError("boolean | null | object | string", input);
        }
    }
    readBoolean(input, visitor) {
        if (input !== "true" && input !== "false") {
            throw createInvalidTypeError("\"true\" | \"false\"", input);
        }
        return visitor.fromBoolean(input === "true");
    }
    readBytes(input, visitor) {
        if (typeof input !== "string") {
            throw createInvalidTypeError("string", input);
        }
        else if (!/^(?:[0-9a-f]{2})*$/.test(input)) {
            throw createInvalidTypeError("lowerCaseHexEvenLengthString", input);
        }
        let result;
        const len = input.length / 2;
        result = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            result[i] = parseInt(input.substr(2 * i, 2), 16);
        }
        return visitor.fromBytes(result);
    }
    readDate(input, visitor) {
        if (this.trustInput) {
            return visitor.fromDate(new Date(input));
        }
        if (typeof input === "string") {
            return visitor.fromDate(new Date(input));
        }
        throw createInvalidTypeError("string | number", input);
    }
    readDocument(raw, visitor) {
        if (typeof raw !== "object" || raw === null) {
            throw createInvalidTypeError("object", raw);
        }
        const input = new Map();
        for (const key in raw) {
            input.set(key, raw[key]);
        }
        return visitor.fromMap(input, this, this);
    }
    readFloat64(input, visitor) {
        const specialValues = new Map([
            ["NaN", NaN],
            ["Infinity", Infinity],
            ["+Infinity", Infinity],
            ["-Infinity", -Infinity],
        ]);
        const special = specialValues.get(input);
        if (special === undefined && typeof input !== "string") {
            throw new Incident("InvalidInput", { input, expected: "float64" });
        }
        return visitor.fromFloat64(special !== undefined ? special : parseFloat(input));
    }
    readList(input, visitor) {
        if (input === undefined) {
            return visitor.fromList([], this);
        }
        if (!Array.isArray(input)) {
            throw createInvalidTypeError("array | undefined", input);
        }
        return visitor.fromList(input, this);
    }
    readMap(raw, visitor) {
        if (typeof raw !== "object" || raw === null) {
            throw createInvalidTypeError("object", raw);
        }
        const jsonReader = new JsonReader();
        const input = new Map();
        for (const rawKey in raw) {
            let key;
            try {
                key = JSON.parse(rawKey);
                // key = (/* keyType */ undefined as any).read(jsonReader, key);
            }
            catch (err) {
                throw new Incident(err, "InvalidMapKey", rawKey);
            }
            input.set(key, raw[rawKey]);
        }
        return visitor.fromMap(input, jsonReader, this);
    }
    readNull(input, visitor) {
        if (this.trustInput) {
            return visitor.fromNull();
        }
        if (input !== "") {
            throw createInvalidTypeError("\"\"", input);
        }
        return visitor.fromNull();
    }
    readString(input, visitor) {
        if (typeof input !== "string") {
            throw createInvalidTypeError("string", input);
        }
        return visitor.fromString(input);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
