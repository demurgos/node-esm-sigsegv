"use strict";
/**
 * @module kryo/readers/bson-value
 */
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const invalid_type_1 = require("../errors/invalid-type");
const json_1 = require("./json");
function isBinary(val) {
    return val._bsontype === "Binary";
}
class BsonValueReader {
    constructor(trust) {
        this.trustInput = trust;
    }
    readAny(input, visitor) {
        switch (typeof input) {
            case "boolean":
                return visitor.fromBoolean(input);
            case "string":
                return visitor.fromString(input);
            case "object":
                return input === null
                    ? visitor.fromNull()
                    : visitor.fromMap(new Map(Object.keys(input).map(k => [k, input[k]])), this, this);
            default:
                throw invalid_type_1.createInvalidTypeError("boolean | null | object | string", input);
        }
    }
    readBoolean(input, visitor) {
        if (typeof input !== "boolean") {
            throw invalid_type_1.createInvalidTypeError("boolean", input);
        }
        return visitor.fromBoolean(input);
    }
    readBytes(raw, visitor) {
        let input;
        if (isBinary(raw)) {
            // TODO: Fix BSON type definitions
            input = raw.value(true);
        }
        else {
            // TODO: typecheck
            input = raw;
        }
        return visitor.fromBytes(input);
    }
    readDate(raw, visitor) {
        if (!(raw instanceof Date)) {
            throw invalid_type_1.createInvalidTypeError("Date", raw);
        }
        return visitor.fromDate(new Date(raw.getTime()));
    }
    readDocument(raw, visitor) {
        if (typeof raw !== "object" || raw === null) {
            throw invalid_type_1.createInvalidTypeError("object", raw);
        }
        const input = new Map();
        for (const key in raw) {
            input.set(key, raw[key]);
        }
        return visitor.fromMap(input, this, this);
    }
    readFloat64(input, visitor) {
        const specialValues = new Map([["NaN", NaN], ["Infinity", Infinity], ["-Infinity", Infinity]]);
        const special = specialValues.get(input);
        if (special === undefined && typeof input !== "number") {
            throw new incident_1.Incident("InvalidInput", { input, expected: "float64" });
        }
        return visitor.fromFloat64(special !== undefined ? special : input);
    }
    readList(input, visitor) {
        if (!Array.isArray(input)) {
            throw invalid_type_1.createInvalidTypeError("array", input);
        }
        return visitor.fromList(input, this);
    }
    readMap(raw, visitor) {
        if (typeof raw !== "object" || raw === null) {
            throw invalid_type_1.createInvalidTypeError("object", raw);
        }
        const jsonReader = new json_1.JsonReader();
        const input = new Map();
        for (const rawKey in raw) {
            let key;
            try {
                key = JSON.parse(rawKey);
                // key = (/* keyType */ undefined as any).read(jsonReader, key);
            }
            catch (err) {
                throw new incident_1.Incident(err, "InvalidMapKey", { rawKey });
            }
            input.set(key, raw[rawKey]);
        }
        return visitor.fromMap(input, jsonReader, this);
    }
    readNull(input, visitor) {
        if (this.trustInput) {
            return visitor.fromNull();
        }
        if (input !== null) {
            throw invalid_type_1.createInvalidTypeError("null", input);
        }
        return visitor.fromNull();
    }
    readString(input, visitor) {
        if (typeof input !== "string") {
            throw invalid_type_1.createInvalidTypeError("string", input);
        }
        return visitor.fromString(input);
    }
}
exports.BsonValueReader = BsonValueReader;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
