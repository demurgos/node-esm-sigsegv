/**
 * @module kryo/readers/bson-value
 */
import { Incident } from "incident";
import { createInvalidTypeError } from "../errors/invalid-type";
import { JsonReader } from "./json";
function isBinary(val) {
    return val._bsontype === "Binary";
}
export class BsonValueReader {
    constructor(trust) {
        this.trustInput = trust;
    }
    readAny(input, visitor) {
        switch (typeof input) {
            case "boolean":
                return visitor.fromBoolean(input);
            case "string":
                return visitor.fromString(input);
            case "object":
                return input === null
                    ? visitor.fromNull()
                    : visitor.fromMap(new Map(Object.keys(input).map(k => [k, input[k]])), this, this);
            default:
                throw createInvalidTypeError("boolean | null | object | string", input);
        }
    }
    readBoolean(input, visitor) {
        if (typeof input !== "boolean") {
            throw createInvalidTypeError("boolean", input);
        }
        return visitor.fromBoolean(input);
    }
    readBytes(raw, visitor) {
        let input;
        if (isBinary(raw)) {
            // TODO: Fix BSON type definitions
            input = raw.value(true);
        }
        else {
            // TODO: typecheck
            input = raw;
        }
        return visitor.fromBytes(input);
    }
    readDate(raw, visitor) {
        if (!(raw instanceof Date)) {
            throw createInvalidTypeError("Date", raw);
        }
        return visitor.fromDate(new Date(raw.getTime()));
    }
    readDocument(raw, visitor) {
        if (typeof raw !== "object" || raw === null) {
            throw createInvalidTypeError("object", raw);
        }
        const input = new Map();
        for (const key in raw) {
            input.set(key, raw[key]);
        }
        return visitor.fromMap(input, this, this);
    }
    readFloat64(input, visitor) {
        const specialValues = new Map([["NaN", NaN], ["Infinity", Infinity], ["-Infinity", Infinity]]);
        const special = specialValues.get(input);
        if (special === undefined && typeof input !== "number") {
            throw new Incident("InvalidInput", { input, expected: "float64" });
        }
        return visitor.fromFloat64(special !== undefined ? special : input);
    }
    readList(input, visitor) {
        if (!Array.isArray(input)) {
            throw createInvalidTypeError("array", input);
        }
        return visitor.fromList(input, this);
    }
    readMap(raw, visitor) {
        if (typeof raw !== "object" || raw === null) {
            throw createInvalidTypeError("object", raw);
        }
        const jsonReader = new JsonReader();
        const input = new Map();
        for (const rawKey in raw) {
            let key;
            try {
                key = JSON.parse(rawKey);
                // key = (/* keyType */ undefined as any).read(jsonReader, key);
            }
            catch (err) {
                throw new Incident(err, "InvalidMapKey", { rawKey });
            }
            input.set(key, raw[rawKey]);
        }
        return visitor.fromMap(input, jsonReader, this);
    }
    readNull(input, visitor) {
        if (this.trustInput) {
            return visitor.fromNull();
        }
        if (input !== null) {
            throw createInvalidTypeError("null", input);
        }
        return visitor.fromNull();
    }
    readString(input, visitor) {
        if (typeof input !== "string") {
            throw createInvalidTypeError("string", input);
        }
        return visitor.fromString(input);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
