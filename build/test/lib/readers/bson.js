"use strict";
/**
 * @module kryo/readers/bson
 */
Object.defineProperty(exports, "__esModule", { value: true });
const bson_value_1 = require("./bson-value");
class BsonReader {
    constructor(bson, trust, primitiveWrapper = "_") {
        this.bsonSerializer = new bson.BSON();
        this.trustInput = trust;
        this.primitiveWrapper = primitiveWrapper;
        this.valueReader = new bson_value_1.BsonValueReader(trust);
    }
    readAny(raw, visitor) {
        return this.valueReader.readAny(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readBoolean(raw, visitor) {
        return this.valueReader.readBoolean(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readBytes(raw, visitor) {
        return this.valueReader.readBytes(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readDate(raw, visitor) {
        return this.valueReader.readDate(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readDocument(raw, visitor) {
        return this.valueReader.readDocument(this.bsonSerializer.deserialize(raw), visitor);
    }
    readFloat64(raw, visitor) {
        return this.valueReader.readFloat64(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readList(raw, visitor) {
        return this.valueReader.readList(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readMap(raw, visitor) {
        return this.valueReader.readMap(this.bsonSerializer.deserialize(raw), visitor);
    }
    readNull(raw, visitor) {
        return this.valueReader.readNull(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readString(raw, visitor) {
        return this.valueReader.readString(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
}
exports.BsonReader = BsonReader;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVhZGVycy9ic29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFJSCw2Q0FBK0M7QUFFL0MsTUFBYSxVQUFVO0lBU3JCLFlBQVksSUFBa0IsRUFBRSxLQUFlLEVBQUUsbUJBQTJCLEdBQUc7UUFDN0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDRCQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE9BQU8sQ0FBSSxHQUFXLEVBQUUsT0FBdUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUQsV0FBVyxDQUFJLEdBQVcsRUFBRSxPQUF1QjtRQUNqRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRCxTQUFTLENBQUksR0FBVyxFQUFFLE9BQXVCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFXLEVBQUUsT0FBdUI7UUFDOUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsWUFBWSxDQUFJLEdBQVEsRUFBRSxPQUF1QjtRQUMvQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFRCxXQUFXLENBQUksR0FBVyxFQUFFLE9BQXVCO1FBQ2pELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFRLEVBQUUsT0FBdUI7UUFDM0MsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsT0FBTyxDQUFJLEdBQVEsRUFBRSxPQUF1QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxRQUFRLENBQUksR0FBVyxFQUFFLE9BQXVCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekcsQ0FBQztJQUVELFVBQVUsQ0FBSSxHQUFXLEVBQUUsT0FBdUI7UUFDaEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRyxDQUFDO0NBQ0Y7QUF2REQsZ0NBdURDIiwiZmlsZSI6ImxpYi9yZWFkZXJzL2Jzb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUga3J5by9yZWFkZXJzL2Jzb25cbiAqL1xuXG5pbXBvcnQgX2Jzb24gZnJvbSBcImJzb25cIjtcbmltcG9ydCB7IFJlYWRlciwgUmVhZFZpc2l0b3IgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgQnNvblZhbHVlUmVhZGVyIH0gZnJvbSBcIi4vYnNvbi12YWx1ZVwiO1xuXG5leHBvcnQgY2xhc3MgQnNvblJlYWRlciBpbXBsZW1lbnRzIFJlYWRlcjxCdWZmZXI+IHtcbiAgdHJ1c3RJbnB1dD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBic29uU2VyaWFsaXplcjogX2Jzb24uQlNPTjtcblxuICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlUmVhZGVyOiBCc29uVmFsdWVSZWFkZXI7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBwcmltaXRpdmVXcmFwcGVyOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYnNvbjogdHlwZW9mIF9ic29uLCB0cnVzdD86IGJvb2xlYW4sIHByaW1pdGl2ZVdyYXBwZXI6IHN0cmluZyA9IFwiX1wiKSB7XG4gICAgdGhpcy5ic29uU2VyaWFsaXplciA9IG5ldyBic29uLkJTT04oKTtcbiAgICB0aGlzLnRydXN0SW5wdXQgPSB0cnVzdDtcbiAgICB0aGlzLnByaW1pdGl2ZVdyYXBwZXIgPSBwcmltaXRpdmVXcmFwcGVyO1xuICAgIHRoaXMudmFsdWVSZWFkZXIgPSBuZXcgQnNvblZhbHVlUmVhZGVyKHRydXN0KTtcbiAgfVxuXG4gIHJlYWRBbnk8Uj4ocmF3OiBCdWZmZXIsIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZEFueSh0aGlzLmJzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKHJhdylbdGhpcy5wcmltaXRpdmVXcmFwcGVyXSwgdmlzaXRvcik7XG4gIH1cblxuICByZWFkQm9vbGVhbjxSPihyYXc6IEJ1ZmZlciwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkQm9vbGVhbih0aGlzLmJzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKHJhdylbdGhpcy5wcmltaXRpdmVXcmFwcGVyXSwgdmlzaXRvcik7XG4gIH1cblxuICByZWFkQnl0ZXM8Uj4ocmF3OiBCdWZmZXIsIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZEJ5dGVzKHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWREYXRlPFI+KHJhdzogQnVmZmVyLCB2aXNpdG9yOiBSZWFkVmlzaXRvcjxSPik6IFIge1xuICAgIHJldHVybiB0aGlzLnZhbHVlUmVhZGVyLnJlYWREYXRlKHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWREb2N1bWVudDxSPihyYXc6IGFueSwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkRG9jdW1lbnQodGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWRGbG9hdDY0PFI+KHJhdzogQnVmZmVyLCB2aXNpdG9yOiBSZWFkVmlzaXRvcjxSPik6IFIge1xuICAgIHJldHVybiB0aGlzLnZhbHVlUmVhZGVyLnJlYWRGbG9hdDY0KHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWRMaXN0PFI+KHJhdzogYW55LCB2aXNpdG9yOiBSZWFkVmlzaXRvcjxSPik6IFIge1xuICAgIHJldHVybiB0aGlzLnZhbHVlUmVhZGVyLnJlYWRMaXN0KHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWRNYXA8Uj4ocmF3OiBhbnksIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZE1hcCh0aGlzLmJzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKHJhdyksIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZE51bGw8Uj4ocmF3OiBCdWZmZXIsIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZE51bGwodGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpW3RoaXMucHJpbWl0aXZlV3JhcHBlcl0sIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZFN0cmluZzxSPihyYXc6IEJ1ZmZlciwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkU3RyaW5nKHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
