/**
 * @module kryo/readers/bson
 */
import { BsonValueReader } from "./bson-value";
export class BsonReader {
    constructor(bson, trust, primitiveWrapper = "_") {
        this.bsonSerializer = new bson.BSON();
        this.trustInput = trust;
        this.primitiveWrapper = primitiveWrapper;
        this.valueReader = new BsonValueReader(trust);
    }
    readAny(raw, visitor) {
        return this.valueReader.readAny(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readBoolean(raw, visitor) {
        return this.valueReader.readBoolean(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readBytes(raw, visitor) {
        return this.valueReader.readBytes(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readDate(raw, visitor) {
        return this.valueReader.readDate(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readDocument(raw, visitor) {
        return this.valueReader.readDocument(this.bsonSerializer.deserialize(raw), visitor);
    }
    readFloat64(raw, visitor) {
        return this.valueReader.readFloat64(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readList(raw, visitor) {
        return this.valueReader.readList(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readMap(raw, visitor) {
        return this.valueReader.readMap(this.bsonSerializer.deserialize(raw), visitor);
    }
    readNull(raw, visitor) {
        return this.valueReader.readNull(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
    readString(raw, visitor) {
        return this.valueReader.readString(this.bsonSerializer.deserialize(raw)[this.primitiveWrapper], visitor);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVhZGVycy9ic29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBSUgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUvQyxNQUFNLE9BQU8sVUFBVTtJQVNyQixZQUFZLElBQWtCLEVBQUUsS0FBZSxFQUFFLG1CQUEyQixHQUFHO1FBQzdFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3pDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE9BQU8sQ0FBSSxHQUFXLEVBQUUsT0FBdUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUQsV0FBVyxDQUFJLEdBQVcsRUFBRSxPQUF1QjtRQUNqRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRCxTQUFTLENBQUksR0FBVyxFQUFFLE9BQXVCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFXLEVBQUUsT0FBdUI7UUFDOUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsWUFBWSxDQUFJLEdBQVEsRUFBRSxPQUF1QjtRQUMvQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFRCxXQUFXLENBQUksR0FBVyxFQUFFLE9BQXVCO1FBQ2pELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVELFFBQVEsQ0FBSSxHQUFRLEVBQUUsT0FBdUI7UUFDM0MsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsT0FBTyxDQUFJLEdBQVEsRUFBRSxPQUF1QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxRQUFRLENBQUksR0FBVyxFQUFFLE9BQXVCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekcsQ0FBQztJQUVELFVBQVUsQ0FBSSxHQUFXLEVBQUUsT0FBdUI7UUFDaEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRyxDQUFDO0NBQ0YiLCJmaWxlIjoibGliL3JlYWRlcnMvYnNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBrcnlvL3JlYWRlcnMvYnNvblxuICovXG5cbmltcG9ydCBfYnNvbiBmcm9tIFwiYnNvblwiO1xuaW1wb3J0IHsgUmVhZGVyLCBSZWFkVmlzaXRvciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBCc29uVmFsdWVSZWFkZXIgfSBmcm9tIFwiLi9ic29uLXZhbHVlXCI7XG5cbmV4cG9ydCBjbGFzcyBCc29uUmVhZGVyIGltcGxlbWVudHMgUmVhZGVyPEJ1ZmZlcj4ge1xuICB0cnVzdElucHV0PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIHJlYWRvbmx5IGJzb25TZXJpYWxpemVyOiBfYnNvbi5CU09OO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWVSZWFkZXI6IEJzb25WYWx1ZVJlYWRlcjtcblxuICBwcml2YXRlIHJlYWRvbmx5IHByaW1pdGl2ZVdyYXBwZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihic29uOiB0eXBlb2YgX2Jzb24sIHRydXN0PzogYm9vbGVhbiwgcHJpbWl0aXZlV3JhcHBlcjogc3RyaW5nID0gXCJfXCIpIHtcbiAgICB0aGlzLmJzb25TZXJpYWxpemVyID0gbmV3IGJzb24uQlNPTigpO1xuICAgIHRoaXMudHJ1c3RJbnB1dCA9IHRydXN0O1xuICAgIHRoaXMucHJpbWl0aXZlV3JhcHBlciA9IHByaW1pdGl2ZVdyYXBwZXI7XG4gICAgdGhpcy52YWx1ZVJlYWRlciA9IG5ldyBCc29uVmFsdWVSZWFkZXIodHJ1c3QpO1xuICB9XG5cbiAgcmVhZEFueTxSPihyYXc6IEJ1ZmZlciwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkQW55KHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWRCb29sZWFuPFI+KHJhdzogQnVmZmVyLCB2aXNpdG9yOiBSZWFkVmlzaXRvcjxSPik6IFIge1xuICAgIHJldHVybiB0aGlzLnZhbHVlUmVhZGVyLnJlYWRCb29sZWFuKHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KVt0aGlzLnByaW1pdGl2ZVdyYXBwZXJdLCB2aXNpdG9yKTtcbiAgfVxuXG4gIHJlYWRCeXRlczxSPihyYXc6IEJ1ZmZlciwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkQnl0ZXModGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpW3RoaXMucHJpbWl0aXZlV3JhcHBlcl0sIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZERhdGU8Uj4ocmF3OiBCdWZmZXIsIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZERhdGUodGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpW3RoaXMucHJpbWl0aXZlV3JhcHBlcl0sIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZERvY3VtZW50PFI+KHJhdzogYW55LCB2aXNpdG9yOiBSZWFkVmlzaXRvcjxSPik6IFIge1xuICAgIHJldHVybiB0aGlzLnZhbHVlUmVhZGVyLnJlYWREb2N1bWVudCh0aGlzLmJzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKHJhdyksIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZEZsb2F0NjQ8Uj4ocmF3OiBCdWZmZXIsIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZEZsb2F0NjQodGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpW3RoaXMucHJpbWl0aXZlV3JhcHBlcl0sIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZExpc3Q8Uj4ocmF3OiBhbnksIHZpc2l0b3I6IFJlYWRWaXNpdG9yPFI+KTogUiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVSZWFkZXIucmVhZExpc3QodGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpW3RoaXMucHJpbWl0aXZlV3JhcHBlcl0sIHZpc2l0b3IpO1xuICB9XG5cbiAgcmVhZE1hcDxSPihyYXc6IGFueSwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkTWFwKHRoaXMuYnNvblNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmF3KSwgdmlzaXRvcik7XG4gIH1cblxuICByZWFkTnVsbDxSPihyYXc6IEJ1ZmZlciwgdmlzaXRvcjogUmVhZFZpc2l0b3I8Uj4pOiBSIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVJlYWRlci5yZWFkTnVsbCh0aGlzLmJzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKHJhdylbdGhpcy5wcmltaXRpdmVXcmFwcGVyXSwgdmlzaXRvcik7XG4gIH1cblxuICByZWFkU3RyaW5nPFI+KHJhdzogQnVmZmVyLCB2aXNpdG9yOiBSZWFkVmlzaXRvcjxSPik6IFIge1xuICAgIHJldHVybiB0aGlzLnZhbHVlUmVhZGVyLnJlYWRTdHJpbmcodGhpcy5ic29uU2VyaWFsaXplci5kZXNlcmlhbGl6ZShyYXcpW3RoaXMucHJpbWl0aXZlV3JhcHBlcl0sIHZpc2l0b3IpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
