"use strict";
/**
 * @module kryo/writers/qs
 */
Object.defineProperty(exports, "__esModule", { value: true });
const qs_value_1 = require("./qs-value");
class QsWriter {
    constructor(qs, primitiveWrapper = "_") {
        this.qs = qs;
        this.primitiveWrapper = primitiveWrapper;
        this.valueWriter = new qs_value_1.QsValueWriter();
    }
    writeAny(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeAny(value) });
    }
    writeBoolean(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeBoolean(value) });
    }
    writeBytes(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeBytes(value) });
    }
    writeDate(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeDate(value) });
    }
    writeDocument(keys, handler) {
        return this.qs.stringify(this.valueWriter.writeDocument(keys, handler));
    }
    writeFloat64(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeFloat64(value) });
    }
    writeList(size, handler) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeList(size, handler) });
    }
    writeMap(size, keyHandler, valueHandler) {
        return this.qs.stringify(this.valueWriter.writeMap(size, keyHandler, valueHandler));
    }
    writeNull() {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeNull() });
    }
    writeString(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeString(value) });
    }
}
exports.QsWriter = QsWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9xcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBSUgseUNBQTJDO0FBRTNDLE1BQWEsUUFBUTtJQUtuQixZQUFZLEVBQWMsRUFBRSxtQkFBMkIsR0FBRztRQUN4RCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksd0JBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFjO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWlCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVc7UUFDbkIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxhQUFhLENBQ1gsSUFBaUIsRUFDakIsT0FBa0Q7UUFFbEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWE7UUFDeEIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWSxFQUFFLE9BQXdEO1FBQzlFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELFFBQVEsQ0FDTixJQUFZLEVBQ1osVUFBK0QsRUFDL0QsWUFBbUU7UUFFbkUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFDdkIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Q0FDRjtBQXpERCw0QkF5REMiLCJmaWxlIjoibGliL3dyaXRlcnMvcXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUga3J5by93cml0ZXJzL3FzXG4gKi9cblxuaW1wb3J0IF9xcyBmcm9tIFwicXNcIjtcbmltcG9ydCB7IFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBRc1ZhbHVlV3JpdGVyIH0gZnJvbSBcIi4vcXMtdmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIFFzV3JpdGVyIGltcGxlbWVudHMgV3JpdGVyPHN0cmluZz4ge1xuICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlV3JpdGVyOiBRc1ZhbHVlV3JpdGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHFzOiB0eXBlb2YgX3FzO1xuICBwcml2YXRlIHJlYWRvbmx5IHByaW1pdGl2ZVdyYXBwZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihxczogdHlwZW9mIF9xcywgcHJpbWl0aXZlV3JhcHBlcjogc3RyaW5nID0gXCJfXCIpIHtcbiAgICB0aGlzLnFzID0gcXM7XG4gICAgdGhpcy5wcmltaXRpdmVXcmFwcGVyID0gcHJpbWl0aXZlV3JhcHBlcjtcbiAgICB0aGlzLnZhbHVlV3JpdGVyID0gbmV3IFFzVmFsdWVXcml0ZXIoKTtcbiAgfVxuXG4gIHdyaXRlQW55KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnFzLnN0cmluZ2lmeSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVBbnkodmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZUJvb2xlYW4odmFsdWU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnFzLnN0cmluZ2lmeSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVCb29sZWFuKHZhbHVlKX0pO1xuICB9XG5cbiAgd3JpdGVCeXRlcyh2YWx1ZTogVWludDhBcnJheSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUJ5dGVzKHZhbHVlKX0pO1xuICB9XG5cbiAgd3JpdGVEYXRlKHZhbHVlOiBEYXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5xcy5zdHJpbmdpZnkoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlRGF0ZSh2YWx1ZSl9KTtcbiAgfVxuXG4gIHdyaXRlRG9jdW1lbnQ8SyBleHRlbmRzIHN0cmluZz4oXG4gICAga2V5czogSXRlcmFibGU8Sz4sXG4gICAgaGFuZGxlcjogKGtleTogSywgZmllbGRXcml0ZXI6IFdyaXRlcjxhbnk+KSA9PiBhbnksXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVEb2N1bWVudChrZXlzLCBoYW5kbGVyKSk7XG4gIH1cblxuICB3cml0ZUZsb2F0NjQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUZsb2F0NjQodmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZUxpc3Qoc2l6ZTogbnVtYmVyLCBoYW5kbGVyOiAoaW5kZXg6IG51bWJlciwgaXRlbVdyaXRlcjogV3JpdGVyPGFueT4pID0+IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUxpc3Qoc2l6ZSwgaGFuZGxlcil9KTtcbiAgfVxuXG4gIHdyaXRlTWFwKFxuICAgIHNpemU6IG51bWJlcixcbiAgICBrZXlIYW5kbGVyOiA8S1c+KGluZGV4OiBudW1iZXIsIG1hcEtleVdyaXRlcjogV3JpdGVyPEtXPikgPT4gS1csXG4gICAgdmFsdWVIYW5kbGVyOiA8Vlc+KGluZGV4OiBudW1iZXIsIG1hcFZhbHVlV3JpdGVyOiBXcml0ZXI8Vlc+KSA9PiBWVyxcbiAgKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5xcy5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZU1hcChzaXplLCBrZXlIYW5kbGVyLCB2YWx1ZUhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlTnVsbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnFzLnN0cmluZ2lmeSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVOdWxsKCl9KTtcbiAgfVxuXG4gIHdyaXRlU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnFzLnN0cmluZ2lmeSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVTdHJpbmcodmFsdWUpfSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
