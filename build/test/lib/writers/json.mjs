/**
 * @module kryo/writers/json
 */
import { JsonValueWriter } from "./json-value";
export class JsonWriter {
    constructor() {
        this.valueWriter = new JsonValueWriter();
    }
    writeAny(value) {
        return JSON.stringify(this.valueWriter.writeAny(value));
    }
    writeBoolean(value) {
        return JSON.stringify(this.valueWriter.writeBoolean(value));
    }
    writeBytes(value) {
        return JSON.stringify(this.valueWriter.writeBytes(value));
    }
    writeDate(value) {
        return JSON.stringify(this.valueWriter.writeDate(value));
    }
    writeDocument(keys, handler) {
        return JSON.stringify(this.valueWriter.writeDocument(keys, handler));
    }
    writeFloat64(value) {
        return JSON.stringify(this.valueWriter.writeFloat64(value));
    }
    writeList(size, handler) {
        return JSON.stringify(this.valueWriter.writeList(size, handler));
    }
    writeMap(size, keyHandler, valueHandler) {
        return JSON.stringify(this.valueWriter.writeMap(size, keyHandler, valueHandler));
    }
    writeNull() {
        return JSON.stringify(this.valueWriter.writeNull());
    }
    writeString(value) {
        return JSON.stringify(this.valueWriter.writeString(value));
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBR0gsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUvQyxNQUFNLE9BQU8sVUFBVTtJQUdyQjtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFjO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxVQUFVLENBQUMsS0FBaUI7UUFDMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFXO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxhQUFhLENBQ1gsSUFBaUIsRUFDakIsT0FBa0Q7UUFFbEQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUF3RDtRQUM5RSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFFBQVEsQ0FDTixJQUFZLEVBQ1osVUFBK0QsRUFDL0QsWUFBbUU7UUFFbkUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7Q0FDRiIsImZpbGUiOiJsaWIvd3JpdGVycy9qc29uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIGtyeW8vd3JpdGVycy9qc29uXG4gKi9cblxuaW1wb3J0IHsgV3JpdGVyIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IEpzb25WYWx1ZVdyaXRlciB9IGZyb20gXCIuL2pzb24tdmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIEpzb25Xcml0ZXIgaW1wbGVtZW50cyBXcml0ZXI8c3RyaW5nPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWVXcml0ZXI6IEpzb25WYWx1ZVdyaXRlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnZhbHVlV3JpdGVyID0gbmV3IEpzb25WYWx1ZVdyaXRlcigpO1xuICB9XG5cbiAgd3JpdGVBbnkodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVBbnkodmFsdWUpKTtcbiAgfVxuXG4gIHdyaXRlQm9vbGVhbih2YWx1ZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVCb29sZWFuKHZhbHVlKSk7XG4gIH1cblxuICB3cml0ZUJ5dGVzKHZhbHVlOiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZUJ5dGVzKHZhbHVlKSk7XG4gIH1cblxuICB3cml0ZURhdGUodmFsdWU6IERhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlRGF0ZSh2YWx1ZSkpO1xuICB9XG5cbiAgd3JpdGVEb2N1bWVudDxLIGV4dGVuZHMgc3RyaW5nPihcbiAgICBrZXlzOiBJdGVyYWJsZTxLPixcbiAgICBoYW5kbGVyOiAoa2V5OiBLLCBmaWVsZFdyaXRlcjogV3JpdGVyPGFueT4pID0+IGFueSxcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZURvY3VtZW50KGtleXMsIGhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlRmxvYXQ2NCh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZUZsb2F0NjQodmFsdWUpKTtcbiAgfVxuXG4gIHdyaXRlTGlzdChzaXplOiBudW1iZXIsIGhhbmRsZXI6IChpbmRleDogbnVtYmVyLCBpdGVtV3JpdGVyOiBXcml0ZXI8YW55PikgPT4gYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZUxpc3Qoc2l6ZSwgaGFuZGxlcikpO1xuICB9XG5cbiAgd3JpdGVNYXAoXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIGtleUhhbmRsZXI6IDxLVz4oaW5kZXg6IG51bWJlciwgbWFwS2V5V3JpdGVyOiBXcml0ZXI8S1c+KSA9PiBLVyxcbiAgICB2YWx1ZUhhbmRsZXI6IDxWVz4oaW5kZXg6IG51bWJlciwgbWFwVmFsdWVXcml0ZXI6IFdyaXRlcjxWVz4pID0+IFZXLFxuICApOiBhbnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlTWFwKHNpemUsIGtleUhhbmRsZXIsIHZhbHVlSGFuZGxlcikpO1xuICB9XG5cbiAgd3JpdGVOdWxsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVOdWxsKCkpO1xuICB9XG5cbiAgd3JpdGVTdHJpbmcodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVTdHJpbmcodmFsdWUpKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
