/**
 * @module kryo/writers/json-value
 */
import { StructuredWriter } from "./structured";
export class JsonValueWriter extends StructuredWriter {
    writeFloat64(value) {
        if (isNaN(value)) {
            return "NaN";
        }
        else if (value === Infinity) {
            return "+Infinity";
        }
        else if (value === -Infinity) {
            return "-Infinity";
        }
        else if (Object.is(value, "-0")) {
            return "-0";
        }
        return value;
    }
    writeDate(value) {
        return value.toISOString();
    }
    writeNull() {
        return null;
    }
    writeBytes(value) {
        const result = new Array(value.length);
        const len = value.length;
        for (let i = 0; i < len; i++) {
            result[i] = (value[i] < 16 ? "0" : "") + value[i].toString(16);
        }
        return result.join("");
    }
    writeBoolean(value) {
        return value;
    }
    writeString(value) {
        return value;
    }
    writeMap(size, keyHandler, valueHandler) {
        // TODO: Use a specialized writer that only accepts strings and numbers (KeyMustBeAStringError)
        // Let users build custom serializers if they want
        const jsonWriter = new JsonValueWriter();
        const result = {};
        for (let index = 0; index < size; index++) {
            const key = keyHandler(index, jsonWriter);
            result[JSON.stringify(key)] = valueHandler(index, this);
        }
        return result;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9qc29uLXZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBR0gsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE1BQU0sT0FBTyxlQUFnQixTQUFRLGdCQUFnQjtJQUNuRCxZQUFZLENBQUMsS0FBYTtRQUN4QixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoQixPQUFPLEtBQUssQ0FBQztTQUNkO2FBQU0sSUFBSSxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO2FBQU0sSUFBSSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxXQUFXLENBQUM7U0FDcEI7YUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBVztRQUNuQixPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFpQjtRQUMxQixNQUFNLE1BQU0sR0FBYSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsTUFBTSxHQUFHLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWM7UUFDekIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFDdkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsUUFBUSxDQUNOLElBQVksRUFDWixVQUErRCxFQUMvRCxZQUFtRTtRQUVuRSwrRkFBK0Y7UUFDL0Ysa0RBQWtEO1FBQ2xELE1BQU0sVUFBVSxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQzFELE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztRQUN2QixLQUFLLElBQUksS0FBSyxHQUFXLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2pELE1BQU0sR0FBRyxHQUFRLFVBQVUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGIiwiZmlsZSI6ImxpYi93cml0ZXJzL2pzb24tdmFsdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUga3J5by93cml0ZXJzL2pzb24tdmFsdWVcbiAqL1xuXG5pbXBvcnQgeyBXcml0ZXIgfSBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IHsgU3RydWN0dXJlZFdyaXRlciB9IGZyb20gXCIuL3N0cnVjdHVyZWRcIjtcblxuZXhwb3J0IGNsYXNzIEpzb25WYWx1ZVdyaXRlciBleHRlbmRzIFN0cnVjdHVyZWRXcml0ZXIge1xuICB3cml0ZUZsb2F0NjQodmFsdWU6IG51bWJlcik6IG51bWJlciB8IHN0cmluZyB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIFwiTmFOXCI7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHJldHVybiBcIitJbmZpbml0eVwiO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IC1JbmZpbml0eSkge1xuICAgICAgcmV0dXJuIFwiLUluZmluaXR5XCI7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuaXModmFsdWUsIFwiLTBcIikpIHtcbiAgICAgIHJldHVybiBcIi0wXCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHdyaXRlRGF0ZSh2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICB3cml0ZU51bGwoKTogbnVsbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB3cml0ZUJ5dGVzKHZhbHVlOiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gbmV3IEFycmF5KHZhbHVlLmxlbmd0aCk7XG4gICAgY29uc3QgbGVuOiBudW1iZXIgPSB2YWx1ZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSAodmFsdWVbaV0gPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZVtpXS50b1N0cmluZygxNik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcbiAgfVxuXG4gIHdyaXRlQm9vbGVhbih2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHdyaXRlU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHdyaXRlTWFwKFxuICAgIHNpemU6IG51bWJlcixcbiAgICBrZXlIYW5kbGVyOiA8S1c+KGluZGV4OiBudW1iZXIsIG1hcEtleVdyaXRlcjogV3JpdGVyPEtXPikgPT4gS1csXG4gICAgdmFsdWVIYW5kbGVyOiA8Vlc+KGluZGV4OiBudW1iZXIsIG1hcFZhbHVlV3JpdGVyOiBXcml0ZXI8Vlc+KSA9PiBWVyxcbiAgKTogYW55IHtcbiAgICAvLyBUT0RPOiBVc2UgYSBzcGVjaWFsaXplZCB3cml0ZXIgdGhhdCBvbmx5IGFjY2VwdHMgc3RyaW5ncyBhbmQgbnVtYmVycyAoS2V5TXVzdEJlQVN0cmluZ0Vycm9yKVxuICAgIC8vIExldCB1c2VycyBidWlsZCBjdXN0b20gc2VyaWFsaXplcnMgaWYgdGhleSB3YW50XG4gICAgY29uc3QganNvbldyaXRlcjogSnNvblZhbHVlV3JpdGVyID0gbmV3IEpzb25WYWx1ZVdyaXRlcigpO1xuICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG4gICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDA7IGluZGV4IDwgc2l6ZTsgaW5kZXgrKykge1xuICAgICAgY29uc3Qga2V5OiBhbnkgPSBrZXlIYW5kbGVyKGluZGV4LCBqc29uV3JpdGVyKTtcbiAgICAgIHJlc3VsdFtKU09OLnN0cmluZ2lmeShrZXkpXSA9IHZhbHVlSGFuZGxlcihpbmRleCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
