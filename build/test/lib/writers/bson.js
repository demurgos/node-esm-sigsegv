"use strict";
/**
 * @module kryo/writers/bson
 */
Object.defineProperty(exports, "__esModule", { value: true });
const bson_value_1 = require("./bson-value");
class BsonWriter {
    constructor(bson, primitiveWrapper = "_") {
        this.bsonSerializer = new bson.BSON();
        this.primitiveWrapper = primitiveWrapper;
        this.valueWriter = new bson_value_1.BsonValueWriter(bson);
    }
    writeAny(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeAny(value) });
    }
    writeBoolean(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeBoolean(value) });
    }
    writeBytes(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeBytes(value) });
    }
    writeDate(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeDate(value) });
    }
    writeDocument(keys, handler) {
        return this.bsonSerializer.serialize(this.valueWriter.writeDocument(keys, handler));
    }
    writeFloat64(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeFloat64(value) });
    }
    writeList(size, handler) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeList(size, handler) });
    }
    writeMap(size, keyHandler, valueHandler) {
        return this.bsonSerializer.serialize(this.valueWriter.writeMap(size, keyHandler, valueHandler));
    }
    writeNull() {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeNull() });
    }
    writeString(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeString(value) });
    }
}
exports.BsonWriter = BsonWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9ic29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFJSCw2Q0FBK0M7QUFFL0MsTUFBYSxVQUFVO0lBTXJCLFlBQVksSUFBa0IsRUFBRSxtQkFBMkIsR0FBRztRQUM1RCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksNEJBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYztRQUN6QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDeEcsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFpQjtRQUMxQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFXO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRUQsYUFBYSxDQUNYLElBQWlCLEVBQ2pCLE9BQWtEO1FBRWxELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFhO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUF3RDtRQUM5RSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLFVBQStELEVBQy9ELFlBQW1FO1FBRW5FLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBQyxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUN2RyxDQUFDO0NBQ0Y7QUExREQsZ0NBMERDIiwiZmlsZSI6ImxpYi93cml0ZXJzL2Jzb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUga3J5by93cml0ZXJzL2Jzb25cbiAqL1xuXG5pbXBvcnQgX2Jzb24gZnJvbSBcImJzb25cIjtcbmltcG9ydCB7IFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBCc29uVmFsdWVXcml0ZXIgfSBmcm9tIFwiLi9ic29uLXZhbHVlXCI7XG5cbmV4cG9ydCBjbGFzcyBCc29uV3JpdGVyIGltcGxlbWVudHMgV3JpdGVyPEJ1ZmZlcj4ge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgYnNvblNlcmlhbGl6ZXI6IF9ic29uLkJTT047XG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWVXcml0ZXI6IEJzb25WYWx1ZVdyaXRlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBwcmltaXRpdmVXcmFwcGVyOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoYnNvbjogdHlwZW9mIF9ic29uLCBwcmltaXRpdmVXcmFwcGVyOiBzdHJpbmcgPSBcIl9cIikge1xuICAgIHRoaXMuYnNvblNlcmlhbGl6ZXIgPSBuZXcgYnNvbi5CU09OKCk7XG4gICAgdGhpcy5wcmltaXRpdmVXcmFwcGVyID0gcHJpbWl0aXZlV3JhcHBlcjtcbiAgICB0aGlzLnZhbHVlV3JpdGVyID0gbmV3IEJzb25WYWx1ZVdyaXRlcihic29uKTtcbiAgfVxuXG4gIHdyaXRlQW55KHZhbHVlOiBudW1iZXIpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLmJzb25TZXJpYWxpemVyLnNlcmlhbGl6ZSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVBbnkodmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZUJvb2xlYW4odmFsdWU6IGJvb2xlYW4pOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLmJzb25TZXJpYWxpemVyLnNlcmlhbGl6ZSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVCb29sZWFuKHZhbHVlKX0pO1xuICB9XG5cbiAgd3JpdGVCeXRlcyh2YWx1ZTogVWludDhBcnJheSk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUJ5dGVzKHZhbHVlKX0pO1xuICB9XG5cbiAgd3JpdGVEYXRlKHZhbHVlOiBEYXRlKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ic29uU2VyaWFsaXplci5zZXJpYWxpemUoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlRGF0ZSh2YWx1ZSl9KTtcbiAgfVxuXG4gIHdyaXRlRG9jdW1lbnQ8SyBleHRlbmRzIHN0cmluZz4oXG4gICAga2V5czogSXRlcmFibGU8Sz4sXG4gICAgaGFuZGxlcjogKGtleTogSywgZmllbGRXcml0ZXI6IFdyaXRlcjxhbnk+KSA9PiBhbnksXG4gICk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHRoaXMudmFsdWVXcml0ZXIud3JpdGVEb2N1bWVudChrZXlzLCBoYW5kbGVyKSk7XG4gIH1cblxuICB3cml0ZUZsb2F0NjQodmFsdWU6IG51bWJlcik6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUZsb2F0NjQodmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZUxpc3Qoc2l6ZTogbnVtYmVyLCBoYW5kbGVyOiAoaW5kZXg6IG51bWJlciwgaXRlbVdyaXRlcjogV3JpdGVyPGFueT4pID0+IGFueSk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUxpc3Qoc2l6ZSwgaGFuZGxlcil9KTtcbiAgfVxuXG4gIHdyaXRlTWFwKFxuICAgIHNpemU6IG51bWJlcixcbiAgICBrZXlIYW5kbGVyOiA8S1c+KGluZGV4OiBudW1iZXIsIG1hcEtleVdyaXRlcjogV3JpdGVyPEtXPikgPT4gS1csXG4gICAgdmFsdWVIYW5kbGVyOiA8Vlc+KGluZGV4OiBudW1iZXIsIG1hcFZhbHVlV3JpdGVyOiBXcml0ZXI8Vlc+KSA9PiBWVyxcbiAgKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5ic29uU2VyaWFsaXplci5zZXJpYWxpemUodGhpcy52YWx1ZVdyaXRlci53cml0ZU1hcChzaXplLCBrZXlIYW5kbGVyLCB2YWx1ZUhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlTnVsbCgpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLmJzb25TZXJpYWxpemVyLnNlcmlhbGl6ZSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVOdWxsKCl9KTtcbiAgfVxuXG4gIHdyaXRlU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLmJzb25TZXJpYWxpemVyLnNlcmlhbGl6ZSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVTdHJpbmcodmFsdWUpfSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
