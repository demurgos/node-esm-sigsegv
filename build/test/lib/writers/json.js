"use strict";
/**
 * @module kryo/writers/json
 */
Object.defineProperty(exports, "__esModule", { value: true });
const json_value_1 = require("./json-value");
class JsonWriter {
    constructor() {
        this.valueWriter = new json_value_1.JsonValueWriter();
    }
    writeAny(value) {
        return JSON.stringify(this.valueWriter.writeAny(value));
    }
    writeBoolean(value) {
        return JSON.stringify(this.valueWriter.writeBoolean(value));
    }
    writeBytes(value) {
        return JSON.stringify(this.valueWriter.writeBytes(value));
    }
    writeDate(value) {
        return JSON.stringify(this.valueWriter.writeDate(value));
    }
    writeDocument(keys, handler) {
        return JSON.stringify(this.valueWriter.writeDocument(keys, handler));
    }
    writeFloat64(value) {
        return JSON.stringify(this.valueWriter.writeFloat64(value));
    }
    writeList(size, handler) {
        return JSON.stringify(this.valueWriter.writeList(size, handler));
    }
    writeMap(size, keyHandler, valueHandler) {
        return JSON.stringify(this.valueWriter.writeMap(size, keyHandler, valueHandler));
    }
    writeNull() {
        return JSON.stringify(this.valueWriter.writeNull());
    }
    writeString(value) {
        return JSON.stringify(this.valueWriter.writeString(value));
    }
}
exports.JsonWriter = JsonWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFHSCw2Q0FBK0M7QUFFL0MsTUFBYSxVQUFVO0lBR3JCO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDRCQUFlLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFjO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxVQUFVLENBQUMsS0FBaUI7UUFDMUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFXO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxhQUFhLENBQ1gsSUFBaUIsRUFDakIsT0FBa0Q7UUFFbEQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUF3RDtRQUM5RSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFFBQVEsQ0FDTixJQUFZLEVBQ1osVUFBK0QsRUFDL0QsWUFBbUU7UUFFbkUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7Q0FDRjtBQXJERCxnQ0FxREMiLCJmaWxlIjoibGliL3dyaXRlcnMvanNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBrcnlvL3dyaXRlcnMvanNvblxuICovXG5cbmltcG9ydCB7IFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBKc29uVmFsdWVXcml0ZXIgfSBmcm9tIFwiLi9qc29uLXZhbHVlXCI7XG5cbmV4cG9ydCBjbGFzcyBKc29uV3JpdGVyIGltcGxlbWVudHMgV3JpdGVyPHN0cmluZz4ge1xuICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlV3JpdGVyOiBKc29uVmFsdWVXcml0ZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWx1ZVdyaXRlciA9IG5ldyBKc29uVmFsdWVXcml0ZXIoKTtcbiAgfVxuXG4gIHdyaXRlQW55KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlQW55KHZhbHVlKSk7XG4gIH1cblxuICB3cml0ZUJvb2xlYW4odmFsdWU6IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlQm9vbGVhbih2YWx1ZSkpO1xuICB9XG5cbiAgd3JpdGVCeXRlcyh2YWx1ZTogVWludDhBcnJheSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVCeXRlcyh2YWx1ZSkpO1xuICB9XG5cbiAgd3JpdGVEYXRlKHZhbHVlOiBEYXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZURhdGUodmFsdWUpKTtcbiAgfVxuXG4gIHdyaXRlRG9jdW1lbnQ8SyBleHRlbmRzIHN0cmluZz4oXG4gICAga2V5czogSXRlcmFibGU8Sz4sXG4gICAgaGFuZGxlcjogKGtleTogSywgZmllbGRXcml0ZXI6IFdyaXRlcjxhbnk+KSA9PiBhbnksXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVEb2N1bWVudChrZXlzLCBoYW5kbGVyKSk7XG4gIH1cblxuICB3cml0ZUZsb2F0NjQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVGbG9hdDY0KHZhbHVlKSk7XG4gIH1cblxuICB3cml0ZUxpc3Qoc2l6ZTogbnVtYmVyLCBoYW5kbGVyOiAoaW5kZXg6IG51bWJlciwgaXRlbVdyaXRlcjogV3JpdGVyPGFueT4pID0+IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudmFsdWVXcml0ZXIud3JpdGVMaXN0KHNpemUsIGhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlTWFwKFxuICAgIHNpemU6IG51bWJlcixcbiAgICBrZXlIYW5kbGVyOiA8S1c+KGluZGV4OiBudW1iZXIsIG1hcEtleVdyaXRlcjogV3JpdGVyPEtXPikgPT4gS1csXG4gICAgdmFsdWVIYW5kbGVyOiA8Vlc+KGluZGV4OiBudW1iZXIsIG1hcFZhbHVlV3JpdGVyOiBXcml0ZXI8Vlc+KSA9PiBWVyxcbiAgKTogYW55IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZU1hcChzaXplLCBrZXlIYW5kbGVyLCB2YWx1ZUhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlTnVsbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlTnVsbCgpKTtcbiAgfVxuXG4gIHdyaXRlU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlU3RyaW5nKHZhbHVlKSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
