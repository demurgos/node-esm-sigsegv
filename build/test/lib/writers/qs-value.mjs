/**
 * @module kryo/writers/qs-value
 */
import { JsonWriter } from "./json";
import { StructuredWriter } from "./structured";
export class QsValueWriter extends StructuredWriter {
    writeBoolean(value) {
        return value ? "true" : "false";
    }
    writeBytes(value) {
        const result = new Array(value.length);
        const len = value.length;
        for (let i = 0; i < len; i++) {
            result[i] = (value[i] < 16 ? "0" : "") + value[i].toString(16);
        }
        return result.join("");
    }
    writeDate(value) {
        return value.toISOString();
    }
    writeFloat64(value) {
        if (isNaN(value)) {
            return "NaN";
        }
        else if (value === Infinity) {
            return "+Infinity";
        }
        else if (value === -Infinity) {
            return "-Infinity";
        }
        return value.toString(10);
    }
    writeNull() {
        return "";
    }
    writeMap(size, keyHandler, valueHandler) {
        const result = {};
        for (let index = 0; index < size; index++) {
            // TODO: Use a specialized writer that only accepts strings and numbers (KeyMustBeAStringError)
            // Let users build custom serializers if they want
            const jsonWriter = new JsonWriter();
            const key = keyHandler(index, jsonWriter);
            result[JSON.stringify(key)] = valueHandler(index, this);
        }
        return result;
    }
    writeString(value) {
        return value;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9xcy12YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUdILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE1BQU0sT0FBTyxhQUFjLFNBQVEsZ0JBQWdCO0lBQ2pELFlBQVksQ0FBQyxLQUFjO1FBQ3pCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNsQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWlCO1FBQzFCLE1BQU0sTUFBTSxHQUFhLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRCxNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBVztRQUNuQixPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWE7UUFDeEIsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEIsT0FBTyxLQUFLLENBQUM7U0FDZDthQUFNLElBQUksS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixPQUFPLFdBQVcsQ0FBQztTQUNwQjthQUFNLElBQUksS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzlCLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsUUFBUSxDQUNOLElBQVksRUFDWixVQUErRCxFQUMvRCxZQUFtRTtRQUVuRSxNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsS0FBSyxJQUFJLEtBQUssR0FBVyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqRCwrRkFBK0Y7WUFDL0Ysa0RBQWtEO1lBQ2xELE1BQU0sVUFBVSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7WUFDaEQsTUFBTSxHQUFHLEdBQVEsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFDdkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YiLCJmaWxlIjoibGliL3dyaXRlcnMvcXMtdmFsdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUga3J5by93cml0ZXJzL3FzLXZhbHVlXG4gKi9cblxuaW1wb3J0IHsgV3JpdGVyIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IEpzb25Xcml0ZXIgfSBmcm9tIFwiLi9qc29uXCI7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVkV3JpdGVyIH0gZnJvbSBcIi4vc3RydWN0dXJlZFwiO1xuXG5leHBvcnQgY2xhc3MgUXNWYWx1ZVdyaXRlciBleHRlbmRzIFN0cnVjdHVyZWRXcml0ZXIge1xuICB3cml0ZUJvb2xlYW4odmFsdWU6IGJvb2xlYW4pOiBcInRydWVcIiB8IFwiZmFsc2VcIiB7XG4gICAgcmV0dXJuIHZhbHVlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG4gIH1cblxuICB3cml0ZUJ5dGVzKHZhbHVlOiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gbmV3IEFycmF5KHZhbHVlLmxlbmd0aCk7XG4gICAgY29uc3QgbGVuOiBudW1iZXIgPSB2YWx1ZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSAodmFsdWVbaV0gPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZVtpXS50b1N0cmluZygxNik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcbiAgfVxuXG4gIHdyaXRlRGF0ZSh2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICB3cml0ZUZsb2F0NjQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIFwiTmFOXCI7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHJldHVybiBcIitJbmZpbml0eVwiO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IC1JbmZpbml0eSkge1xuICAgICAgcmV0dXJuIFwiLUluZmluaXR5XCI7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygxMCk7XG4gIH1cblxuICB3cml0ZU51bGwoKTogXCJcIiB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICB3cml0ZU1hcChcbiAgICBzaXplOiBudW1iZXIsXG4gICAga2V5SGFuZGxlcjogPEtXPihpbmRleDogbnVtYmVyLCBtYXBLZXlXcml0ZXI6IFdyaXRlcjxLVz4pID0+IEtXLFxuICAgIHZhbHVlSGFuZGxlcjogPFZXPihpbmRleDogbnVtYmVyLCBtYXBWYWx1ZVdyaXRlcjogV3JpdGVyPFZXPikgPT4gVlcsXG4gICk6IGFueSB7XG4gICAgY29uc3QgcmVzdWx0OiBhbnkgPSB7fTtcbiAgICBmb3IgKGxldCBpbmRleDogbnVtYmVyID0gMDsgaW5kZXggPCBzaXplOyBpbmRleCsrKSB7XG4gICAgICAvLyBUT0RPOiBVc2UgYSBzcGVjaWFsaXplZCB3cml0ZXIgdGhhdCBvbmx5IGFjY2VwdHMgc3RyaW5ncyBhbmQgbnVtYmVycyAoS2V5TXVzdEJlQVN0cmluZ0Vycm9yKVxuICAgICAgLy8gTGV0IHVzZXJzIGJ1aWxkIGN1c3RvbSBzZXJpYWxpemVycyBpZiB0aGV5IHdhbnRcbiAgICAgIGNvbnN0IGpzb25Xcml0ZXI6IEpzb25Xcml0ZXIgPSBuZXcgSnNvbldyaXRlcigpO1xuICAgICAgY29uc3Qga2V5OiBhbnkgPSBrZXlIYW5kbGVyKGluZGV4LCBqc29uV3JpdGVyKTtcbiAgICAgIHJlc3VsdFtKU09OLnN0cmluZ2lmeShrZXkpXSA9IHZhbHVlSGFuZGxlcihpbmRleCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB3cml0ZVN0cmluZyh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
