/**
 * @module kryo/writers/qs
 */
import { QsValueWriter } from "./qs-value";
export class QsWriter {
    constructor(qs, primitiveWrapper = "_") {
        this.qs = qs;
        this.primitiveWrapper = primitiveWrapper;
        this.valueWriter = new QsValueWriter();
    }
    writeAny(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeAny(value) });
    }
    writeBoolean(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeBoolean(value) });
    }
    writeBytes(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeBytes(value) });
    }
    writeDate(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeDate(value) });
    }
    writeDocument(keys, handler) {
        return this.qs.stringify(this.valueWriter.writeDocument(keys, handler));
    }
    writeFloat64(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeFloat64(value) });
    }
    writeList(size, handler) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeList(size, handler) });
    }
    writeMap(size, keyHandler, valueHandler) {
        return this.qs.stringify(this.valueWriter.writeMap(size, keyHandler, valueHandler));
    }
    writeNull() {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeNull() });
    }
    writeString(value) {
        return this.qs.stringify({ [this.primitiveWrapper]: this.valueWriter.writeString(value) });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9xcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUlILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFM0MsTUFBTSxPQUFPLFFBQVE7SUFLbkIsWUFBWSxFQUFjLEVBQUUsbUJBQTJCLEdBQUc7UUFDeEQsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFjO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWlCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVc7UUFDbkIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxhQUFhLENBQ1gsSUFBaUIsRUFDakIsT0FBa0Q7UUFFbEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWE7UUFDeEIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWSxFQUFFLE9BQXdEO1FBQzlFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELFFBQVEsQ0FDTixJQUFZLEVBQ1osVUFBK0QsRUFDL0QsWUFBbUU7UUFFbkUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFDdkIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Q0FDRiIsImZpbGUiOiJsaWIvd3JpdGVycy9xcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBrcnlvL3dyaXRlcnMvcXNcbiAqL1xuXG5pbXBvcnQgX3FzIGZyb20gXCJxc1wiO1xuaW1wb3J0IHsgV3JpdGVyIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IFFzVmFsdWVXcml0ZXIgfSBmcm9tIFwiLi9xcy12YWx1ZVwiO1xuXG5leHBvcnQgY2xhc3MgUXNXcml0ZXIgaW1wbGVtZW50cyBXcml0ZXI8c3RyaW5nPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWVXcml0ZXI6IFFzVmFsdWVXcml0ZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgcXM6IHR5cGVvZiBfcXM7XG4gIHByaXZhdGUgcmVhZG9ubHkgcHJpbWl0aXZlV3JhcHBlcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHFzOiB0eXBlb2YgX3FzLCBwcmltaXRpdmVXcmFwcGVyOiBzdHJpbmcgPSBcIl9cIikge1xuICAgIHRoaXMucXMgPSBxcztcbiAgICB0aGlzLnByaW1pdGl2ZVdyYXBwZXIgPSBwcmltaXRpdmVXcmFwcGVyO1xuICAgIHRoaXMudmFsdWVXcml0ZXIgPSBuZXcgUXNWYWx1ZVdyaXRlcigpO1xuICB9XG5cbiAgd3JpdGVBbnkodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUFueSh2YWx1ZSl9KTtcbiAgfVxuXG4gIHdyaXRlQm9vbGVhbih2YWx1ZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUJvb2xlYW4odmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZUJ5dGVzKHZhbHVlOiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5xcy5zdHJpbmdpZnkoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlQnl0ZXModmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZURhdGUodmFsdWU6IERhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnFzLnN0cmluZ2lmeSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVEYXRlKHZhbHVlKX0pO1xuICB9XG5cbiAgd3JpdGVEb2N1bWVudDxLIGV4dGVuZHMgc3RyaW5nPihcbiAgICBrZXlzOiBJdGVyYWJsZTxLPixcbiAgICBoYW5kbGVyOiAoa2V5OiBLLCBmaWVsZFdyaXRlcjogV3JpdGVyPGFueT4pID0+IGFueSxcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5xcy5zdHJpbmdpZnkodGhpcy52YWx1ZVdyaXRlci53cml0ZURvY3VtZW50KGtleXMsIGhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlRmxvYXQ2NCh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5xcy5zdHJpbmdpZnkoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlRmxvYXQ2NCh2YWx1ZSl9KTtcbiAgfVxuXG4gIHdyaXRlTGlzdChzaXplOiBudW1iZXIsIGhhbmRsZXI6IChpbmRleDogbnVtYmVyLCBpdGVtV3JpdGVyOiBXcml0ZXI8YW55PikgPT4gYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5xcy5zdHJpbmdpZnkoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlTGlzdChzaXplLCBoYW5kbGVyKX0pO1xuICB9XG5cbiAgd3JpdGVNYXAoXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIGtleUhhbmRsZXI6IDxLVz4oaW5kZXg6IG51bWJlciwgbWFwS2V5V3JpdGVyOiBXcml0ZXI8S1c+KSA9PiBLVyxcbiAgICB2YWx1ZUhhbmRsZXI6IDxWVz4oaW5kZXg6IG51bWJlciwgbWFwVmFsdWVXcml0ZXI6IFdyaXRlcjxWVz4pID0+IFZXLFxuICApOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnFzLnN0cmluZ2lmeSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlTWFwKHNpemUsIGtleUhhbmRsZXIsIHZhbHVlSGFuZGxlcikpO1xuICB9XG5cbiAgd3JpdGVOdWxsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZU51bGwoKX0pO1xuICB9XG5cbiAgd3JpdGVTdHJpbmcodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucXMuc3RyaW5naWZ5KHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZVN0cmluZyh2YWx1ZSl9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
