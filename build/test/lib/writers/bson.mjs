/**
 * @module kryo/writers/bson
 */
import { BsonValueWriter } from "./bson-value";
export class BsonWriter {
    constructor(bson, primitiveWrapper = "_") {
        this.bsonSerializer = new bson.BSON();
        this.primitiveWrapper = primitiveWrapper;
        this.valueWriter = new BsonValueWriter(bson);
    }
    writeAny(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeAny(value) });
    }
    writeBoolean(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeBoolean(value) });
    }
    writeBytes(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeBytes(value) });
    }
    writeDate(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeDate(value) });
    }
    writeDocument(keys, handler) {
        return this.bsonSerializer.serialize(this.valueWriter.writeDocument(keys, handler));
    }
    writeFloat64(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeFloat64(value) });
    }
    writeList(size, handler) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeList(size, handler) });
    }
    writeMap(size, keyHandler, valueHandler) {
        return this.bsonSerializer.serialize(this.valueWriter.writeMap(size, keyHandler, valueHandler));
    }
    writeNull() {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeNull() });
    }
    writeString(value) {
        return this.bsonSerializer.serialize({ [this.primitiveWrapper]: this.valueWriter.writeString(value) });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9ic29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBSUgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUvQyxNQUFNLE9BQU8sVUFBVTtJQU1yQixZQUFZLElBQWtCLEVBQUUsbUJBQTJCLEdBQUc7UUFDNUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYztRQUN6QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDeEcsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFpQjtRQUMxQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFXO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRUQsYUFBYSxDQUNYLElBQWlCLEVBQ2pCLE9BQWtEO1FBRWxELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFhO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUF3RDtRQUM5RSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQzdHLENBQUM7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLFVBQStELEVBQy9ELFlBQW1FO1FBRW5FLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBQyxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUN2RyxDQUFDO0NBQ0YiLCJmaWxlIjoibGliL3dyaXRlcnMvYnNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBrcnlvL3dyaXRlcnMvYnNvblxuICovXG5cbmltcG9ydCBfYnNvbiBmcm9tIFwiYnNvblwiO1xuaW1wb3J0IHsgV3JpdGVyIH0gZnJvbSBcIi4uL2NvcmVcIjtcbmltcG9ydCB7IEJzb25WYWx1ZVdyaXRlciB9IGZyb20gXCIuL2Jzb24tdmFsdWVcIjtcblxuZXhwb3J0IGNsYXNzIEJzb25Xcml0ZXIgaW1wbGVtZW50cyBXcml0ZXI8QnVmZmVyPiB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBic29uU2VyaWFsaXplcjogX2Jzb24uQlNPTjtcbiAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZVdyaXRlcjogQnNvblZhbHVlV3JpdGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHByaW1pdGl2ZVdyYXBwZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihic29uOiB0eXBlb2YgX2Jzb24sIHByaW1pdGl2ZVdyYXBwZXI6IHN0cmluZyA9IFwiX1wiKSB7XG4gICAgdGhpcy5ic29uU2VyaWFsaXplciA9IG5ldyBic29uLkJTT04oKTtcbiAgICB0aGlzLnByaW1pdGl2ZVdyYXBwZXIgPSBwcmltaXRpdmVXcmFwcGVyO1xuICAgIHRoaXMudmFsdWVXcml0ZXIgPSBuZXcgQnNvblZhbHVlV3JpdGVyKGJzb24pO1xuICB9XG5cbiAgd3JpdGVBbnkodmFsdWU6IG51bWJlcik6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUFueSh2YWx1ZSl9KTtcbiAgfVxuXG4gIHdyaXRlQm9vbGVhbih2YWx1ZTogYm9vbGVhbik6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZUJvb2xlYW4odmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZUJ5dGVzKHZhbHVlOiBVaW50OEFycmF5KTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ic29uU2VyaWFsaXplci5zZXJpYWxpemUoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlQnl0ZXModmFsdWUpfSk7XG4gIH1cblxuICB3cml0ZURhdGUodmFsdWU6IERhdGUpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLmJzb25TZXJpYWxpemVyLnNlcmlhbGl6ZSh7W3RoaXMucHJpbWl0aXZlV3JhcHBlcl06IHRoaXMudmFsdWVXcml0ZXIud3JpdGVEYXRlKHZhbHVlKX0pO1xuICB9XG5cbiAgd3JpdGVEb2N1bWVudDxLIGV4dGVuZHMgc3RyaW5nPihcbiAgICBrZXlzOiBJdGVyYWJsZTxLPixcbiAgICBoYW5kbGVyOiAoa2V5OiBLLCBmaWVsZFdyaXRlcjogV3JpdGVyPGFueT4pID0+IGFueSxcbiAgKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ic29uU2VyaWFsaXplci5zZXJpYWxpemUodGhpcy52YWx1ZVdyaXRlci53cml0ZURvY3VtZW50KGtleXMsIGhhbmRsZXIpKTtcbiAgfVxuXG4gIHdyaXRlRmxvYXQ2NCh2YWx1ZTogbnVtYmVyKTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ic29uU2VyaWFsaXplci5zZXJpYWxpemUoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlRmxvYXQ2NCh2YWx1ZSl9KTtcbiAgfVxuXG4gIHdyaXRlTGlzdChzaXplOiBudW1iZXIsIGhhbmRsZXI6IChpbmRleDogbnVtYmVyLCBpdGVtV3JpdGVyOiBXcml0ZXI8YW55PikgPT4gYW55KTogQnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ic29uU2VyaWFsaXplci5zZXJpYWxpemUoe1t0aGlzLnByaW1pdGl2ZVdyYXBwZXJdOiB0aGlzLnZhbHVlV3JpdGVyLndyaXRlTGlzdChzaXplLCBoYW5kbGVyKX0pO1xuICB9XG5cbiAgd3JpdGVNYXAoXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIGtleUhhbmRsZXI6IDxLVz4oaW5kZXg6IG51bWJlciwgbWFwS2V5V3JpdGVyOiBXcml0ZXI8S1c+KSA9PiBLVyxcbiAgICB2YWx1ZUhhbmRsZXI6IDxWVz4oaW5kZXg6IG51bWJlciwgbWFwVmFsdWVXcml0ZXI6IFdyaXRlcjxWVz4pID0+IFZXLFxuICApOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmJzb25TZXJpYWxpemVyLnNlcmlhbGl6ZSh0aGlzLnZhbHVlV3JpdGVyLndyaXRlTWFwKHNpemUsIGtleUhhbmRsZXIsIHZhbHVlSGFuZGxlcikpO1xuICB9XG5cbiAgd3JpdGVOdWxsKCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZU51bGwoKX0pO1xuICB9XG5cbiAgd3JpdGVTdHJpbmcodmFsdWU6IHN0cmluZyk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnNvblNlcmlhbGl6ZXIuc2VyaWFsaXplKHtbdGhpcy5wcmltaXRpdmVXcmFwcGVyXTogdGhpcy52YWx1ZVdyaXRlci53cml0ZVN0cmluZyh2YWx1ZSl9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
