"use strict";
/**
 * @module kryo/writers/qs-value
 */
Object.defineProperty(exports, "__esModule", { value: true });
const json_1 = require("./json");
const structured_1 = require("./structured");
class QsValueWriter extends structured_1.StructuredWriter {
    writeBoolean(value) {
        return value ? "true" : "false";
    }
    writeBytes(value) {
        const result = new Array(value.length);
        const len = value.length;
        for (let i = 0; i < len; i++) {
            result[i] = (value[i] < 16 ? "0" : "") + value[i].toString(16);
        }
        return result.join("");
    }
    writeDate(value) {
        return value.toISOString();
    }
    writeFloat64(value) {
        if (isNaN(value)) {
            return "NaN";
        }
        else if (value === Infinity) {
            return "+Infinity";
        }
        else if (value === -Infinity) {
            return "-Infinity";
        }
        return value.toString(10);
    }
    writeNull() {
        return "";
    }
    writeMap(size, keyHandler, valueHandler) {
        const result = {};
        for (let index = 0; index < size; index++) {
            // TODO: Use a specialized writer that only accepts strings and numbers (KeyMustBeAStringError)
            // Let users build custom serializers if they want
            const jsonWriter = new json_1.JsonWriter();
            const key = keyHandler(index, jsonWriter);
            result[JSON.stringify(key)] = valueHandler(index, this);
        }
        return result;
    }
    writeString(value) {
        return value;
    }
}
exports.QsValueWriter = QsValueWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvd3JpdGVycy9xcy12YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBR0gsaUNBQW9DO0FBQ3BDLDZDQUFnRDtBQUVoRCxNQUFhLGFBQWMsU0FBUSw2QkFBZ0I7SUFDakQsWUFBWSxDQUFDLEtBQWM7UUFDekIsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBaUI7UUFDMUIsTUFBTSxNQUFNLEdBQWEsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELE1BQU0sR0FBRyxHQUFXLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDakMsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDaEU7UUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFXO1FBQ25CLE9BQU8sS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN4QixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoQixPQUFPLEtBQUssQ0FBQztTQUNkO2FBQU0sSUFBSSxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO2FBQU0sSUFBSSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxXQUFXLENBQUM7U0FDcEI7UUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxRQUFRLENBQ04sSUFBWSxFQUNaLFVBQStELEVBQy9ELFlBQW1FO1FBRW5FLE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztRQUN2QixLQUFLLElBQUksS0FBSyxHQUFXLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2pELCtGQUErRjtZQUMvRixrREFBa0Q7WUFDbEQsTUFBTSxVQUFVLEdBQWUsSUFBSSxpQkFBVSxFQUFFLENBQUM7WUFDaEQsTUFBTSxHQUFHLEdBQVEsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFDdkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFwREQsc0NBb0RDIiwiZmlsZSI6ImxpYi93cml0ZXJzL3FzLXZhbHVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIGtyeW8vd3JpdGVycy9xcy12YWx1ZVxuICovXG5cbmltcG9ydCB7IFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBKc29uV3JpdGVyIH0gZnJvbSBcIi4vanNvblwiO1xuaW1wb3J0IHsgU3RydWN0dXJlZFdyaXRlciB9IGZyb20gXCIuL3N0cnVjdHVyZWRcIjtcblxuZXhwb3J0IGNsYXNzIFFzVmFsdWVXcml0ZXIgZXh0ZW5kcyBTdHJ1Y3R1cmVkV3JpdGVyIHtcbiAgd3JpdGVCb29sZWFuKHZhbHVlOiBib29sZWFuKTogXCJ0cnVlXCIgfCBcImZhbHNlXCIge1xuICAgIHJldHVybiB2YWx1ZSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICB9XG5cbiAgd3JpdGVCeXRlcyh2YWx1ZTogVWludDhBcnJheSk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IG5ldyBBcnJheSh2YWx1ZS5sZW5ndGgpO1xuICAgIGNvbnN0IGxlbjogbnVtYmVyID0gdmFsdWUubGVuZ3RoO1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gKHZhbHVlW2ldIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWVbaV0udG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XG4gIH1cblxuICB3cml0ZURhdGUodmFsdWU6IERhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICB9XG5cbiAgd3JpdGVGbG9hdDY0KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBcIk5hTlwiO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm4gXCIrSW5maW5pdHlcIjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAtSW5maW5pdHkpIHtcbiAgICAgIHJldHVybiBcIi1JbmZpbml0eVwiO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoMTApO1xuICB9XG5cbiAgd3JpdGVOdWxsKCk6IFwiXCIge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgd3JpdGVNYXAoXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIGtleUhhbmRsZXI6IDxLVz4oaW5kZXg6IG51bWJlciwgbWFwS2V5V3JpdGVyOiBXcml0ZXI8S1c+KSA9PiBLVyxcbiAgICB2YWx1ZUhhbmRsZXI6IDxWVz4oaW5kZXg6IG51bWJlciwgbWFwVmFsdWVXcml0ZXI6IFdyaXRlcjxWVz4pID0+IFZXLFxuICApOiBhbnkge1xuICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG4gICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDA7IGluZGV4IDwgc2l6ZTsgaW5kZXgrKykge1xuICAgICAgLy8gVE9ETzogVXNlIGEgc3BlY2lhbGl6ZWQgd3JpdGVyIHRoYXQgb25seSBhY2NlcHRzIHN0cmluZ3MgYW5kIG51bWJlcnMgKEtleU11c3RCZUFTdHJpbmdFcnJvcilcbiAgICAgIC8vIExldCB1c2VycyBidWlsZCBjdXN0b20gc2VyaWFsaXplcnMgaWYgdGhleSB3YW50XG4gICAgICBjb25zdCBqc29uV3JpdGVyOiBKc29uV3JpdGVyID0gbmV3IEpzb25Xcml0ZXIoKTtcbiAgICAgIGNvbnN0IGtleTogYW55ID0ga2V5SGFuZGxlcihpbmRleCwganNvbldyaXRlcik7XG4gICAgICByZXN1bHRbSlNPTi5zdHJpbmdpZnkoa2V5KV0gPSB2YWx1ZUhhbmRsZXIoaW5kZXgsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgd3JpdGVTdHJpbmcodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
