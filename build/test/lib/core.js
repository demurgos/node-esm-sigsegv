"use strict";
/**
 * This module defines most of the Typescript interfaces and type aliases used by Kryo.
 *
 * @module kryo/core
 */
Object.defineProperty(exports, "__esModule", { value: true });

//# sourceMappingURL=data:application/json;charset=utf8;base64,
