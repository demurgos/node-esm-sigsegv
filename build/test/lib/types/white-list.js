"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const lazy_options_1 = require("../errors/lazy-options");
const test_error_1 = require("../test-error");
exports.name = "white-list";
class WhiteListType {
    constructor(options) {
        this.name = exports.name;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["itemType", "values"]);
        }
    }
    read(reader, raw) {
        if (this.itemType.read === undefined) {
            throw new incident_1.Incident("NotReadable", { type: this });
        }
        const result = this.itemType.read(reader, raw);
        for (const allowed of this.values) {
            if (this.itemType.equals(result, allowed)) {
                return result;
            }
        }
        throw incident_1.Incident("UnkownVariant", "Unknown variant");
    }
    write(writer, value) {
        if (this.itemType.write !== undefined) {
            return this.itemType.write(writer, value);
        }
        else {
            throw new incident_1.Incident("NotWritable", { type: this });
        }
    }
    testError(val) {
        const error = test_error_1.testError(this.itemType, val);
        if (error !== undefined) {
            return error;
        }
        for (const allowed of this.values) {
            if (this.itemType.equals(val, allowed)) {
                return undefined;
            }
        }
        return incident_1.Incident("UnkownVariant", "Unknown variant");
    }
    test(value) {
        if (!this.itemType.test(value)) {
            return false;
        }
        for (const allowed of this.values) {
            if (this.itemType.equals(value, allowed)) {
                return true;
            }
        }
        return false;
    }
    equals(val1, val2) {
        return this.itemType.equals(val1, val2);
    }
    clone(val) {
        return this.itemType.clone(val);
    }
    diff(oldVal, newVal) {
        return this.itemType.diff(oldVal, newVal);
    }
    patch(oldVal, diff) {
        return this.itemType.patch(oldVal, diff);
    }
    reverseDiff(diff) {
        return this.itemType.reverseDiff(diff);
    }
    squash(diff1, diff2) {
        return this.itemType.squash(diff1, diff2);
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const itemType = options.itemType;
        const values = options.values;
        Object.assign(this, { itemType, values });
    }
}
exports.WhiteListType = WhiteListType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
