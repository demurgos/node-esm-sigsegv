"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const case_style_1 = require("../case-style");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
const read_visitor_1 = require("../readers/read-visitor");
exports.name = "ts-enum";
/**
 * Builds a map from a TS enum by removing reverse-lookup keys.
 */
function tsEnumToMap(tsEnum) {
    const result = new Map();
    for (const key in tsEnum) {
        if (!isValidEnumMember(key)) {
            continue;
        }
        result.set(key, tsEnum[key]);
    }
    return result;
}
/**
 * Function used by TS to check the names of enums (isNumericLiteralName)
 *
 * @see https://github.com/Microsoft/TypeScript/blob/89de4c9a3ab3f7f88a141f1529b77628204bff73/lib/tsc.js#L36877
 */
function isValidEnumMember(key) {
    return (+key).toString() !== key || key === "Infinity" || key === "-Infinity" || key === "NaN";
}
/**
 * Converts a TS enum and rename options to two maps: from out names to values and from
 * values to out names.
 */
function getEnumMaps(tsEnum, changeCase, renameAll) {
    const jsToOut = new Map();
    const outToJs = new Map();
    // TODO: Check for bijection
    for (const [key, value] of tsEnumToMap(tsEnum)) {
        let name = key;
        if (renameAll !== undefined && renameAll[key] !== undefined) {
            name = renameAll[key];
        }
        else if (changeCase !== undefined) {
            name = case_style_1.rename(key, changeCase);
        }
        jsToOut.set(value, name);
        outToJs.set(name, value);
    }
    return [jsToOut, outToJs];
}
/**
 * Represents a TS-style enum value.
 *
 * A TS enum value is defined in an object ("enum object"). It contains "forward"properties from
 * non-numeric strings to strings or numbers and "reversed" properties from numeric strings to
 * keys of forward properties with constant numeric values.
 */
class TsEnumType {
    constructor(options) {
        this.name = exports.name;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["enum", "changeCase", "rename"]);
        }
    }
    get jsToOut() {
        if (this._jsToOut === undefined) {
            [this._jsToOut, this._outToJs] = getEnumMaps(this.enum, this.changeCase, this.rename);
        }
        return this._jsToOut;
    }
    get outToJs() {
        if (this._outToJs === undefined) {
            [this._jsToOut, this._outToJs] = getEnumMaps(this.enum, this.changeCase, this.rename);
        }
        return this._outToJs;
    }
    static fromJSON() {
        throw not_implemented_1.createNotImplementedError("TsEnumType.fromJSON");
    }
    read(reader, raw) {
        return reader.readString(raw, read_visitor_1.readVisitor({
            fromString: (input) => {
                if (!reader.trustInput && !this.outToJs.has(input)) {
                    throw incident_1.Incident("Unknown enum variant name", input);
                }
                return this.outToJs.get(input);
            },
        }));
    }
    write(writer, value) {
        return writer.writeString(this.jsToOut.get(value));
    }
    testError(value) {
        if (!this.jsToOut.has(value)) {
            return incident_1.Incident("UnknownVariantError", { value }, "Unknown enum variant value");
        }
        return undefined;
    }
    test(value) {
        return this.jsToOut.has(value);
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const tsEnum = options.enum;
        const changeCase = options.changeCase;
        const rename = options.rename;
        Object.assign(this, { enum: tsEnum, changeCase, rename });
    }
}
exports.TsEnumType = TsEnumType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdHlwZXMvdHMtZW51bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFvQztBQUNwQyxpRUFBNkQ7QUFDN0QsOENBQWtEO0FBRWxELHlEQUFnRTtBQUNoRSwrREFBc0U7QUFDdEUsMERBQXNEO0FBUXpDLFFBQUEsSUFBSSxHQUFTLFNBQVMsQ0FBQztBQUtwQzs7R0FFRztBQUNILFNBQVMsV0FBVyxDQUE4QyxNQUFvQjtJQUNwRixNQUFNLE1BQU0sR0FBYyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3BDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQixTQUFTO1NBQ1Y7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxpQkFBaUIsQ0FBQyxHQUFXO0lBQ3BDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssVUFBVSxJQUFJLEdBQUcsS0FBSyxXQUFXLElBQUksR0FBRyxLQUFLLEtBQUssQ0FBQztBQUNqRyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxXQUFXLENBQ2xCLE1BQW9CLEVBQ3BCLFVBQWlDLEVBQ2pDLFNBQStCO0lBRS9CLE1BQU0sT0FBTyxHQUFtQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sT0FBTyxHQUFtQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRTFDLDRCQUE0QjtJQUM1QixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzlDLElBQUksSUFBSSxHQUFXLEdBQUcsQ0FBQztRQUN2QixJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUMzRCxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBVyxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQ25DLElBQUksR0FBRyxtQkFBTSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNoQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBUUQ7Ozs7OztHQU1HO0FBQ0gsTUFBYSxVQUFVO0lBeUJyQixZQUFZLE9BQW1DO1FBeEJ0QyxTQUFJLEdBQVMsWUFBSSxDQUFDO1FBeUJ6QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7YUFBTTtZQUNMLGdDQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDNUU7SUFDSCxDQUFDO0lBMUJELElBQVksT0FBTztRQUNqQixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQy9CLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkY7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQVksT0FBTztRQUNqQixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQy9CLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkY7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQWdCRCxNQUFNLENBQUMsUUFBUTtRQUNiLE1BQU0sMkNBQXlCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxDQUFJLE1BQWlCLEVBQUUsR0FBTTtRQUMvQixPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLDBCQUFXLENBQUM7WUFDeEMsVUFBVSxFQUFFLENBQUMsS0FBYSxFQUFLLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2xELE1BQU0sbUJBQVEsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDcEQ7Z0JBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUUsQ0FBQztZQUNsQyxDQUFDO1NBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBRUQsS0FBSyxDQUFJLE1BQWlCLEVBQUUsS0FBUTtRQUNsQyxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVE7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVCLE9BQU8sbUJBQVEsQ0FBQyxxQkFBcUIsRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLDRCQUE0QixDQUFDLENBQUM7U0FDL0U7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBTyxFQUFFLElBQU87UUFDckIsT0FBTyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBTTtRQUNWLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVPLGFBQWE7UUFDbkIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMvQixNQUFNLHFDQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsTUFBTSxPQUFPLEdBQXlCLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUU1RyxNQUFNLE1BQU0sR0FBTyxPQUFPLENBQUMsSUFBVSxDQUFDO1FBQ3RDLE1BQU0sVUFBVSxHQUEwQixPQUFPLENBQUMsVUFBVSxDQUFDO1FBQzdELE1BQU0sTUFBTSxHQUEyQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBRXRFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0NBQ0Y7QUFwRkQsZ0NBb0ZDIiwiZmlsZSI6ImxpYi90eXBlcy90cy1lbnVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5jaWRlbnQgfSBmcm9tIFwiaW5jaWRlbnRcIjtcbmltcG9ydCB7IGxhenlQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uL19oZWxwZXJzL2xhenktcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgQ2FzZVN0eWxlLCByZW5hbWUgfSBmcm9tIFwiLi4vY2FzZS1zdHlsZVwiO1xuaW1wb3J0IHsgSW9UeXBlLCBMYXp5LCBSZWFkZXIsIFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBjcmVhdGVMYXp5T3B0aW9uc0Vycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy9sYXp5LW9wdGlvbnNcIjtcbmltcG9ydCB7IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL25vdC1pbXBsZW1lbnRlZFwiO1xuaW1wb3J0IHsgcmVhZFZpc2l0b3IgfSBmcm9tIFwiLi4vcmVhZGVycy9yZWFkLXZpc2l0b3JcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVudW0gdmFsdWUgZGVmaW5lZCBpbiBgRW51bUNvbnN0cnVjdG9yYFxuICovXG5leHBvcnQgdHlwZSBUc0VudW08RW51bUNvbnN0cnVjdG9yPiA9IHtbSyBpbiBrZXlvZiBFbnVtQ29uc3RydWN0b3JdOiBFbnVtQ29uc3RydWN0b3JbS119O1xuXG5leHBvcnQgdHlwZSBOYW1lID0gXCJ0cy1lbnVtXCI7XG5leHBvcnQgY29uc3QgbmFtZTogTmFtZSA9IFwidHMtZW51bVwiO1xuZXhwb3J0IHR5cGUgRGlmZiA9IG51bWJlcjtcblxuZXhwb3J0IHR5cGUgRW51bU9iamVjdDxFTywgRSBleHRlbmRzIG51bWJlciB8IHN0cmluZz4gPSBSZWNvcmQ8a2V5b2YgRU8sIEU+O1xuXG4vKipcbiAqIEJ1aWxkcyBhIG1hcCBmcm9tIGEgVFMgZW51bSBieSByZW1vdmluZyByZXZlcnNlLWxvb2t1cCBrZXlzLlxuICovXG5mdW5jdGlvbiB0c0VudW1Ub01hcDxLIGV4dGVuZHMgc3RyaW5nLCBFIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyPih0c0VudW06IFJlY29yZDxLLCBFPik6IE1hcDxLLCBFPiB7XG4gIGNvbnN0IHJlc3VsdDogTWFwPEssIEU+ID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGtleSBpbiB0c0VudW0pIHtcbiAgICBpZiAoIWlzVmFsaWRFbnVtTWVtYmVyKGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQuc2V0KGtleSwgdHNFbnVtW2tleV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gdXNlZCBieSBUUyB0byBjaGVjayB0aGUgbmFtZXMgb2YgZW51bXMgKGlzTnVtZXJpY0xpdGVyYWxOYW1lKVxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2Jsb2IvODlkZTRjOWEzYWIzZjdmODhhMTQxZjE1MjliNzc2MjgyMDRiZmY3My9saWIvdHNjLmpzI0wzNjg3N1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkRW51bU1lbWJlcihrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gKCtrZXkpLnRvU3RyaW5nKCkgIT09IGtleSB8fCBrZXkgPT09IFwiSW5maW5pdHlcIiB8fCBrZXkgPT09IFwiLUluZmluaXR5XCIgfHwga2V5ID09PSBcIk5hTlwiO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgVFMgZW51bSBhbmQgcmVuYW1lIG9wdGlvbnMgdG8gdHdvIG1hcHM6IGZyb20gb3V0IG5hbWVzIHRvIHZhbHVlcyBhbmQgZnJvbVxuICogdmFsdWVzIHRvIG91dCBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RW51bU1hcHM8SyBleHRlbmRzIHN0cmluZywgRSBleHRlbmRzIHN0cmluZyB8IG51bWJlcj4oXG4gIHRzRW51bTogUmVjb3JkPEssIEU+LFxuICBjaGFuZ2VDYXNlOiBDYXNlU3R5bGUgfCB1bmRlZmluZWQsXG4gIHJlbmFtZUFsbD86IHtbUCBpbiBLXT86IHN0cmluZ30sXG4pOiBbTWFwPEUsIHN0cmluZz4sIE1hcDxzdHJpbmcsIEU+XSB7XG4gIGNvbnN0IGpzVG9PdXQ6IE1hcDxFLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuICBjb25zdCBvdXRUb0pzOiBNYXA8c3RyaW5nLCBFPiA9IG5ldyBNYXAoKTtcblxuICAvLyBUT0RPOiBDaGVjayBmb3IgYmlqZWN0aW9uXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRzRW51bVRvTWFwKHRzRW51bSkpIHtcbiAgICBsZXQgbmFtZTogc3RyaW5nID0ga2V5O1xuICAgIGlmIChyZW5hbWVBbGwgIT09IHVuZGVmaW5lZCAmJiByZW5hbWVBbGxba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lID0gcmVuYW1lQWxsW2tleV0gYXMgc3RyaW5nO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlQ2FzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lID0gcmVuYW1lKGtleSwgY2hhbmdlQ2FzZSk7XG4gICAgfVxuICAgIGpzVG9PdXQuc2V0KHZhbHVlLCBuYW1lKTtcbiAgICBvdXRUb0pzLnNldChuYW1lLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIFtqc1RvT3V0LCBvdXRUb0pzXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUc0VudW1UeXBlT3B0aW9uczxFIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBFTyBleHRlbmRzIHt9ID0ge30+IHtcbiAgZW51bTogRW51bU9iamVjdDxFTywgRT47XG4gIGNoYW5nZUNhc2U/OiBDYXNlU3R5bGU7XG4gIHJlbmFtZT86IHtbUCBpbiBrZXlvZiBFT10/OiBzdHJpbmd9O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBUUy1zdHlsZSBlbnVtIHZhbHVlLlxuICpcbiAqIEEgVFMgZW51bSB2YWx1ZSBpcyBkZWZpbmVkIGluIGFuIG9iamVjdCAoXCJlbnVtIG9iamVjdFwiKS4gSXQgY29udGFpbnMgXCJmb3J3YXJkXCJwcm9wZXJ0aWVzIGZyb21cbiAqIG5vbi1udW1lcmljIHN0cmluZ3MgdG8gc3RyaW5ncyBvciBudW1iZXJzIGFuZCBcInJldmVyc2VkXCIgcHJvcGVydGllcyBmcm9tIG51bWVyaWMgc3RyaW5ncyB0b1xuICoga2V5cyBvZiBmb3J3YXJkIHByb3BlcnRpZXMgd2l0aCBjb25zdGFudCBudW1lcmljIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRzRW51bVR5cGU8RSBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgRU8gZXh0ZW5kcyB7fSA9IHt9PiBpbXBsZW1lbnRzIElvVHlwZTxFPiwgVHNFbnVtVHlwZU9wdGlvbnM8RSwgRU8+IHtcbiAgcmVhZG9ubHkgbmFtZTogTmFtZSA9IG5hbWU7XG4gIHJlYWRvbmx5IGVudW0hOiBSZWNvcmQ8a2V5b2YgRU8sIEU+O1xuICByZWFkb25seSBjaGFuZ2VDYXNlPzogQ2FzZVN0eWxlO1xuICByZWFkb25seSByZW5hbWU/OiB7W1AgaW4ga2V5b2YgRU9dPzogc3RyaW5nfTtcblxuICBwcml2YXRlIGdldCBqc1RvT3V0KCk6IE1hcDxFLCBzdHJpbmc+IHtcbiAgICBpZiAodGhpcy5fanNUb091dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBbdGhpcy5fanNUb091dCwgdGhpcy5fb3V0VG9Kc10gPSBnZXRFbnVtTWFwcyh0aGlzLmVudW0sIHRoaXMuY2hhbmdlQ2FzZSwgdGhpcy5yZW5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fanNUb091dDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IG91dFRvSnMoKTogTWFwPHN0cmluZywgRT4ge1xuICAgIGlmICh0aGlzLl9vdXRUb0pzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIFt0aGlzLl9qc1RvT3V0LCB0aGlzLl9vdXRUb0pzXSA9IGdldEVudW1NYXBzKHRoaXMuZW51bSwgdGhpcy5jaGFuZ2VDYXNlLCB0aGlzLnJlbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9vdXRUb0pzO1xuICB9XG5cbiAgcHJpdmF0ZSBfanNUb091dDogTWFwPEUsIHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX291dFRvSnM6IE1hcDxzdHJpbmcsIEU+IHwgdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgX29wdGlvbnM6IExhenk8VHNFbnVtVHlwZU9wdGlvbnM8RT4+O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IExhenk8VHNFbnVtVHlwZU9wdGlvbnM8RT4+KSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuX2FwcGx5T3B0aW9ucygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXp5UHJvcGVydGllcyh0aGlzLCB0aGlzLl9hcHBseU9wdGlvbnMsIFtcImVudW1cIiwgXCJjaGFuZ2VDYXNlXCIsIFwicmVuYW1lXCJdKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oKTogVHNFbnVtVHlwZTxhbnk+IHtcbiAgICB0aHJvdyBjcmVhdGVOb3RJbXBsZW1lbnRlZEVycm9yKFwiVHNFbnVtVHlwZS5mcm9tSlNPTlwiKTtcbiAgfVxuXG4gIHJlYWQ8Uj4ocmVhZGVyOiBSZWFkZXI8Uj4sIHJhdzogUik6IEUge1xuICAgIHJldHVybiByZWFkZXIucmVhZFN0cmluZyhyYXcsIHJlYWRWaXNpdG9yKHtcbiAgICAgIGZyb21TdHJpbmc6IChpbnB1dDogc3RyaW5nKTogRSA9PiB7XG4gICAgICAgIGlmICghcmVhZGVyLnRydXN0SW5wdXQgJiYgIXRoaXMub3V0VG9Kcy5oYXMoaW5wdXQpKSB7XG4gICAgICAgICAgdGhyb3cgSW5jaWRlbnQoXCJVbmtub3duIGVudW0gdmFyaWFudCBuYW1lXCIsIGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vdXRUb0pzLmdldChpbnB1dCkhO1xuICAgICAgfSxcbiAgICB9KSk7XG4gIH1cblxuICB3cml0ZTxXPih3cml0ZXI6IFdyaXRlcjxXPiwgdmFsdWU6IEUpOiBXIHtcbiAgICByZXR1cm4gd3JpdGVyLndyaXRlU3RyaW5nKHRoaXMuanNUb091dC5nZXQodmFsdWUpISk7XG4gIH1cblxuICB0ZXN0RXJyb3IodmFsdWU6IEUpOiBFcnJvciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0aGlzLmpzVG9PdXQuaGFzKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIEluY2lkZW50KFwiVW5rbm93blZhcmlhbnRFcnJvclwiLCB7dmFsdWV9LCBcIlVua25vd24gZW51bSB2YXJpYW50IHZhbHVlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGVzdCh2YWx1ZTogRSk6IHZhbHVlIGlzIEUge1xuICAgIHJldHVybiB0aGlzLmpzVG9PdXQuaGFzKHZhbHVlKTtcbiAgfVxuXG4gIGVxdWFscyh2YWwxOiBFLCB2YWwyOiBFKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbDEgPT09IHZhbDI7XG4gIH1cblxuICBjbG9uZSh2YWw6IEUpOiBFIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXBwbHlPcHRpb25zKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9vcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IGNyZWF0ZUxhenlPcHRpb25zRXJyb3IodGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnM6IFRzRW51bVR5cGVPcHRpb25zPEU+ID0gdHlwZW9mIHRoaXMuX29wdGlvbnMgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuX29wdGlvbnMoKSA6IHRoaXMuX29wdGlvbnM7XG5cbiAgICBjb25zdCB0c0VudW06IEVPID0gb3B0aW9ucy5lbnVtIGFzIEVPO1xuICAgIGNvbnN0IGNoYW5nZUNhc2U6IENhc2VTdHlsZSB8IHVuZGVmaW5lZCA9IG9wdGlvbnMuY2hhbmdlQ2FzZTtcbiAgICBjb25zdCByZW5hbWU6IHtbUCBpbiBrZXlvZiBFT10/OiBzdHJpbmd9IHwgdW5kZWZpbmVkID0gb3B0aW9ucy5yZW5hbWU7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtlbnVtOiB0c0VudW0sIGNoYW5nZUNhc2UsIHJlbmFtZX0pO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
