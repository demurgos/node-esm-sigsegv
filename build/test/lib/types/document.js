"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const case_style_1 = require("../case-style");
const invalid_document_1 = require("../errors/invalid-document");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
const read_visitor_1 = require("../readers/read-visitor");
exports.name = "document";
// We use an `any` cast because of the `properties` property.
// tslint:disable-next-line:variable-name
exports.DocumentType = class {
    constructor(options) {
        this.name = exports.name;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["noExtraKeys", "properties", "changeCase", "rename"]);
        }
    }
    /**
     * Map from serialized keys to the document keys
     */
    get outKeys() {
        if (this._outKeys === undefined) {
            this._outKeys = new Map();
            for (const key of Object.keys(this.properties)) {
                this._outKeys.set(this.getOutKey(key), key);
            }
        }
        return this._outKeys;
    }
    getOutKey(key) {
        if (typeof key !== "string") {
            throw new Error(`NonStringKey: ${key}`);
        }
        const descriptor = this.properties[key];
        if (descriptor.rename !== undefined) {
            return descriptor.rename;
        }
        else if (descriptor.changeCase !== undefined) {
            return case_style_1.rename(key, descriptor.changeCase);
        }
        if (this.rename !== undefined && this.rename[key] !== undefined) {
            return this.rename[key];
        }
        else if (this.changeCase !== undefined) {
            return case_style_1.rename(key, this.changeCase);
        }
        return key;
    }
    // TODO: Dynamically add with prototype?
    read(reader, raw) {
        return reader.readDocument(raw, read_visitor_1.readVisitor({
            fromMap: (input, keyReader, valueReader) => {
                const extra = new Set();
                const missing = new Set();
                for (const key in this.properties) {
                    const descriptor = this.properties[key];
                    if (!descriptor.optional) {
                        missing.add(key);
                    }
                }
                const invalid = new Map();
                const result = {}; // Object.create(null);
                for (const [rawKey, rawValue] of input) {
                    const outKey = keyReader.readString(rawKey, read_visitor_1.readVisitor({ fromString: (input) => input }));
                    const key = this.outKeys.get(outKey);
                    if (key === undefined) {
                        // Extra key
                        extra.add(outKey);
                        continue;
                    }
                    missing.delete(key);
                    const descriptor = this.properties[key];
                    // TODO: Update readers so `undefined` is impossible/not handled here
                    if (rawValue === undefined) {
                        if (descriptor.optional) {
                            result[key] = undefined;
                        }
                        else {
                            missing.add(key);
                        }
                        continue;
                    }
                    try {
                        result[key] = descriptor.type.read(valueReader, rawValue);
                    }
                    catch (err) {
                        invalid.set(key, err);
                    }
                }
                if (this.noExtraKeys && extra.size > 0 || missing.size > 0 || invalid.size > 0) {
                    throw invalid_document_1.createInvalidDocumentError({ extra, missing, invalid });
                }
                return result;
            },
        }));
    }
    // TODO: Dynamically add with prototype?
    write(writer, value) {
        const outKeys = new Map(this.outKeys);
        for (const [outKey, jskey] of outKeys) {
            if (value[jskey] === undefined) {
                outKeys.delete(outKey);
            }
        }
        return writer.writeDocument(outKeys.keys(), (outKey, fieldWriter) => {
            const jsKey = this.outKeys.get(outKey);
            const descriptor = this.properties[jsKey];
            if (descriptor.type.write === undefined) {
                throw new incident_1.Incident("NotWritable", { type: descriptor.type });
            }
            return descriptor.type.write(fieldWriter, value[jsKey]);
        });
    }
    testError(val) {
        if (typeof val !== "object" || val === null) {
            return invalid_type_1.createInvalidTypeError("object", val);
        }
        const extra = this.noExtraKeys ? new Set(Object.keys(val)) : undefined;
        const missing = new Set();
        const invalid = new Map();
        for (const key in this.properties) {
            if (extra !== undefined) {
                extra.delete(key);
            }
            const descriptor = this.properties[key];
            const propertyValue = val[key];
            if (propertyValue === undefined) {
                if (!descriptor.optional) {
                    missing.add(key);
                }
                continue;
            }
            const error = descriptor.type.testError(propertyValue);
            if (error !== undefined) {
                invalid.set(key, error);
            }
        }
        if (extra !== undefined && extra.size > 0 || missing.size > 0 || invalid.size > 0) {
            return invalid_document_1.createInvalidDocumentError({ extra, missing, invalid });
        }
        return undefined;
    }
    test(val) {
        if (typeof val !== "object" || val === null) {
            return false;
        }
        const extra = this.noExtraKeys ? new Set(Object.keys(val)) : undefined;
        for (const key in this.properties) {
            if (extra !== undefined) {
                extra.delete(key);
            }
            const descriptor = this.properties[key];
            const propertyValue = val[key];
            if (propertyValue === undefined) {
                if (!descriptor.optional) {
                    return false;
                }
            }
            else if (!descriptor.type.test(propertyValue)) {
                return false;
            }
        }
        return extra === undefined || extra.size === 0;
    }
    equals(val1, val2) {
        for (const key in this.properties) {
            const descriptor = this.properties[key];
            if (!descriptor.optional) {
                if (!descriptor.type.equals(val1[key], val2[key])) {
                    return false;
                }
                continue;
            }
            if (val1[key] === undefined && val2[key] === undefined) {
                continue;
            }
            if (val1[key] === undefined || val2[key] === undefined || !descriptor.type.equals(val1[key], val2[key])) {
                return false;
            }
        }
        return true;
    }
    clone(val) {
        const result = {}; // Object.create(null);
        for (const key in this.properties) {
            result[key] = val[key] === undefined ? undefined : this.properties[key].type.clone(val[key]);
        }
        return result;
    }
    diff(oldVal, newVal) {
        let equal = true;
        const result = { set: {}, unset: {}, update: {} };
        for (const key in this.properties) {
            // TODO: Remove cast
            const descriptor = this.properties[key];
            const oldMember = oldVal[key];
            const newMember = newVal[key];
            if (oldMember !== undefined) {
                if (newMember !== undefined) {
                    const diff = descriptor.type.diff(oldMember, newMember);
                    if (diff !== undefined) {
                        result.update[key] = diff;
                        equal = false;
                    }
                }
                else {
                    result.unset[key] = descriptor.type.clone(oldMember);
                    equal = false;
                }
            }
            else {
                if (newMember === undefined) {
                    result.set[key] = descriptor.type.clone(newMember);
                    equal = false;
                }
            }
        }
        return equal ? undefined : result;
    }
    patch(oldVal, diff) {
        const result = this.clone(oldVal);
        if (diff === undefined) {
            return result;
        }
        for (const key in diff.set) {
            result[key] = this.properties[key].type.clone(diff.set[key]);
        }
        for (const key in diff.unset) {
            Reflect.deleteProperty(result, key);
        }
        for (const key in diff.update) {
            // TODO: Remove cast
            result[key] = this.properties[key].type.patch(result[key], diff.update[key]);
        }
        return result;
    }
    reverseDiff(diff) {
        if (diff === undefined) {
            return undefined;
        }
        const result = { set: {}, unset: {}, update: {} };
        for (const key in diff.unset) {
            result.set[key] = this.properties[key].type.clone(diff.unset[key]);
        }
        for (const key in diff.set) {
            result.unset[key] = this.properties[key].type.clone(diff.set[key]);
        }
        for (const key in diff.update) {
            // TODO: Remove cast
            result.update[key] = this.properties[key].type.reverseDiff(diff.update[key]);
        }
        return result;
    }
    squash(_diff1, _diff2) {
        throw not_implemented_1.createNotImplementedError("DocumentType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ?
            this._options() :
            this._options;
        const noExtraKeys = options.noExtraKeys;
        const properties = options.properties;
        const rename = options.rename;
        const changeCase = options.changeCase;
        Object.assign(this, { noExtraKeys, properties, rename, changeCase });
    }
};
function renameKeys(obj, renameAll) {
    const keys = Object.keys(obj);
    const result = new Map();
    const outKeys = new Set();
    for (const key of keys) {
        const renamed = renameAll === undefined ? key : case_style_1.rename(key, renameAll);
        result.set(key, renamed);
        if (outKeys.has(renamed)) {
            throw new incident_1.Incident("NonBijectiveKeyRename", "Some keys are the same after renaming");
        }
        outKeys.add(renamed);
    }
    return result;
}
exports.renameKeys = renameKeys;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdHlwZXMvZG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBb0M7QUFDcEMsaUVBQTZEO0FBQzdELDhDQUFrRDtBQUVsRCxpRUFBd0U7QUFDeEUseURBQWdFO0FBQ2hFLHlEQUFnRTtBQUNoRSwrREFBc0U7QUFDdEUsMERBQXNEO0FBR3pDLFFBQUEsSUFBSSxHQUFTLFVBQVUsQ0FBQztBQWtGckMsNkRBQTZEO0FBQzdELHlDQUF5QztBQUM1QixRQUFBLFlBQVksR0FBa0M7SUFVekQsWUFBWSxPQUFxQztRQVJ4QyxTQUFJLEdBQVMsWUFBSSxDQUFDO1FBU3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjthQUFNO1lBQ0wsZ0NBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFFBQXNCLENBQUMsQ0FBQyxDQUFDO1NBQy9HO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxPQUFPO1FBQ1QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7WUFDMUIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQWdCLEVBQUU7Z0JBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDN0M7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVk7UUFDcEIsSUFBSSxPQUFP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QUMsQ0FBQyxtQkFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMvRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLG1CQUFRLENBQUMsdUJBQXVCLEVBQUUsdUNBQXVDLENBQUMsQ0FBQztTQUN0RjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEI7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBYkQsZ0NBYUMiLCJmaWxlIjoibGliL3R5cGVzL2RvY3VtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5jaWRlbnQgfSBmcm9tIFwiaW5jaWRlbnRcIjtcbmltcG9ydCB7IGxhenlQcm9wZXJ0aWVzIH0gZnJvbSBcIi4uL19oZWxwZXJzL2xhenktcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgQ2FzZVN0eWxlLCByZW5hbWUgfSBmcm9tIFwiLi4vY2FzZS1zdHlsZVwiO1xuaW1wb3J0IHsgSW9UeXBlLCBMYXp5LCBSZWFkZXIsIFR5cGUsIFZlcnNpb25lZFR5cGUsIFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkRG9jdW1lbnRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC1kb2N1bWVudFwiO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZFR5cGVFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10eXBlXCI7XG5pbXBvcnQgeyBjcmVhdGVMYXp5T3B0aW9uc0Vycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy9sYXp5LW9wdGlvbnNcIjtcbmltcG9ydCB7IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL25vdC1pbXBsZW1lbnRlZFwiO1xuaW1wb3J0IHsgcmVhZFZpc2l0b3IgfSBmcm9tIFwiLi4vcmVhZGVycy9yZWFkLXZpc2l0b3JcIjtcblxuZXhwb3J0IHR5cGUgTmFtZSA9IFwiZG9jdW1lbnRcIjtcbmV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJkb2N1bWVudFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpZmY8VD4ge1xuICBzZXQ6IHtbUCBpbiBrZXlvZiBUXT86IGFueX07IC8vIHZhbFxuICB1cGRhdGU6IHtbUCBpbiBrZXlvZiBUXT86IGFueX07IC8vIGRpZmZcbiAgdW5zZXQ6IHtbUCBpbiBrZXlvZiBUXT86IGFueX07IC8vIHZhbFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50VHlwZU9wdGlvbnM8VD4ge1xuICAvKipcbiAgICogVHJlYXQgdmFsdWVzIHdpdGggZXh0cmEga2V5cyBhcyBpbnZhbGlkLlxuICAgKi9cbiAgbm9FeHRyYUtleXM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGRpY3Rpb25hcnkgYmV0d2VlbiBhIHByb3BlcnR5IG5hbWUgYW5kIGl0cyBkZXNjcmlwdGlvbi5cbiAgICovXG4gIHByb3BlcnRpZXM6IHtyZWFkb25seSBbUCBpbiBrZXlvZiBUXTogUHJvcGVydHlEZXNjcmlwdG9yPFRbUF0sIFR5cGU8VFtQXT4+fTtcblxuICAvKipcbiAgICogVGhlIGtleXMgb2YgdGhlIHNlcmlhbGl6ZWQgZG9jdW1lbnRzIGFyZSByZW5hbWVkIGZvbGxvd2luZyB0aGVcbiAgICogc3VwcGxpZWQgc3R5bGUgKHVuZGVmaW5lZCB0byBrZWVwIHRoZSBvcmlnaW5hbCBuYW1lKS5cbiAgICovXG4gIGNoYW5nZUNhc2U/OiBDYXNlU3R5bGU7XG5cbiAgcmVuYW1lPzoge3JlYWRvbmx5IFtQIGluIGtleW9mIFRdPzogc3RyaW5nfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudElvVHlwZU9wdGlvbnM8VD4gZXh0ZW5kcyBEb2N1bWVudFR5cGVPcHRpb25zPFQ+IHtcbiAgcHJvcGVydGllczoge3JlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBQcm9wZXJ0eURlc2NyaXB0b3I8VFtQXSwgSW9UeXBlPFRbUF0+Pn07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlEZXNjcmlwdG9yPFQsIEsgZXh0ZW5kcyBUeXBlPFQ+ID0gVHlwZTxUPj4ge1xuICAvKipcbiAgICogQWxsb3dzIHRoaXMgcHJvcGVydHkgdG8gYmUgbWlzc2luZyAodW5kZWZpbmVkIHZhbHVlcyB0aHJvdyBlcnJvcnMpLlxuICAgKi9cbiAgb3B0aW9uYWw/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgdHlwZTogSztcblxuICAvKipcbiAgICogVGhlIGtleSBpbiB0aGUgc2VyaWFsaXplZCBkb2N1bWVudHMgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHJlbmFtZWQgd2l0aCB0aGUgcHJvdmlkZWRcbiAgICogY2FzZSBzdHlsZS5cbiAgICovXG4gIGNoYW5nZUNhc2U/OiBDYXNlU3R5bGU7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBrZXkgdXNlZCBpbiB0aGUgc2VyaWFsaXplZCBkb2N1bWVudHMuXG4gICAqL1xuICByZW5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRUeXBlQ29uc3RydWN0b3Ige1xuICBuZXc8VD4ob3B0aW9uczogTGF6eTxEb2N1bWVudElvVHlwZU9wdGlvbnM8VD4+KTogRG9jdW1lbnRJb1R5cGU8VD47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBkb2N1bWVudCB0eXBlIGNoZWNraW5nIGZvciBvYmplY3RzIHdpdGggdGhlIHN1cHBsaWVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIFRoZSBnZW5lcmljIHR5cGUgYFRgIGlzIHRoZSBpbnRlcmZhY2UgZGVzY3JpYmVkIGJ5IHRoaXMgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZGVzY3JpYmluZyB0aGlzIGRvY3VtZW50IHR5cGUuXG4gICAqIEByZXR1cm4gVGhlIGRvY3VtZW50IHR5cGUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgb3B0aW9uc1xuICAgKi9cbiAgbmV3PFQ+KG9wdGlvbnM6IExhenk8RG9jdW1lbnRUeXBlT3B0aW9uczxUPj4pOiBEb2N1bWVudFR5cGU8VD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRUeXBlPFQ+IGV4dGVuZHMgVHlwZTxUPiwgVmVyc2lvbmVkVHlwZTxULCBEaWZmPFQ+PiwgRG9jdW1lbnRUeXBlT3B0aW9uczxUPiB7XG4gIGdldE91dEtleShrZXk6IGtleW9mIFQpOiBzdHJpbmc7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRJb1R5cGU8VD4gZXh0ZW5kcyBJb1R5cGU8VD4sIFZlcnNpb25lZFR5cGU8VCwgRGlmZjxUPj4sIERvY3VtZW50SW9UeXBlT3B0aW9uczxUPiB7XG4gIGdldE91dEtleShrZXk6IGtleW9mIFQpOiBzdHJpbmc7XG5cbiAgcmVhZDxSPihyZWFkZXI6IFJlYWRlcjxSPiwgcmF3OiBSKTogVDtcblxuICB3cml0ZTxXPih3cml0ZXI6IFdyaXRlcjxXPiwgdmFsdWU6IFQpOiBXO1xufVxuXG4vLyBXZSB1c2UgYW4gYGFueWAgY2FzdCBiZWNhdXNlIG9mIHRoZSBgcHJvcGVydGllc2AgcHJvcGVydHkuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuZXhwb3J0IGNvbnN0IERvY3VtZW50VHlwZTogRG9jdW1lbnRUeXBlQ29uc3RydWN0b3IgPSA8YW55PiBjbGFzczxUPiBpbXBsZW1lbnRzIElvVHlwZTxUPixcbiAgRG9jdW1lbnRJb1R5cGVPcHRpb25zPFQ+IHtcbiAgcmVhZG9ubHkgbmFtZTogTmFtZSA9IG5hbWU7XG4gIHJlYWRvbmx5IG5vRXh0cmFLZXlzPzogYm9vbGVhbjtcbiAgcmVhZG9ubHkgcHJvcGVydGllcyE6IHtyZWFkb25seSBbUCBpbiBrZXlvZiBUXTogUHJvcGVydHlEZXNjcmlwdG9yPFRbUF0sIGFueT59O1xuICByZWFkb25seSByZW5hbWU/OiB7cmVhZG9ubHkgW1AgaW4ga2V5b2YgVF0/OiBzdHJpbmd9O1xuICByZWFkb25seSBjaGFuZ2VDYXNlPzogQ2FzZVN0eWxlO1xuICBwcml2YXRlIF9vcHRpb25zOiBMYXp5PERvY3VtZW50VHlwZU9wdGlvbnM8VD4+O1xuICBwcml2YXRlIF9vdXRLZXlzOiBNYXA8c3RyaW5nLCBrZXlvZiBUPiB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBMYXp5PERvY3VtZW50VHlwZU9wdGlvbnM8VD4+KSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMuX2FwcGx5T3B0aW9ucygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXp5UHJvcGVydGllcyh0aGlzLCB0aGlzLl9hcHBseU9wdGlvbnMsIFtcIm5vRXh0cmFLZXlzXCIsIFwicHJvcGVydGllc1wiLCBcImNoYW5nZUNhc2VcIiwgXCJyZW5hbWVcIiBhcyBrZXlvZiB0aGlzXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hcCBmcm9tIHNlcmlhbGl6ZWQga2V5cyB0byB0aGUgZG9jdW1lbnQga2V5c1xuICAgKi9cbiAgZ2V0IG91dEtleXMoKTogTWFwPHN0cmluZywga2V5b2YgVD4ge1xuICAgIGlmICh0aGlzLl9vdXRLZXlzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX291dEtleXMgPSBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpIGFzIChrZXlvZiBUKVtdKSB7XG4gICAgICAgIHRoaXMuX291dEtleXMuc2V0KHRoaXMuZ2V0T3V0S2V5KGtleSksIGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9vdXRLZXlzO1xuICB9XG5cbiAgZ2V0T3V0S2V5KGtleToga2V5b2YgVCk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uU3RyaW5nS2V5OiAke2tleX1gKTtcbiAgICB9XG4gICAgY29uc3QgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yPGFueT4gPSB0aGlzLnByb3BlcnRpZXNba2V5XTtcbiAgICBpZiAoZGVzY3JpcHRvci5yZW5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGRlc2NyaXB0b3IucmVuYW1lO1xuICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci5jaGFuZ2VDYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZW5hbWUoa2V5IGFzIHN0cmluZywgZGVzY3JpcHRvci5jaGFuZ2VDYXNlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmVuYW1lICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yZW5hbWVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5hbWVba2V5XSE7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNoYW5nZUNhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlbmFtZShrZXkgYXMgc3RyaW5nLCB0aGlzLmNoYW5nZUNhc2UpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG5cbiAgLy8gVE9ETzogRHluYW1pY2FsbHkgYWRkIHdpdGggcHJvdG90eXBlP1xuICByZWFkPFI+KHJlYWRlcjogUmVhZGVyPFI+LCByYXc6IFIpOiBUIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWREb2N1bWVudChyYXcsIHJlYWRWaXNpdG9yKHtcbiAgICAgIGZyb21NYXA6IDxSSywgUlY+KGlucHV0OiBNYXA8UkssIFJWPiwga2V5UmVhZGVyOiBSZWFkZXI8Uks+LCB2YWx1ZVJlYWRlcjogUmVhZGVyPFJWPik6IFQgPT4ge1xuICAgICAgICBjb25zdCBleHRyYTogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgICAgIGNvbnN0IG1pc3Npbmc6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiA9IHRoaXMucHJvcGVydGllc1trZXldO1xuICAgICAgICAgIGlmICghZGVzY3JpcHRvci5vcHRpb25hbCkge1xuICAgICAgICAgICAgbWlzc2luZy5hZGQoa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW52YWxpZDogTWFwPHN0cmluZywgRXJyb3I+ID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCByZXN1bHQ6IFBhcnRpYWw8VD4gPSB7fTsgLy8gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtyYXdLZXksIHJhd1ZhbHVlXSBvZiBpbnB1dCkge1xuICAgICAgICAgIGNvbnN0IG91dEtleTogc3RyaW5nID0ga2V5UmVhZGVyLnJlYWRTdHJpbmcoXG4gICAgICAgICAgICByYXdLZXksXG4gICAgICAgICAgICByZWFkVmlzaXRvcih7ZnJvbVN0cmluZzogKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcgID0+IGlucHV0fSksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBrZXk6IGtleW9mIFQgfCB1bmRlZmluZWQgPSB0aGlzLm91dEtleXMuZ2V0KG91dEtleSk7XG4gICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBFeHRyYSBrZXlcbiAgICAgICAgICAgIGV4dHJhLmFkZChvdXRLZXkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1pc3NpbmcuZGVsZXRlKGtleSBhcyBzdHJpbmcpO1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+ID0gdGhpcy5wcm9wZXJ0aWVzW2tleV07XG4gICAgICAgICAgLy8gVE9ETzogVXBkYXRlIHJlYWRlcnMgc28gYHVuZGVmaW5lZGAgaXMgaW1wb3NzaWJsZS9ub3QgaGFuZGxlZCBoZXJlXG4gICAgICAgICAgaWYgKHJhd1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWlzc2luZy5hZGQoa2V5IGFzIHN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gZGVzY3JpcHRvci50eXBlLnJlYWQhKHZhbHVlUmVhZGVyLCByYXdWYWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpbnZhbGlkLnNldChrZXkgYXMgc3RyaW5nLCBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm5vRXh0cmFLZXlzICYmIGV4dHJhLnNpemUgPiAwIHx8IG1pc3Npbmcuc2l6ZSA+IDAgfHwgaW52YWxpZC5zaXplID4gMCkge1xuICAgICAgICAgIHRocm93IGNyZWF0ZUludmFsaWREb2N1bWVudEVycm9yKHtleHRyYSwgbWlzc2luZywgaW52YWxpZH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgYXMgVDtcbiAgICAgIH0sXG4gICAgfSkpO1xuICB9XG5cbiAgLy8gVE9ETzogRHluYW1pY2FsbHkgYWRkIHdpdGggcHJvdG90eXBlP1xuICB3cml0ZTxXPih3cml0ZXI6IFdyaXRlcjxXPiwgdmFsdWU6IFQpOiBXIHtcbiAgICBjb25zdCBvdXRLZXlzOiBNYXA8c3RyaW5nLCBrZXlvZiBUPiA9IG5ldyBNYXAodGhpcy5vdXRLZXlzKTtcblxuICAgIGZvciAoY29uc3QgW291dEtleSwganNrZXldIG9mIG91dEtleXMpIHtcbiAgICAgIGlmICh2YWx1ZVtqc2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXRLZXlzLmRlbGV0ZShvdXRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cml0ZXIud3JpdGVEb2N1bWVudChvdXRLZXlzLmtleXMoKSwgPEZXPihvdXRLZXk6IHN0cmluZywgZmllbGRXcml0ZXI6IFdyaXRlcjxGVz4pOiBGVyA9PiB7XG4gICAgICBjb25zdCBqc0tleToga2V5b2YgVCA9IHRoaXMub3V0S2V5cy5nZXQob3V0S2V5KSE7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiA9IHRoaXMucHJvcGVydGllc1tqc0tleV07XG4gICAgICBpZiAoZGVzY3JpcHRvci50eXBlLndyaXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEluY2lkZW50KFwiTm90V3JpdGFibGVcIiwge3R5cGU6IGRlc2NyaXB0b3IudHlwZX0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlc2NyaXB0b3IudHlwZS53cml0ZShmaWVsZFdyaXRlciwgdmFsdWVbanNLZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRlc3RFcnJvcih2YWw6IFQpOiBFcnJvciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHR5cGVvZiB2YWwgIT09IFwib2JqZWN0XCIgfHwgdmFsID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSW52YWxpZFR5cGVFcnJvcihcIm9iamVjdFwiLCB2YWwpO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dHJhOiBTZXQ8c3RyaW5nPiB8IHVuZGVmaW5lZCA9IHRoaXMubm9FeHRyYUtleXMgPyBuZXcgU2V0KE9iamVjdC5rZXlzKHZhbCkpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1pc3Npbmc6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGludmFsaWQ6IE1hcDxzdHJpbmcsIEVycm9yPiA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucHJvcGVydGllcykge1xuICAgICAgaWYgKGV4dHJhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXh0cmEuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiA9IHRoaXMucHJvcGVydGllc1trZXldO1xuICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZTogYW55ID0gdmFsW2tleV07XG4gICAgICBpZiAocHJvcGVydHlWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci5vcHRpb25hbCkge1xuICAgICAgICAgIG1pc3NpbmcuYWRkKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQgPSBkZXNjcmlwdG9yLnR5cGUudGVzdEVycm9yIShwcm9wZXJ0eVZhbHVlKTtcbiAgICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGludmFsaWQuc2V0KGtleSBhcyBzdHJpbmcsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0cmEgIT09IHVuZGVmaW5lZCAmJiBleHRyYS5zaXplID4gMCB8fCBtaXNzaW5nLnNpemUgPiAwIHx8IGludmFsaWQuc2l6ZSA+IDApIHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkRG9jdW1lbnRFcnJvcih7ZXh0cmEsIG1pc3NpbmcsIGludmFsaWR9KTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHRlc3QodmFsOiBUKTogdmFsIGlzIFQge1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSBcIm9iamVjdFwiIHx8IHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dHJhOiBTZXQ8c3RyaW5nPiB8IHVuZGVmaW5lZCA9IHRoaXMubm9FeHRyYUtleXMgPyBuZXcgU2V0KE9iamVjdC5rZXlzKHZhbCkpIDogdW5kZWZpbmVkO1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAoZXh0cmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBleHRyYS5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+ID0gdGhpcy5wcm9wZXJ0aWVzW2tleV07XG4gICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlOiBhbnkgPSB2YWxba2V5XTtcbiAgICAgIGlmIChwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFkZXNjcmlwdG9yLm9wdGlvbmFsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFkZXNjcmlwdG9yLnR5cGUudGVzdChwcm9wZXJ0eVZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dHJhID09PSB1bmRlZmluZWQgfHwgZXh0cmEuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIGVxdWFscyh2YWwxOiBULCB2YWwyOiBUKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiA9IHRoaXMucHJvcGVydGllc1trZXldO1xuICAgICAgaWYgKCFkZXNjcmlwdG9yLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci50eXBlLmVxdWFscyh2YWwxW2tleV0sIHZhbDJba2V5XSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsMVtrZXldID09PSB1bmRlZmluZWQgJiYgdmFsMltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsMVtrZXldID09PSB1bmRlZmluZWQgfHwgdmFsMltrZXldID09PSB1bmRlZmluZWQgfHwgIWRlc2NyaXB0b3IudHlwZS5lcXVhbHModmFsMVtrZXldLCB2YWwyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjbG9uZSh2YWw6IFQpOiBUIHtcbiAgICBjb25zdCByZXN1bHQ6IFBhcnRpYWw8VD4gPSB7fTsgLy8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsW2tleV0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRoaXMucHJvcGVydGllc1trZXldLnR5cGUuY2xvbmUodmFsW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBkaWZmKG9sZFZhbDogVCwgbmV3VmFsOiBUKTogRGlmZjxUPiB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGVxdWFsOiBib29sZWFuID0gdHJ1ZTtcbiAgICBjb25zdCByZXN1bHQ6IERpZmY8VD4gPSB7c2V0OiB7fSwgdW5zZXQ6IHt9LCB1cGRhdGU6IHt9fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgIC8vIFRPRE86IFJlbW92ZSBjYXN0XG4gICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55LCBWZXJzaW9uZWRUeXBlPGFueSwgYW55Pj4gPSA8YW55PiB0aGlzLnByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IG9sZE1lbWJlcjogYW55ID0gKDxhbnk+IG9sZFZhbClba2V5XTtcbiAgICAgIGNvbnN0IG5ld01lbWJlcjogYW55ID0gKDxhbnk+IG5ld1ZhbClba2V5XTtcbiAgICAgIGlmIChvbGRNZW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAobmV3TWVtYmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBkaWZmOiBhbnkgPSBkZXNjcmlwdG9yLnR5cGUuZGlmZihvbGRNZW1iZXIsIG5ld01lbWJlcik7XG4gICAgICAgICAgaWYgKGRpZmYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LnVwZGF0ZVtrZXldID0gZGlmZjtcbiAgICAgICAgICAgIGVxdWFsID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC51bnNldFtrZXldID0gZGVzY3JpcHRvci50eXBlLmNsb25lKG9sZE1lbWJlcik7XG4gICAgICAgICAgZXF1YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5ld01lbWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0LnNldFtrZXldID0gZGVzY3JpcHRvci50eXBlLmNsb25lKG5ld01lbWJlcik7XG4gICAgICAgICAgZXF1YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXF1YWwgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cblxuICBwYXRjaChvbGRWYWw6IFQsIGRpZmY6IERpZmY8VD4gfCB1bmRlZmluZWQpOiBUIHtcbiAgICBjb25zdCByZXN1bHQ6IFQgPSB0aGlzLmNsb25lKG9sZFZhbCk7XG4gICAgaWYgKGRpZmYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlmZi5zZXQpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5wcm9wZXJ0aWVzW2tleV0udHlwZS5jbG9uZShkaWZmLnNldFtrZXldKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlmZi51bnNldCkge1xuICAgICAgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShyZXN1bHQgYXMgYW55IGFzIG9iamVjdCwga2V5KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlmZi51cGRhdGUpIHtcbiAgICAgIC8vIFRPRE86IFJlbW92ZSBjYXN0XG4gICAgICByZXN1bHRba2V5XSA9ICh0aGlzLnByb3BlcnRpZXNba2V5XS50eXBlIGFzIGFueSkucGF0Y2gocmVzdWx0W2tleV0sIGRpZmYudXBkYXRlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV2ZXJzZURpZmYoZGlmZjogRGlmZjxUPiB8IHVuZGVmaW5lZCk6IERpZmY8VD4gfCB1bmRlZmluZWQge1xuICAgIGlmIChkaWZmID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdDogRGlmZjxUPiA9IHtzZXQ6IHt9LCB1bnNldDoge30sIHVwZGF0ZToge319O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRpZmYudW5zZXQpIHtcbiAgICAgIHJlc3VsdC5zZXRba2V5XSA9IHRoaXMucHJvcGVydGllc1trZXldLnR5cGUuY2xvbmUoZGlmZi51bnNldFtrZXldKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlmZi5zZXQpIHtcbiAgICAgIHJlc3VsdC51bnNldFtrZXldID0gdGhpcy5wcm9wZXJ0aWVzW2tleV0udHlwZS5jbG9uZShkaWZmLnNldFtrZXldKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlmZi51cGRhdGUpIHtcbiAgICAgIC8vIFRPRE86IFJlbW92ZSBjYXN0XG4gICAgICByZXN1bHQudXBkYXRlW2tleV0gPSAodGhpcy5wcm9wZXJ0aWVzW2tleV0udHlwZSBhcyBhbnkpLnJldmVyc2VEaWZmKGRpZmYudXBkYXRlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc3F1YXNoKF9kaWZmMTogRGlmZjxUPiB8IHVuZGVmaW5lZCwgX2RpZmYyOiBEaWZmPFQ+IHwgdW5kZWZpbmVkKTogRGlmZjxUPiB8IHVuZGVmaW5lZCB7XG4gICAgdGhyb3cgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvcihcIkRvY3VtZW50VHlwZSNzcXVhc2hcIik7XG4gIH1cblxuICBwcml2YXRlIF9hcHBseU9wdGlvbnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY3JlYXRlTGF6eU9wdGlvbnNFcnJvcih0aGlzKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9uczogRG9jdW1lbnRUeXBlT3B0aW9uczxUPiA9IHR5cGVvZiB0aGlzLl9vcHRpb25zID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgdGhpcy5fb3B0aW9ucygpIDpcbiAgICAgIHRoaXMuX29wdGlvbnM7XG5cbiAgICBjb25zdCBub0V4dHJhS2V5czogYm9vbGVhbiB8IHVuZGVmaW5lZCA9IG9wdGlvbnMubm9FeHRyYUtleXM7XG4gICAgY29uc3QgcHJvcGVydGllczoge1tQIGluIGtleW9mIFRdOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55Pn0gPSBvcHRpb25zLnByb3BlcnRpZXM7XG4gICAgY29uc3QgcmVuYW1lOiB7W1AgaW4ga2V5b2YgVF0/OiBzdHJpbmd9IHwgdW5kZWZpbmVkID0gb3B0aW9ucy5yZW5hbWU7XG4gICAgY29uc3QgY2hhbmdlQ2FzZTogQ2FzZVN0eWxlIHwgdW5kZWZpbmVkID0gb3B0aW9ucy5jaGFuZ2VDYXNlO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7bm9FeHRyYUtleXMsIHByb3BlcnRpZXMsIHJlbmFtZSwgY2hhbmdlQ2FzZX0pO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuYW1lS2V5czxUPihvYmo6IFQsIHJlbmFtZUFsbD86IENhc2VTdHlsZSk6IE1hcDxrZXlvZiBULCBzdHJpbmc+IHtcbiAgY29uc3Qga2V5czogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhvYmopO1xuICBjb25zdCByZXN1bHQ6IE1hcDxrZXlvZiBULCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuICBjb25zdCBvdXRLZXlzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IHJlbmFtZWQ6IHN0cmluZyA9IHJlbmFtZUFsbCA9PT0gdW5kZWZpbmVkID8ga2V5IDogcmVuYW1lKGtleSwgcmVuYW1lQWxsKTtcbiAgICByZXN1bHQuc2V0KGtleSBhcyBrZXlvZiBULCByZW5hbWVkKTtcbiAgICBpZiAob3V0S2V5cy5oYXMocmVuYW1lZCkpIHtcbiAgICAgIHRocm93IG5ldyBJbmNpZGVudChcIk5vbkJpamVjdGl2ZUtleVJlbmFtZVwiLCBcIlNvbWUga2V5cyBhcmUgdGhlIHNhbWUgYWZ0ZXIgcmVuYW1pbmdcIik7XG4gICAgfVxuICAgIG91dEtleXMuYWRkKHJlbmFtZWQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
