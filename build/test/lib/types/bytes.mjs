import { lazyProperties } from "../_helpers/lazy-properties";
import { createInvalidTypeError } from "../errors/invalid-type";
import { createLazyOptionsError } from "../errors/lazy-options";
import { createMaxArrayLengthError } from "../errors/max-array-length";
import { createNotImplementedError } from "../errors/not-implemented";
import { readVisitor } from "../readers/read-visitor";
export class BytesType {
    constructor(options) {
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazyProperties(this, this._applyOptions, ["maxLength"]);
        }
    }
    // TODO: Dynamically add with prototype?
    read(reader, raw) {
        return reader.readBytes(raw, readVisitor({
            fromBytes(input) {
                return input;
            },
        }));
    }
    // TODO: Dynamically add with prototype?
    write(writer, value) {
        return writer.writeBytes(value);
    }
    testError(val) {
        if (!(val instanceof Uint8Array)) {
            return createInvalidTypeError("Uint8Array", val);
        }
        if (this.maxLength !== undefined && val.length > this.maxLength) {
            return createMaxArrayLengthError(val, this.maxLength);
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(left, right) {
        if (left.length !== right.length) {
            return false;
        }
        for (let i = 0; i < left.length; i++) {
            if (left[i] !== right[i]) {
                return false;
            }
        }
        return true;
    }
    lte(left, right) {
        const minLength = Math.min(left.length, right.length);
        for (let i = 0; i < minLength; i++) {
            if (left[i] > right[i]) {
                return false;
            }
        }
        return left.length <= right.length;
    }
    clone(val) {
        return Uint8Array.from(val);
    }
    /**
     * @param _oldVal
     * @param _newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(_oldVal, _newVal) {
        throw createNotImplementedError("BufferType#diff");
    }
    patch(_oldVal, _diff) {
        throw createNotImplementedError("BufferType#patch");
    }
    reverseDiff(_diff) {
        throw createNotImplementedError("BufferType#reverseDiff");
    }
    squash(_diff1, _diff2) {
        throw createNotImplementedError("BufferType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const maxLength = options.maxLength;
        Object.assign(this, { maxLength });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdHlwZXMvYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQVF0RCxNQUFNLE9BQU8sU0FBUztJQUtwQixZQUFZLE9BQStCO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjthQUFNO1lBQ0wsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRCx3Q0FBd0M7SUFDeEMsSUFBSSxDQUFJLE1BQWlCLEVBQUUsR0FBTTtRQUMvQixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztZQUN2QyxTQUFTLENBQUMsS0FBaUI7Z0JBQ3pCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztTQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELHdDQUF3QztJQUN4QyxLQUFLLENBQUksTUFBaUIsRUFBRSxLQUFpQjtRQUMzQyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFlO1FBQ3ZCLElBQUksQ0FBQyxD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eyBsYXp5UHJvcGVydGllcyB9IGZyb20gXCIuLi9faGVscGVycy9sYXp5LXByb3BlcnRpZXNcIjtcbmltcG9ydCB7IElvVHlwZSwgTGF6eSwgT3JkLCBSZWFkZXIsIFZlcnNpb25lZFR5cGUsIFdyaXRlciB9IGZyb20gXCIuLi9jb3JlXCI7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkVHlwZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy9pbnZhbGlkLXR5cGVcIjtcbmltcG9ydCB7IGNyZWF0ZUxhenlPcHRpb25zRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2xhenktb3B0aW9uc1wiO1xuaW1wb3J0IHsgY3JlYXRlTWF4QXJyYXlMZW5ndGhFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbWF4LWFycmF5LWxlbmd0aFwiO1xuaW1wb3J0IHsgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbm90LWltcGxlbWVudGVkXCI7XG5pbXBvcnQgeyByZWFkVmlzaXRvciB9IGZyb20gXCIuLi9yZWFkZXJzL3JlYWQtdmlzaXRvclwiO1xuXG5leHBvcnQgdHlwZSBEaWZmID0gYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ5dGVzVHlwZU9wdGlvbnMge1xuICBtYXhMZW5ndGg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEJ5dGVzVHlwZSBpbXBsZW1lbnRzIElvVHlwZTxVaW50OEFycmF5PiwgVmVyc2lvbmVkVHlwZTxVaW50OEFycmF5LCBEaWZmPiwgT3JkPFVpbnQ4QXJyYXk+IHtcbiAgcmVhZG9ubHkgbWF4TGVuZ3RoITogbnVtYmVyO1xuXG4gIHByaXZhdGUgX29wdGlvbnM6IExhenk8Qnl0ZXNUeXBlT3B0aW9ucz47XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogTGF6eTxCeXRlc1R5cGVPcHRpb25zPikge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLl9hcHBseU9wdGlvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF6eVByb3BlcnRpZXModGhpcywgdGhpcy5fYXBwbHlPcHRpb25zLCBbXCJtYXhMZW5ndGhcIl0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IER5bmFtaWNhbGx5IGFkZCB3aXRoIHByb3RvdHlwZT9cbiAgcmVhZDxSPihyZWFkZXI6IFJlYWRlcjxSPiwgcmF3OiBSKTogVWludDhBcnJheSB7XG4gICAgcmV0dXJuIHJlYWRlci5yZWFkQnl0ZXMocmF3LCByZWFkVmlzaXRvcih7XG4gICAgICBmcm9tQnl0ZXMoaW5wdXQ6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgfSxcbiAgICB9KSk7XG4gIH1cblxuICAvLyBUT0RPOiBEeW5hbWljYWxseSBhZGQgd2l0aCBwcm90b3R5cGU/XG4gIHdyaXRlPFc+KHdyaXRlcjogV3JpdGVyPFc+LCB2YWx1ZTogVWludDhBcnJheSk6IFcge1xuICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyh2YWx1ZSk7XG4gIH1cblxuICB0ZXN0RXJyb3IodmFsOiBVaW50OEFycmF5KTogRXJyb3IgfCB1bmRlZmluZWQge1xuICAgIGlmICghKHZhbCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSW52YWxpZFR5cGVFcnJvcihcIlVpbnQ4QXJyYXlcIiwgdmFsKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubWF4TGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgdmFsLmxlbmd0aCA+IHRoaXMubWF4TGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlTWF4QXJyYXlMZW5ndGhFcnJvcih2YWwsIHRoaXMubWF4TGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHRlc3QodmFsOiBVaW50OEFycmF5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGVzdEVycm9yKHZhbCkgPT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGVxdWFscyhsZWZ0OiBVaW50OEFycmF5LCByaWdodDogVWludDhBcnJheSk6IGJvb2xlYW4ge1xuICAgIGlmIChsZWZ0Lmxlbmd0aCAhPT0gcmlnaHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBsZWZ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGVmdFtpXSAhPT0gcmlnaHRbaV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGx0ZShsZWZ0OiBVaW50OEFycmF5LCByaWdodDogVWludDhBcnJheSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG1pbkxlbmd0aDogbnVtYmVyID0gTWF0aC5taW4obGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IG1pbkxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGVmdFtpXSA+IHJpZ2h0W2ldKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlZnQubGVuZ3RoIDw9IHJpZ2h0Lmxlbmd0aDtcbiAgfVxuXG4gIGNsb25lKHZhbDogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkge1xuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20odmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gX29sZFZhbFxuICAgKiBAcGFyYW0gX25ld1ZhbFxuICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbmNlLCBgdW5kZWZpbmVkYCBvdGhlcndpc2VcbiAgICovXG4gIGRpZmYoX29sZFZhbDogVWludDhBcnJheSwgX25ld1ZhbDogVWludDhBcnJheSk6IERpZmYgfCB1bmRlZmluZWQge1xuICAgIHRocm93IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IoXCJCdWZmZXJUeXBlI2RpZmZcIik7XG4gIH1cblxuICBwYXRjaChfb2xkVmFsOiBVaW50OEFycmF5LCBfZGlmZjogRGlmZiB8IHVuZGVmaW5lZCk6IFVpbnQ4QXJyYXkge1xuICAgIHRocm93IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IoXCJCdWZmZXJUeXBlI3BhdGNoXCIpO1xuICB9XG5cbiAgcmV2ZXJzZURpZmYoX2RpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICB0aHJvdyBjcmVhdGVOb3RJbXBsZW1lbnRlZEVycm9yKFwiQnVmZmVyVHlwZSNyZXZlcnNlRGlmZlwiKTtcbiAgfVxuXG4gIHNxdWFzaChfZGlmZjE6IERpZmYgfCB1bmRlZmluZWQsIF9kaWZmMjogRGlmZiB8IHVuZGVmaW5lZCk6IERpZmYgfCB1bmRlZmluZWQge1xuICAgIHRocm93IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IoXCJCdWZmZXJUeXBlI3NxdWFzaFwiKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FwcGx5T3B0aW9ucygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fb3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBjcmVhdGVMYXp5T3B0aW9uc0Vycm9yKHRoaXMpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zOiBCeXRlc1R5cGVPcHRpb25zID0gdHlwZW9mIHRoaXMuX29wdGlvbnMgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuX29wdGlvbnMoKSA6IHRoaXMuX29wdGlvbnM7XG5cbiAgICBjb25zdCBtYXhMZW5ndGg6IG51bWJlciA9IG9wdGlvbnMubWF4TGVuZ3RoO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7bWF4TGVuZ3RofSk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
