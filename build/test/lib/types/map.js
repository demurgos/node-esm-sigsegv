"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
const read_visitor_1 = require("../readers/read-visitor");
const test_error_1 = require("../test-error");
exports.name = "map";
class MapType {
    constructor(options) {
        this.name = exports.name;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["keyType", "valueType", "maxSize", "assumeStringKey"]);
        }
    }
    // TODO: Dynamically add with prototype?
    read(reader, raw) {
        if (this.assumeStringKey) {
            return reader.readDocument(raw, read_visitor_1.readVisitor({
                fromMap: (input, keyReader, valueReader) => {
                    const result = new Map();
                    for (const [rawKey, rawValue] of input) {
                        const uncheckedKey = keyReader.readString(rawKey, read_visitor_1.readVisitor({ fromString: (input) => input }));
                        const keyErr = this.keyType.testError(uncheckedKey);
                        if (keyErr !== undefined) {
                            throw keyErr;
                        }
                        const key = uncheckedKey;
                        let value;
                        try {
                            value = this.valueType.read(valueReader, rawValue);
                        }
                        catch (err) {
                            throw err;
                        }
                        result.set(key, value);
                    }
                    const error = this.testError(result);
                    if (error !== undefined) {
                        throw error;
                    }
                    return result;
                },
            }));
        }
        return reader.readMap(raw, read_visitor_1.readVisitor({
            fromMap: (input, keyReader, valueReader) => {
                const result = new Map();
                for (const [rawKey, rawValue] of input) {
                    const key = this.keyType.read(keyReader, rawKey);
                    const value = this.valueType.read(valueReader, rawValue);
                    result.set(key, value);
                }
                const error = this.testError(result);
                if (error !== undefined) {
                    throw error;
                }
                return result;
            },
        }));
    }
    // TODO: Dynamically add with prototype?
    write(writer, value) {
        if (this.assumeStringKey) {
            return writer.writeDocument(value.keys(), (outKey, fieldWriter) => {
                return this.valueType.write(fieldWriter, value.get(outKey));
            });
        }
        const entries = [...value];
        return writer.writeMap(entries.length, (index, keyWriter) => {
            if (this.keyType.write === undefined) {
                throw new incident_1.Incident("NotWritable", { type: this.keyType });
            }
            return this.keyType.write(keyWriter, entries[index][0]);
        }, (index, valueWriter) => {
            if (this.valueType.write === undefined) {
                throw new incident_1.Incident("NotWritable", { type: this.valueType });
            }
            return this.valueType.write(valueWriter, entries[index][1]);
        });
    }
    testError(val) {
        if (!(val instanceof Map)) {
            return invalid_type_1.createInvalidTypeError("Map", val);
        }
        for (const [key, value] of val) {
            const keyError = test_error_1.testError(this.keyType, key);
            if (keyError !== undefined) {
                return new incident_1.Incident("InvalidMapKey", { key, value }, "Invalid map entry: invalid key");
            }
            const valueError = test_error_1.testError(this.valueType, value);
            if (valueError !== undefined) {
                return new incident_1.Incident("InvalidMapValue", { key, value }, "Invalid map entry: invalid value");
            }
        }
        return undefined;
    }
    test(val) {
        if (!(val instanceof Map)) {
            return false;
        }
        for (const [key, value] of val) {
            if (!this.keyType.test(key) || !this.valueType.test(value)) {
                return false;
            }
        }
        return true;
    }
    equals(val1, val2) {
        if (val2.size !== val1.size) {
            return false;
        }
        const unmatched = new Map(val1);
        for (const [key2, value2] of val2) {
            for (const [key1, value1] of unmatched) {
                if (this.keyType.equals(key1, key2)) {
                    if (!this.valueType.equals(value1, value2)) {
                        return false;
                    }
                    unmatched.delete(key1);
                    break;
                }
            }
        }
        return true;
    }
    clone(val) {
        const result = new Map();
        for (const [key, value] of val) {
            const keyClone = this.keyType.clone(key);
            const valueClone = this.valueType.clone(value);
            result.set(keyClone, valueClone);
        }
        return result;
    }
    diff(_oldVal, _newVal) {
        throw not_implemented_1.createNotImplementedError("MapType#diff");
    }
    patch(_oldVal, _diff) {
        throw not_implemented_1.createNotImplementedError("MapType#patch");
    }
    reverseDiff(_diff) {
        throw not_implemented_1.createNotImplementedError("MapType#reverseDiff");
    }
    squash(_diff1, _diff2) {
        throw not_implemented_1.createNotImplementedError("MapType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const keyType = options.keyType;
        const valueType = options.valueType;
        const maxSize = options.maxSize;
        const assumeStringKey = options.assumeStringKey || false;
        Object.assign(this, { keyType, valueType, maxSize, assumeStringKey });
    }
}
exports.MapType = MapType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
