/**
 * This module defines most of the Typescript interfaces and type aliases used by Kryo.
 *
 * @module kryo/core
 */

//# sourceMappingURL=data:application/json;charset=utf8;base64,
