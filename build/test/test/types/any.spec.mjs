import chai from "chai";
import { JsonReader } from "../../lib/readers/json";
import { JsonValueReader } from "../../lib/readers/json-value";
import { AnyType } from "../../lib/types/any";
import { DocumentType } from "../../lib/types/document";
describe("AnyType", function () {
    describe("with JsonReader", function () {
        it("should read the expected top-level values", function () {
            const reader = new JsonReader();
            const $Any = new AnyType();
            chai.assert.deepEqual($Any.read(reader, "0"), "0");
            chai.assert.deepEqual($Any.read(reader, "{\"foo\": \"bar\""), "{\"foo\": \"bar\"");
        });
        it("should read the expected nested values", function () {
            const reader = new JsonReader();
            const $Any = new AnyType();
            const $FooBarQuz = new DocumentType({
                properties: { foo: { type: $Any } },
            });
            chai.assert.deepEqual($FooBarQuz.read(reader, "{\"foo\": {\"bar\": \"quz\"}}"), { foo: { bar: "quz" } });
        });
    });
    describe("with JsonValueReader", function () {
        it("should read the expected values", function () {
            const reader = new JsonValueReader();
            const $Any = new AnyType();
            chai.assert.deepEqual($Any.read(reader, 0), 0);
            chai.assert.deepEqual($Any.read(reader, { foo: "bar" }), { foo: "bar" });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL2FueS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQWtCLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXhFLFFBQVEsQ0FBQyxTQUFTLEVBQUU7SUFDbEIsUUFBUSxDQUFDLGlCQUFpQixFQUFFO1FBQzFCLEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtZQUM5QyxNQUFNLE1BQU0sR0FBZSxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQzVDLE1BQU0sSUFBSSxHQUFZLElBQUksT0FBTyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3JGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLHdDQUF3QyxFQUFFO1lBQzNDLE1BQU0sTUFBTSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7WUFDNUMsTUFBTSxJQUFJLEdBQVksSUFBSSxPQUFPLEVBQUUsQ0FBQztZQU1wQyxNQUFNLFVBQVUsR0FBOEIsSUFBSSxZQUFZLENBQUM7Z0JBQzdELFVBQVUsRUFBRSxFQUFDLEdBQUcsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBQzthQUNoQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSwrQkFBK0IsQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxFQUFDLENBQUMsQ0FBQztRQUN2RyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHNCQUFzQixFQUFFO1FBQy9CLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNwQyxNQUFNLE1BQU0sR0FBb0IsSUFBSSxlQUFlLEVBQUUsQ0FBQztZQUN0RCxNQUFNLElBQUksR0FBWSxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC90eXBlcy9hbnkuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBKc29uUmVhZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9yZWFkZXJzL2pzb25cIjtcbmltcG9ydCB7IEpzb25WYWx1ZVJlYWRlciB9IGZyb20gXCIuLi8uLi9saWIvcmVhZGVycy9qc29uLXZhbHVlXCI7XG5pbXBvcnQgeyBBbnlUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi90eXBlcy9hbnlcIjtcbmltcG9ydCB7IERvY3VtZW50SW9UeXBlLCBEb2N1bWVudFR5cGUgfSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzL2RvY3VtZW50XCI7XG5cbmRlc2NyaWJlKFwiQW55VHlwZVwiLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKFwid2l0aCBKc29uUmVhZGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBpdChcInNob3VsZCByZWFkIHRoZSBleHBlY3RlZCB0b3AtbGV2ZWwgdmFsdWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlYWRlcjogSnNvblJlYWRlciA9IG5ldyBKc29uUmVhZGVyKCk7XG4gICAgICBjb25zdCAkQW55OiBBbnlUeXBlID0gbmV3IEFueVR5cGUoKTtcbiAgICAgIGNoYWkuYXNzZXJ0LmRlZXBFcXVhbCgkQW55LnJlYWQocmVhZGVyLCBcIjBcIiksIFwiMFwiKTtcbiAgICAgIGNoYWkuYXNzZXJ0LmRlZXBFcXVhbCgkQW55LnJlYWQocmVhZGVyLCBcIntcXFwiZm9vXFxcIjogXFxcImJhclxcXCJcIiksIFwie1xcXCJmb29cXFwiOiBcXFwiYmFyXFxcIlwiKTtcbiAgICB9KTtcbiAgICBpdChcInNob3VsZCByZWFkIHRoZSBleHBlY3RlZCBuZXN0ZWQgdmFsdWVzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHJlYWRlcjogSnNvblJlYWRlciA9IG5ldyBKc29uUmVhZGVyKCk7XG4gICAgICBjb25zdCAkQW55OiBBbnlUeXBlID0gbmV3IEFueVR5cGUoKTtcblxuICAgICAgaW50ZXJmYWNlIEZvb0JhclF1eiB7XG4gICAgICAgIGZvbzogYW55O1xuICAgICAgfVxuXG4gICAgICBjb25zdCAkRm9vQmFyUXV6OiBEb2N1bWVudElvVHlwZTxGb29CYXJRdXo+ID0gbmV3IERvY3VtZW50VHlwZSh7XG4gICAgICAgIHByb3BlcnRpZXM6IHtmb286IHt0eXBlOiAkQW55fX0sXG4gICAgICB9KTtcblxuICAgICAgY2hhaS5hc3NlcnQuZGVlcEVxdWFsKCRGb29CYXJRdXoucmVhZChyZWFkZXIsIFwie1xcXCJmb29cXFwiOiB7XFxcImJhclxcXCI6IFxcXCJxdXpcXFwifX1cIiksIHtmb286IHtiYXI6IFwicXV6XCJ9fSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwid2l0aCBKc29uVmFsdWVSZWFkZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgIGl0KFwic2hvdWxkIHJlYWQgdGhlIGV4cGVjdGVkIHZhbHVlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCByZWFkZXI6IEpzb25WYWx1ZVJlYWRlciA9IG5ldyBKc29uVmFsdWVSZWFkZXIoKTtcbiAgICAgIGNvbnN0ICRBbnk6IEFueVR5cGUgPSBuZXcgQW55VHlwZSgpO1xuICAgICAgY2hhaS5hc3NlcnQuZGVlcEVxdWFsKCRBbnkucmVhZChyZWFkZXIsIDApLCAwKTtcbiAgICAgIGNoYWkuYXNzZXJ0LmRlZXBFcXVhbCgkQW55LnJlYWQocmVhZGVyLCB7Zm9vOiBcImJhclwifSksIHtmb286IFwiYmFyXCJ9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
