"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const literal_1 = require("../../lib/types/literal");
const ts_enum_1 = require("../../lib/types/ts-enum");
const ucs2_string_1 = require("../../lib/types/ucs2-string");
const test_1 = require("../helpers/test");
describe("Literal", function () {
    describe("Literal<\"foo\">", function () {
        const type = new literal_1.LiteralType(() => ({
            type: new ucs2_string_1.Ucs2StringType({ maxLength: Infinity }),
            value: "foo",
        }));
        const items = [
            {
                name: "\"foo\"",
                value: "foo",
                valid: true,
                output: {
                    bson: Buffer.from("10000000025f0004000000666f6f0000", "hex"),
                    json: "\"foo\"",
                    qs: "_=foo",
                },
            },
            { name: "\"bar\"", value: "bar", valid: false },
            { name: "0", value: 0, valid: false },
            { name: "1", value: 1, valid: false },
            { name: "\"\"", value: "", valid: false },
            { name: "\"0\"", value: "0", valid: false },
            { name: "\"true\"", value: "true", valid: false },
            { name: "\"false\"", value: "false", valid: false },
            { name: "true", value: true, valid: false },
            { name: "false", value: false, valid: false },
            { name: "Infinity", value: Infinity, valid: false },
            { name: "-Infinity", value: -Infinity, valid: false },
            { name: "new Date(\"1247-05-18T19:40:08.418Z\")", value: new Date("1247-05-18T19:40:08.418Z"), valid: false },
            { name: "NaN", value: NaN, valid: false },
            { name: "undefined", value: undefined, valid: false },
            { name: "null", value: null, valid: false },
            { name: "[]", value: [], valid: false },
            { name: "{}", value: {}, valid: false },
            { name: "/regex/", value: /regex/, valid: false },
        ];
        test_1.runTests(type, items);
    });
    describe("Literal<Color.Red>", function () {
        let Color;
        (function (Color) {
            Color[Color["Red"] = 0] = "Red";
            Color[Color["Green"] = 1] = "Green";
            Color[Color["Blue"] = 2] = "Blue";
        })(Color || (Color = {}));
        const $ColorRed = new literal_1.LiteralType({
            type: new ts_enum_1.TsEnumType({ enum: Color }),
            value: Color.Red,
        });
        const items = [
            {
                name: "Color.Red",
                value: Color.Red,
                valid: true,
                output: {
                    bson: Buffer.from("10000000025f00040000005265640000", "hex"),
                    json: "\"Red\"",
                    qs: "_=Red",
                },
            },
            {
                name: "0",
                value: 0,
                valid: true,
                output: {
                    bson: Buffer.from("10000000025f00040000005265640000", "hex"),
                    json: "\"Red\"",
                    qs: "_=Red",
                },
            },
            { name: "Color.Green", value: Color.Green, valid: false },
            { name: "undefined", value: undefined, valid: false },
        ];
        test_1.runTests($ColorRed, items);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL2xpdGVyYWwuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFEQUFxRTtBQUNyRSxxREFBcUQ7QUFDckQsNkRBQTZEO0FBQzdELDBDQUF1RDtBQUV2RCxRQUFRLENBQUMsU0FBUyxFQUFFO0lBQ2xCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTtRQUMzQixNQUFNLElBQUksR0FBdUIsSUFBSSxxQkFBVyxDQUFRLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDN0QsSUFBSSxFQUFFLElBQUksNEJBQWMsQ0FBQyxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUMsQ0FBQztZQUMvQyxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUMsQ0FBQyxDQUFDO1FBRUosTUFBTSxLQUFLLEdBQWlCO1lBQzFCO2dCQUNFLElBQUksRUFBRSxTQUFTO2dCQUNmLEtBQUssRUFBRSxLQUFLO2dCQUNaLEtBQUssRUFBRSxJQUFJO2dCQUNYLE1BQU0sRUFBRTtvQkFDTixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUM7b0JBQzVELElBQUksRUFBRSxTQUFTO29CQUNmLEVBQUUsRUFBRSxPQUFPO2lCQUNaO2FBQ0Y7WUFFRCxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1lBQzdDLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7WUFDbkMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztZQUNuQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1lBQ3ZDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FB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QUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztZQUN2RCxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1NBQ3BELENBQUM7UUFFRixlQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC90eXBlcy9saXRlcmFsLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaXRlcmFsSW9UeXBlLCBMaXRlcmFsVHlwZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXMvbGl0ZXJhbFwiO1xuaW1wb3J0IHsgVHNFbnVtVHlwZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXMvdHMtZW51bVwiO1xuaW1wb3J0IHsgVWNzMlN0cmluZ1R5cGUgfSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzL3VjczItc3RyaW5nXCI7XG5pbXBvcnQgeyBydW5UZXN0cywgVHlwZWRWYWx1ZSB9IGZyb20gXCIuLi9oZWxwZXJzL3Rlc3RcIjtcblxuZGVzY3JpYmUoXCJMaXRlcmFsXCIsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoXCJMaXRlcmFsPFxcXCJmb29cXFwiPlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdHlwZTogTGl0ZXJhbFR5cGU8XCJmb29cIj4gPSBuZXcgTGl0ZXJhbFR5cGU8XCJmb29cIj4oKCkgPT4gKHtcbiAgICAgIHR5cGU6IG5ldyBVY3MyU3RyaW5nVHlwZSh7bWF4TGVuZ3RoOiBJbmZpbml0eX0pLFxuICAgICAgdmFsdWU6IFwiZm9vXCIsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgaXRlbXM6IFR5cGVkVmFsdWVbXSA9IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJcXFwiZm9vXFxcIlwiLFxuICAgICAgICB2YWx1ZTogXCJmb29cIixcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIG91dHB1dDoge1xuICAgICAgICAgIGJzb246IEJ1ZmZlci5mcm9tKFwiMTAwMDAwMDAwMjVmMDAwNDAwMDAwMDY2NmY2ZjAwMDBcIiwgXCJoZXhcIiksXG4gICAgICAgICAganNvbjogXCJcXFwiZm9vXFxcIlwiLFxuICAgICAgICAgIHFzOiBcIl89Zm9vXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB7bmFtZTogXCJcXFwiYmFyXFxcIlwiLCB2YWx1ZTogXCJiYXJcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcIjBcIiwgdmFsdWU6IDAsIHZhbGlkOiBmYWxzZX0sXG4gICAgICB7bmFtZTogXCIxXCIsIHZhbHVlOiAxLCB2YWxpZDogZmFsc2V9LFxuICAgICAge25hbWU6IFwiXFxcIlxcXCJcIiwgdmFsdWU6IFwiXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAgICB7bmFtZTogXCJcXFwiMFxcXCJcIiwgdmFsdWU6IFwiMFwiLCB2YWxpZDogZmFsc2V9LFxuICAgICAge25hbWU6IFwiXFxcInRydWVcXFwiXCIsIHZhbHVlOiBcInRydWVcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcIlxcXCJmYWxzZVxcXCJcIiwgdmFsdWU6IFwiZmFsc2VcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcInRydWVcIiwgdmFsdWU6IHRydWUsIHZhbGlkOiBmYWxzZX0sXG4gICAgICB7bmFtZTogXCJmYWxzZVwiLCB2YWx1ZTogZmFsc2UsIHZhbGlkOiBmYWxzZX0sXG4gICAgICB7bmFtZTogXCJJbmZpbml0eVwiLCB2YWx1ZTogSW5maW5pdHksIHZhbGlkOiBmYWxzZX0sXG4gICAgICB7bmFtZTogXCItSW5maW5pdHlcIiwgdmFsdWU6IC1JbmZpbml0eSwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcIm5ldyBEYXRlKFxcXCIxMjQ3LTA1LTE4VDE5OjQwOjA4LjQxOFpcXFwiKVwiLCB2YWx1ZTogbmV3IERhdGUoXCIxMjQ3LTA1LTE4VDE5OjQwOjA4LjQxOFpcIiksIHZhbGlkOiBmYWxzZX0sXG4gICAgICB7bmFtZTogXCJOYU5cIiwgdmFsdWU6IE5hTiwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcInVuZGVmaW5lZFwiLCB2YWx1ZTogdW5kZWZpbmVkLCB2YWxpZDogZmFsc2V9LFxuICAgICAge25hbWU6IFwibnVsbFwiLCB2YWx1ZTogbnVsbCwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcIltdXCIsIHZhbHVlOiBbXSwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcInt9XCIsIHZhbHVlOiB7fSwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcIi9yZWdleC9cIiwgdmFsdWU6IC9yZWdleC8sIHZhbGlkOiBmYWxzZX0sXG4gICAgXTtcblxuICAgIHJ1blRlc3RzKHR5cGUsIGl0ZW1zKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJMaXRlcmFsPENvbG9yLlJlZD5cIiwgZnVuY3Rpb24gKCkge1xuICAgIGVudW0gQ29sb3Ige1xuICAgICAgUmVkLFxuICAgICAgR3JlZW4sXG4gICAgICBCbHVlLFxuICAgIH1cblxuICAgIGNvbnN0ICRDb2xvclJlZDogTGl0ZXJhbElvVHlwZTxDb2xvci5SZWQ+ID0gbmV3IExpdGVyYWxUeXBlPENvbG9yLlJlZD4oe1xuICAgICAgdHlwZTogbmV3IFRzRW51bVR5cGUoe2VudW06IENvbG9yfSksXG4gICAgICB2YWx1ZTogQ29sb3IuUmVkLFxuICAgIH0pO1xuXG4gICAgY29uc3QgaXRlbXM6IFR5cGVkVmFsdWVbXSA9IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJDb2xvci5SZWRcIixcbiAgICAgICAgdmFsdWU6IENvbG9yLlJlZCxcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIG91dHB1dDoge1xuICAgICAgICAgIGJzb246IEJ1ZmZlci5mcm9tKFwiMTAwMDAwMDAwMjVmMDAwNDAwMDAwMDUyNjU2NDAwMDBcIiwgXCJoZXhcIiksXG4gICAgICAgICAganNvbjogXCJcXFwiUmVkXFxcIlwiLFxuICAgICAgICAgIHFzOiBcIl89UmVkXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIjBcIixcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICBic29uOiBCdWZmZXIuZnJvbShcIjEwMDAwMDAwMDI1ZjAwMDQwMDAwMDA1MjY1NjQwMDAwXCIsIFwiaGV4XCIpLFxuICAgICAgICAgIGpzb246IFwiXFxcIlJlZFxcXCJcIixcbiAgICAgICAgICBxczogXCJfPVJlZFwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtuYW1lOiBcIkNvbG9yLkdyZWVuXCIsIHZhbHVlOiBDb2xvci5HcmVlbiwgdmFsaWQ6IGZhbHNlfSxcbiAgICAgIHtuYW1lOiBcInVuZGVmaW5lZFwiLCB2YWx1ZTogdW5kZWZpbmVkLCB2YWxpZDogZmFsc2V9LFxuICAgIF07XG5cbiAgICBydW5UZXN0cygkQ29sb3JSZWQsIGl0ZW1zKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
