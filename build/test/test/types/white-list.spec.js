"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ucs2_string_1 = require("../../lib/types/ucs2-string");
const white_list_1 = require("../../lib/types/white-list");
const test_1 = require("../helpers/test");
describe("WhiteListType", function () {
    const $Ucs2String = new ucs2_string_1.Ucs2StringType({ maxLength: 10 });
    const $VarName = new white_list_1.WhiteListType({
        itemType: $Ucs2String,
        values: ["foo", "bar", "baz"],
    });
    const items = [
        { name: "\"foo\"", value: "foo", valid: true },
        { name: "\"bar\"", value: "bar", valid: true },
        { name: "\"baz\"", value: "baz", valid: true },
        { name: "\"quz\"", value: "quz", valid: false },
        { name: "\" foo \"", value: " foo ", valid: false },
        { name: "\"FOO\"", value: "FOO", valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "[]", value: [], valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    test_1.runTests($VarName, items);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL3doaXRlLWxpc3Quc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZEQUE2RDtBQUM3RCwyREFBMkQ7QUFDM0QsMENBQXVEO0FBRXZELFFBQVEsQ0FBQyxlQUFlLEVBQUU7SUFDeEIsTUFBTSxXQUFXLEdBQW1CLElBQUksNEJBQWMsQ0FBQyxFQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBRXhFLE1BQU0sUUFBUSxHQUEyQixJQUFJLDBCQUFhLENBQVU7UUFDbEUsUUFBUSxFQUFFLFdBQVc7UUFDckIsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7S0FDOUIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxLQUFLLEdBQWlCO1FBQzFCLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7UUFDNUMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztRQUM1QyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO1FBRTVDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDN0MsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNqRCxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQzdDLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3ZDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDekMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUMvQyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ2pELEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDakQsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25ELEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDdkMsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRCxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3pDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDckMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNyQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0tBQ2hELENBQUM7SUFFRixlQUFRLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdHlwZXMvd2hpdGUtbGlzdC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVWNzMlN0cmluZ1R5cGUgfSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzL3VjczItc3RyaW5nXCI7XG5pbXBvcnQgeyBXaGl0ZUxpc3RUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi90eXBlcy93aGl0ZS1saXN0XCI7XG5pbXBvcnQgeyBydW5UZXN0cywgVHlwZWRWYWx1ZSB9IGZyb20gXCIuLi9oZWxwZXJzL3Rlc3RcIjtcblxuZGVzY3JpYmUoXCJXaGl0ZUxpc3RUeXBlXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgJFVjczJTdHJpbmc6IFVjczJTdHJpbmdUeXBlID0gbmV3IFVjczJTdHJpbmdUeXBlKHttYXhMZW5ndGg6IDEwfSk7XG4gIHR5cGUgVmFyTmFtZSA9IFwiZm9vXCIgfCBcImJhclwiIHwgXCJiYXpcIjtcbiAgY29uc3QgJFZhck5hbWU6IFdoaXRlTGlzdFR5cGU8VmFyTmFtZT4gPSBuZXcgV2hpdGVMaXN0VHlwZTxWYXJOYW1lPih7XG4gICAgaXRlbVR5cGU6ICRVY3MyU3RyaW5nLFxuICAgIHZhbHVlczogW1wiZm9vXCIsIFwiYmFyXCIsIFwiYmF6XCJdLFxuICB9KTtcblxuICBjb25zdCBpdGVtczogVHlwZWRWYWx1ZVtdID0gW1xuICAgIHtuYW1lOiBcIlxcXCJmb29cXFwiXCIsIHZhbHVlOiBcImZvb1wiLCB2YWxpZDogdHJ1ZX0sXG4gICAge25hbWU6IFwiXFxcImJhclxcXCJcIiwgdmFsdWU6IFwiYmFyXCIsIHZhbGlkOiB0cnVlfSxcbiAgICB7bmFtZTogXCJcXFwiYmF6XFxcIlwiLCB2YWx1ZTogXCJiYXpcIiwgdmFsaWQ6IHRydWV9LFxuXG4gICAge25hbWU6IFwiXFxcInF1elxcXCJcIiwgdmFsdWU6IFwicXV6XCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcIiBmb28gXFxcIlwiLCB2YWx1ZTogXCIgZm9vIFwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJGT09cXFwiXCIsIHZhbHVlOiBcIkZPT1wiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIjBcIiwgdmFsdWU6IDAsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiMVwiLCB2YWx1ZTogMSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiXFxcIlwiLCB2YWx1ZTogXCJcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiMFxcXCJcIiwgdmFsdWU6IFwiMFwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJ0cnVlXFxcIlwiLCB2YWx1ZTogXCJ0cnVlXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcImZhbHNlXFxcIlwiLCB2YWx1ZTogXCJmYWxzZVwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIkluZmluaXR5XCIsIHZhbHVlOiBJbmZpbml0eSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCItSW5maW5pdHlcIiwgdmFsdWU6IC1JbmZpbml0eSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJOYU5cIiwgdmFsdWU6IE5hTiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJ1bmRlZmluZWRcIiwgdmFsdWU6IHVuZGVmaW5lZCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJudWxsXCIsIHZhbHVlOiBudWxsLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIltdXCIsIHZhbHVlOiBbXSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJ7fVwiLCB2YWx1ZToge30sIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiL3JlZ2V4L1wiLCB2YWx1ZTogL3JlZ2V4LywgdmFsaWQ6IGZhbHNlfSxcbiAgXTtcblxuICBydW5UZXN0cygkVmFyTmFtZSwgaXRlbXMpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
