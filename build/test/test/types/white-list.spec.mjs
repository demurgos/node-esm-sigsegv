import { Ucs2StringType } from "../../lib/types/ucs2-string";
import { WhiteListType } from "../../lib/types/white-list";
import { runTests } from "../helpers/test";
describe("WhiteListType", function () {
    const $Ucs2String = new Ucs2StringType({ maxLength: 10 });
    const $VarName = new WhiteListType({
        itemType: $Ucs2String,
        values: ["foo", "bar", "baz"],
    });
    const items = [
        { name: "\"foo\"", value: "foo", valid: true },
        { name: "\"bar\"", value: "bar", valid: true },
        { name: "\"baz\"", value: "baz", valid: true },
        { name: "\"quz\"", value: "quz", valid: false },
        { name: "\" foo \"", value: " foo ", valid: false },
        { name: "\"FOO\"", value: "FOO", valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "[]", value: [], valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    runTests($VarName, items);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL3doaXRlLWxpc3Quc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQWMsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RCxRQUFRLENBQUMsZUFBZSxFQUFFO0lBQ3hCLE1BQU0sV0FBVyxHQUFtQixJQUFJLGNBQWMsQ0FBQyxFQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBRXhFLE1BQU0sUUFBUSxHQUEyQixJQUFJLGFBQWEsQ0FBVTtRQUNsRSxRQUFRLEVBQUUsV0FBVztRQUNyQixNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztLQUM5QixDQUFDLENBQUM7SUFFSCxNQUFNLEtBQUssR0FBaUI7UUFDMUIsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztRQUM1QyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO1FBQzVDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7UUFFNUMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUM3QyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ2pELEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDN0MsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuQyxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25DLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDdkMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN6QyxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQy9DLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDakQsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNqRCxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkQsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2QyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25ELEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDekMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNyQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3JDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7S0FDaEQsQ0FBQztJQUVGLFFBQVEsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC90eXBlcy93aGl0ZS1saXN0LnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVY3MyU3RyaW5nVHlwZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXMvdWNzMi1zdHJpbmdcIjtcbmltcG9ydCB7IFdoaXRlTGlzdFR5cGUgfSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzL3doaXRlLWxpc3RcIjtcbmltcG9ydCB7IHJ1blRlc3RzLCBUeXBlZFZhbHVlIH0gZnJvbSBcIi4uL2hlbHBlcnMvdGVzdFwiO1xuXG5kZXNjcmliZShcIldoaXRlTGlzdFR5cGVcIiwgZnVuY3Rpb24gKCkge1xuICBjb25zdCAkVWNzMlN0cmluZzogVWNzMlN0cmluZ1R5cGUgPSBuZXcgVWNzMlN0cmluZ1R5cGUoe21heExlbmd0aDogMTB9KTtcbiAgdHlwZSBWYXJOYW1lID0gXCJmb29cIiB8IFwiYmFyXCIgfCBcImJhelwiO1xuICBjb25zdCAkVmFyTmFtZTogV2hpdGVMaXN0VHlwZTxWYXJOYW1lPiA9IG5ldyBXaGl0ZUxpc3RUeXBlPFZhck5hbWU+KHtcbiAgICBpdGVtVHlwZTogJFVjczJTdHJpbmcsXG4gICAgdmFsdWVzOiBbXCJmb29cIiwgXCJiYXJcIiwgXCJiYXpcIl0sXG4gIH0pO1xuXG4gIGNvbnN0IGl0ZW1zOiBUeXBlZFZhbHVlW10gPSBbXG4gICAge25hbWU6IFwiXFxcImZvb1xcXCJcIiwgdmFsdWU6IFwiZm9vXCIsIHZhbGlkOiB0cnVlfSxcbiAgICB7bmFtZTogXCJcXFwiYmFyXFxcIlwiLCB2YWx1ZTogXCJiYXJcIiwgdmFsaWQ6IHRydWV9LFxuICAgIHtuYW1lOiBcIlxcXCJiYXpcXFwiXCIsIHZhbHVlOiBcImJhelwiLCB2YWxpZDogdHJ1ZX0sXG5cbiAgICB7bmFtZTogXCJcXFwicXV6XFxcIlwiLCB2YWx1ZTogXCJxdXpcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiIGZvbyBcXFwiXCIsIHZhbHVlOiBcIiBmb28gXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcIkZPT1xcXCJcIiwgdmFsdWU6IFwiRk9PXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiMFwiLCB2YWx1ZTogMCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIxXCIsIHZhbHVlOiAxLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJcXFwiXCIsIHZhbHVlOiBcIlwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCIwXFxcIlwiLCB2YWx1ZTogXCIwXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcInRydWVcXFwiXCIsIHZhbHVlOiBcInRydWVcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiZmFsc2VcXFwiXCIsIHZhbHVlOiBcImZhbHNlXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiSW5maW5pdHlcIiwgdmFsdWU6IEluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIi1JbmZpbml0eVwiLCB2YWx1ZTogLUluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIk5hTlwiLCB2YWx1ZTogTmFOLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInVuZGVmaW5lZFwiLCB2YWx1ZTogdW5kZWZpbmVkLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIm51bGxcIiwgdmFsdWU6IG51bGwsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiW11cIiwgdmFsdWU6IFtdLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInt9XCIsIHZhbHVlOiB7fSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIvcmVnZXgvXCIsIHZhbHVlOiAvcmVnZXgvLCB2YWxpZDogZmFsc2V9LFxuICBdO1xuXG4gIHJ1blRlc3RzKCRWYXJOYW1lLCBpdGVtcyk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
