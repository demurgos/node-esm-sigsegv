"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bytes_1 = require("../../lib/types/bytes");
const test_1 = require("../helpers/test");
describe("BytesType", function () {
    const shortBuffer = new bytes_1.BytesType({
        maxLength: 2,
    });
    const items = [
        {
            name: "Uint8Array.from([])",
            value: Uint8Array.from([]),
            valid: true,
            output: {
                json: "\"\"",
            },
        },
        {
            name: "Uint8Array.from([1])",
            value: Uint8Array.from([1]),
            valid: true,
            output: {
                json: "\"01\"",
            },
        },
        {
            name: "Uint8Array.from([2, 3])",
            value: Uint8Array.from([2, 3]),
            valid: true,
            output: {
                json: "\"0203\"",
            },
        },
        {
            name: "Uint8Array.from([4, 5, 6])",
            value: Uint8Array.from([4, 5, 6]),
            valid: false,
        },
        {
            name: "[7]",
            value: [7],
            valid: false,
        },
        {
            name: "[0.5]",
            value: [0.5],
            valid: false,
        },
        {
            name: "[null]",
            value: [null],
            valid: false,
        },
        {
            name: "[undefined]",
            value: [undefined],
            valid: false,
        },
        {
            name: "new Array()",
            value: new Array(),
            valid: false,
        },
        {
            name: "new Array(0)",
            value: new Array(0),
            valid: false,
        },
        {
            name: "new Array(1)",
            value: new Array(1),
            valid: false,
        },
        {
            name: "new Array(2)",
            value: new Array(2),
            valid: false,
        },
        { name: "new Date(0)", value: new Date(0), valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    test_1.runTests(shortBuffer, items);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL2J5dGVzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBa0Q7QUFDbEQsMENBQXVEO0FBRXZELFFBQVEsQ0FBQyxXQUFXLEVBQUU7SUFDcEIsTUFBTSxXQUFXLEdBQWMsSUFBSSxpQkFBUyxDQUFDO1FBQzNDLFNBQVMsRUFBRSxDQUFDO0tBQ2IsQ0FBQyxDQUFDO0lBRUgsTUFBTSxLQUFLLEdBQWlCO1FBQzFCO1lBQ0UsSUFBSSxFQUFFLHFCQUFxQjtZQUMzQixLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDMUIsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLE1BQU07YUFDYjtTQUNGO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsc0JBQXNCO1lBQzVCLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7YUFDZjtTQUNGO1FBQ0Q7WUFDRSxJQUFJLEVBQUUseUJBQXlCO1lBQy9CLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssRUFBRSxJQUFJO1lBQ1gsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxVQUFVO2FBQ2pCO1NBQ0Y7UUFDRDtZQUNFLElBQUksRUFBRSw0QkFBNEI7WUFDbEMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLEtBQUssRUFBRSxLQUFLO1NBQ2I7UUFDRDtZQUNFLElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1YsS0FBSyxFQUFFLEtBQUs7U0FDYjtRQUNEO1lBQ0UsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDWixLQUFLLEVBQUUsS0FBSztTQUNiO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQztZQUNiLEtBQUssRUFBRSxLQUFLO1NBQ2I7UUFDRDtZQUNFLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUNsQixLQUFLLEVBQUUsS0FBSztTQUNiO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsSUFBSSxLQUFLLEVBQUU7WUFDbEIsS0FBSyxFQUFFLEtBQUs7U0FDYjtRQUNEO1lBQ0UsSUFBSSxFQUFFLGNBQWM7WUFDcEIsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNuQixLQUFLLEVBQUUsS0FBSztTQUNiO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsY0FBYztZQUNwQixLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEtBQUssRUFBRSxLQUFLO1NBQ2I7UUFDRDtZQUNFLElBQUksRUFBRSxjQUFjO1lBQ3BCLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkIsS0FBSyxFQUFFLEtBQUs7U0FDYjtRQUVELEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2RCxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25DLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2QyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3pDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDL0MsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNqRCxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ2pELEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3ZDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkQsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN6QyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3JDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7S0FDaEQsQ0FBQztJQUVGLGVBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC90eXBlcy9ieXRlcy5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnl0ZXNUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi90eXBlcy9ieXRlc1wiO1xuaW1wb3J0IHsgcnVuVGVzdHMsIFR5cGVkVmFsdWUgfSBmcm9tIFwiLi4vaGVscGVycy90ZXN0XCI7XG5cbmRlc2NyaWJlKFwiQnl0ZXNUeXBlXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgc2hvcnRCdWZmZXI6IEJ5dGVzVHlwZSA9IG5ldyBCeXRlc1R5cGUoe1xuICAgIG1heExlbmd0aDogMixcbiAgfSk7XG5cbiAgY29uc3QgaXRlbXM6IFR5cGVkVmFsdWVbXSA9IFtcbiAgICB7XG4gICAgICBuYW1lOiBcIlVpbnQ4QXJyYXkuZnJvbShbXSlcIixcbiAgICAgIHZhbHVlOiBVaW50OEFycmF5LmZyb20oW10pLFxuICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICBvdXRwdXQ6IHtcbiAgICAgICAganNvbjogXCJcXFwiXFxcIlwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiVWludDhBcnJheS5mcm9tKFsxXSlcIixcbiAgICAgIHZhbHVlOiBVaW50OEFycmF5LmZyb20oWzFdKSxcbiAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgb3V0cHV0OiB7XG4gICAgICAgIGpzb246IFwiXFxcIjAxXFxcIlwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiVWludDhBcnJheS5mcm9tKFsyLCAzXSlcIixcbiAgICAgIHZhbHVlOiBVaW50OEFycmF5LmZyb20oWzIsIDNdKSxcbiAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgb3V0cHV0OiB7XG4gICAgICAgIGpzb246IFwiXFxcIjAyMDNcXFwiXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJVaW50OEFycmF5LmZyb20oWzQsIDUsIDZdKVwiLFxuICAgICAgdmFsdWU6IFVpbnQ4QXJyYXkuZnJvbShbNCwgNSwgNl0pLFxuICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJbN11cIixcbiAgICAgIHZhbHVlOiBbN10sXG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcIlswLjVdXCIsXG4gICAgICB2YWx1ZTogWzAuNV0sXG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcIltudWxsXVwiLFxuICAgICAgdmFsdWU6IFtudWxsXSxcbiAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiW3VuZGVmaW5lZF1cIixcbiAgICAgIHZhbHVlOiBbdW5kZWZpbmVkXSxcbiAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwibmV3IEFycmF5KClcIixcbiAgICAgIHZhbHVlOiBuZXcgQXJyYXkoKSxcbiAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwibmV3IEFycmF5KDApXCIsXG4gICAgICB2YWx1ZTogbmV3IEFycmF5KDApLFxuICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogXCJuZXcgQXJyYXkoMSlcIixcbiAgICAgIHZhbHVlOiBuZXcgQXJyYXkoMSksXG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBcIm5ldyBBcnJheSgyKVwiLFxuICAgICAgdmFsdWU6IG5ldyBBcnJheSgyKSxcbiAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICB9LFxuXG4gICAge25hbWU6IFwibmV3IERhdGUoMClcIiwgdmFsdWU6IG5ldyBEYXRlKDApLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIjBcIiwgdmFsdWU6IDAsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiMVwiLCB2YWx1ZTogMSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiXFxcIlwiLCB2YWx1ZTogXCJcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiMFxcXCJcIiwgdmFsdWU6IFwiMFwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJ0cnVlXFxcIlwiLCB2YWx1ZTogXCJ0cnVlXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcImZhbHNlXFxcIlwiLCB2YWx1ZTogXCJmYWxzZVwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIkluZmluaXR5XCIsIHZhbHVlOiBJbmZpbml0eSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCItSW5maW5pdHlcIiwgdmFsdWU6IC1JbmZpbml0eSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJOYU5cIiwgdmFsdWU6IE5hTiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJ1bmRlZmluZWRcIiwgdmFsdWU6IHVuZGVmaW5lZCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJudWxsXCIsIHZhbHVlOiBudWxsLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInt9XCIsIHZhbHVlOiB7fSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIvcmVnZXgvXCIsIHZhbHVlOiAvcmVnZXgvLCB2YWxpZDogZmFsc2V9LFxuICBdO1xuXG4gIHJ1blRlc3RzKHNob3J0QnVmZmVyLCBpdGVtcyk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
