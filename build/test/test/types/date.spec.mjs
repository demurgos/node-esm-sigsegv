import { DateType } from "../../lib/types/date";
import { runTests } from "../helpers/test";
describe("DateType", function () {
    const type = new DateType();
    const items = [
        { name: "new Date()", value: new Date(), valid: true },
        {
            name: "new Date(0)",
            value: new Date(0),
            valid: true,
            output: {
                json: "\"1970-01-01T00:00:00.000Z\"",
            },
            inputs: {
                json: ["0"],
            },
            invalidInputs: {
                json: ["null"],
            },
        },
        { name: "new Date(\"1247-05-18T19:40:08.418Z\")", value: new Date("1247-05-18T19:40:08.418Z"), valid: true },
        { name: "new Date(Number.EPSILON)", value: new Date(Number.EPSILON), valid: true },
        { name: "new Date(Math.PI)", value: new Date(Math.PI), valid: true },
        { name: "new Date(Number.MAX_SAFE_INTEGER)", value: new Date(Number.MAX_SAFE_INTEGER), valid: false },
        { name: "new Date(Number.MIN_SAFE_INTEGER)", value: new Date(Number.MIN_SAFE_INTEGER), valid: false },
        { name: "new Date(Number.MAX_VALUE)", value: new Date(Number.MAX_VALUE), valid: false },
        { name: "new Date(NaN)", value: new Date(NaN), valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "[]", value: [], valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    runTests(type, items);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL2RhdGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFFBQVEsRUFBYyxNQUFNLGlCQUFpQixDQUFDO0FBRXZELFFBQVEsQ0FBQyxVQUFVLEVBQUU7SUFDbkIsTUFBTSxJQUFJLEdBQWEsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUV0QyxNQUFNLEtBQUssR0FBaUI7UUFDMUIsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7UUFDcEQ7WUFDRSxJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLEtBQUssRUFBRSxJQUFJO1lBQ1gsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSw4QkFBOEI7YUFDckM7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ1o7WUFDRCxhQUFhLEVBQUU7Z0JBQ2IsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO2FBQ2Y7U0FDRjtRQUNELEVBQUMsSUFBSSxFQUFFLHdDQUF3QyxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7UUFDMUcsRUFBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO1FBQ2hGLEVBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztRQUVsRSxFQUFDLElBQUksRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRyxFQUFDLElBQUksRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRyxFQUFDLElBQUksRUFBRSw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDckYsRUFBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQzNELEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3ZDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDekMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUMvQyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ2pELEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDakQsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25ELEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDdkMsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRCxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3pDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDckMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNyQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO0tBQ2hELENBQUM7SUFFRixRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdHlwZXMvZGF0ZS5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVR5cGUgfSBmcm9tIFwiLi4vLi4vbGliL3R5cGVzL2RhdGVcIjtcbmltcG9ydCB7IHJ1blRlc3RzLCBUeXBlZFZhbHVlIH0gZnJvbSBcIi4uL2hlbHBlcnMvdGVzdFwiO1xuXG5kZXNjcmliZShcIkRhdGVUeXBlXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdHlwZTogRGF0ZVR5cGUgPSBuZXcgRGF0ZVR5cGUoKTtcblxuICBjb25zdCBpdGVtczogVHlwZWRWYWx1ZVtdID0gW1xuICAgIHtuYW1lOiBcIm5ldyBEYXRlKClcIiwgdmFsdWU6IG5ldyBEYXRlKCksIHZhbGlkOiB0cnVlfSxcbiAgICB7XG4gICAgICBuYW1lOiBcIm5ldyBEYXRlKDApXCIsXG4gICAgICB2YWx1ZTogbmV3IERhdGUoMCksXG4gICAgICB2YWxpZDogdHJ1ZSxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBqc29uOiBcIlxcXCIxOTcwLTAxLTAxVDAwOjAwOjAwLjAwMFpcXFwiXCIsXG4gICAgICB9LFxuICAgICAgaW5wdXRzOiB7XG4gICAgICAgIGpzb246IFtcIjBcIl0sXG4gICAgICB9LFxuICAgICAgaW52YWxpZElucHV0czoge1xuICAgICAgICBqc29uOiBbXCJudWxsXCJdLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtuYW1lOiBcIm5ldyBEYXRlKFxcXCIxMjQ3LTA1LTE4VDE5OjQwOjA4LjQxOFpcXFwiKVwiLCB2YWx1ZTogbmV3IERhdGUoXCIxMjQ3LTA1LTE4VDE5OjQwOjA4LjQxOFpcIiksIHZhbGlkOiB0cnVlfSxcbiAgICB7bmFtZTogXCJuZXcgRGF0ZShOdW1iZXIuRVBTSUxPTilcIiwgdmFsdWU6IG5ldyBEYXRlKE51bWJlci5FUFNJTE9OKSwgdmFsaWQ6IHRydWV9LFxuICAgIHtuYW1lOiBcIm5ldyBEYXRlKE1hdGguUEkpXCIsIHZhbHVlOiBuZXcgRGF0ZShNYXRoLlBJKSwgdmFsaWQ6IHRydWV9LFxuXG4gICAge25hbWU6IFwibmV3IERhdGUoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpXCIsIHZhbHVlOiBuZXcgRGF0ZShOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwibmV3IERhdGUoTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpXCIsIHZhbHVlOiBuZXcgRGF0ZShOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwibmV3IERhdGUoTnVtYmVyLk1BWF9WQUxVRSlcIiwgdmFsdWU6IG5ldyBEYXRlKE51bWJlci5NQVhfVkFMVUUpLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIm5ldyBEYXRlKE5hTilcIiwgdmFsdWU6IG5ldyBEYXRlKE5hTiksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiMFwiLCB2YWx1ZTogMCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIxXCIsIHZhbHVlOiAxLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJcXFwiXCIsIHZhbHVlOiBcIlwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCIwXFxcIlwiLCB2YWx1ZTogXCIwXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcInRydWVcXFwiXCIsIHZhbHVlOiBcInRydWVcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiZmFsc2VcXFwiXCIsIHZhbHVlOiBcImZhbHNlXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiSW5maW5pdHlcIiwgdmFsdWU6IEluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIi1JbmZpbml0eVwiLCB2YWx1ZTogLUluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIk5hTlwiLCB2YWx1ZTogTmFOLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInVuZGVmaW5lZFwiLCB2YWx1ZTogdW5kZWZpbmVkLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIm51bGxcIiwgdmFsdWU6IG51bGwsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiW11cIiwgdmFsdWU6IFtdLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInt9XCIsIHZhbHVlOiB7fSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIvcmVnZXgvXCIsIHZhbHVlOiAvcmVnZXgvLCB2YWxpZDogZmFsc2V9LFxuICBdO1xuXG4gIHJ1blRlc3RzKHR5cGUsIGl0ZW1zKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
