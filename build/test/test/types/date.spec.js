"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const date_1 = require("../../lib/types/date");
const test_1 = require("../helpers/test");
describe("DateType", function () {
    const type = new date_1.DateType();
    const items = [
        { name: "new Date()", value: new Date(), valid: true },
        {
            name: "new Date(0)",
            value: new Date(0),
            valid: true,
            output: {
                json: "\"1970-01-01T00:00:00.000Z\"",
            },
            inputs: {
                json: ["0"],
            },
            invalidInputs: {
                json: ["null"],
            },
        },
        { name: "new Date(\"1247-05-18T19:40:08.418Z\")", value: new Date("1247-05-18T19:40:08.418Z"), valid: true },
        { name: "new Date(Number.EPSILON)", value: new Date(Number.EPSILON), valid: true },
        { name: "new Date(Math.PI)", value: new Date(Math.PI), valid: true },
        { name: "new Date(Number.MAX_SAFE_INTEGER)", value: new Date(Number.MAX_SAFE_INTEGER), valid: false },
        { name: "new Date(Number.MIN_SAFE_INTEGER)", value: new Date(Number.MIN_SAFE_INTEGER), valid: false },
        { name: "new Date(Number.MAX_VALUE)", value: new Date(Number.MAX_VALUE), valid: false },
        { name: "new Date(NaN)", value: new Date(NaN), valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "[]", value: [], valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    test_1.runTests(type, items);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL2RhdGUuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUFnRDtBQUNoRCwwQ0FBdUQ7QUFFdkQsUUFBUSxDQUFDLFVBQVUsRUFBRTtJQUNuQixNQUFNLElBQUksR0FBYSxJQUFJLGVBQVEsRUFBRSxDQUFDO0lBRXRDLE1BQU0sS0FBSyxHQUFpQjtRQUMxQixFQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztRQUNwRDtZQUNFLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbEIsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLDhCQUE4QjthQUNyQztZQUNELE1BQU0sRUFBRTtnQkFDTixJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDWjtZQUNELGFBQWEsRUFBRTtnQkFDYixJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7YUFDZjtTQUNGO1FBQ0QsRUFBQyxJQUFJLEVBQUUsd0NBQXdDLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztRQUMxRyxFQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7UUFDaEYsRUFBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO1FBRWxFLEVBQUMsSUFBSSxFQUFFLG1DQUFtQyxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25HLEVBQUMsSUFBSSxFQUFFLG1DQUFtQyxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25HLEVBQUMsSUFBSSxFQUFFLDRCQUE0QixFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNyRixFQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDM0QsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuQyxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25DLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDdkMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN6QyxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQy9DLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDakQsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNqRCxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkQsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2QyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25ELEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDekMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNyQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3JDLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7S0FDaEQsQ0FBQztJQUVGLGVBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC90eXBlcy9kYXRlLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRlVHlwZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXMvZGF0ZVwiO1xuaW1wb3J0IHsgcnVuVGVzdHMsIFR5cGVkVmFsdWUgfSBmcm9tIFwiLi4vaGVscGVycy90ZXN0XCI7XG5cbmRlc2NyaWJlKFwiRGF0ZVR5cGVcIiwgZnVuY3Rpb24gKCkge1xuICBjb25zdCB0eXBlOiBEYXRlVHlwZSA9IG5ldyBEYXRlVHlwZSgpO1xuXG4gIGNvbnN0IGl0ZW1zOiBUeXBlZFZhbHVlW10gPSBbXG4gICAge25hbWU6IFwibmV3IERhdGUoKVwiLCB2YWx1ZTogbmV3IERhdGUoKSwgdmFsaWQ6IHRydWV9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwibmV3IERhdGUoMClcIixcbiAgICAgIHZhbHVlOiBuZXcgRGF0ZSgwKSxcbiAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgb3V0cHV0OiB7XG4gICAgICAgIGpzb246IFwiXFxcIjE5NzAtMDEtMDFUMDA6MDA6MDAuMDAwWlxcXCJcIixcbiAgICAgIH0sXG4gICAgICBpbnB1dHM6IHtcbiAgICAgICAganNvbjogW1wiMFwiXSxcbiAgICAgIH0sXG4gICAgICBpbnZhbGlkSW5wdXRzOiB7XG4gICAgICAgIGpzb246IFtcIm51bGxcIl0sXG4gICAgICB9LFxuICAgIH0sXG4gICAge25hbWU6IFwibmV3IERhdGUoXFxcIjEyNDctMDUtMThUMTk6NDA6MDguNDE4WlxcXCIpXCIsIHZhbHVlOiBuZXcgRGF0ZShcIjEyNDctMDUtMThUMTk6NDA6MDguNDE4WlwiKSwgdmFsaWQ6IHRydWV9LFxuICAgIHtuYW1lOiBcIm5ldyBEYXRlKE51bWJlci5FUFNJTE9OKVwiLCB2YWx1ZTogbmV3IERhdGUoTnVtYmVyLkVQU0lMT04pLCB2YWxpZDogdHJ1ZX0sXG4gICAge25hbWU6IFwibmV3IERhdGUoTWF0aC5QSSlcIiwgdmFsdWU6IG5ldyBEYXRlKE1hdGguUEkpLCB2YWxpZDogdHJ1ZX0sXG5cbiAgICB7bmFtZTogXCJuZXcgRGF0ZShOdW1iZXIuTUFYX1NBRkVfSU5URUdFUilcIiwgdmFsdWU6IG5ldyBEYXRlKE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJuZXcgRGF0ZShOdW1iZXIuTUlOX1NBRkVfSU5URUdFUilcIiwgdmFsdWU6IG5ldyBEYXRlKE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJuZXcgRGF0ZShOdW1iZXIuTUFYX1ZBTFVFKVwiLCB2YWx1ZTogbmV3IERhdGUoTnVtYmVyLk1BWF9WQUxVRSksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwibmV3IERhdGUoTmFOKVwiLCB2YWx1ZTogbmV3IERhdGUoTmFOKSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIwXCIsIHZhbHVlOiAwLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIjFcIiwgdmFsdWU6IDEsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcIlxcXCJcIiwgdmFsdWU6IFwiXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcIjBcXFwiXCIsIHZhbHVlOiBcIjBcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwidHJ1ZVxcXCJcIiwgdmFsdWU6IFwidHJ1ZVwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJmYWxzZVxcXCJcIiwgdmFsdWU6IFwiZmFsc2VcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJJbmZpbml0eVwiLCB2YWx1ZTogSW5maW5pdHksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiLUluZmluaXR5XCIsIHZhbHVlOiAtSW5maW5pdHksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiTmFOXCIsIHZhbHVlOiBOYU4sIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwidW5kZWZpbmVkXCIsIHZhbHVlOiB1bmRlZmluZWQsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwibnVsbFwiLCB2YWx1ZTogbnVsbCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJbXVwiLCB2YWx1ZTogW10sIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwie31cIiwgdmFsdWU6IHt9LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIi9yZWdleC9cIiwgdmFsdWU6IC9yZWdleC8sIHZhbGlkOiBmYWxzZX0sXG4gIF07XG5cbiAgcnVuVGVzdHModHlwZSwgaXRlbXMpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
