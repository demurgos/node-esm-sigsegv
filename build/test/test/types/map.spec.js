"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const integer_1 = require("../../lib/types/integer");
const map_1 = require("../../lib/types/map");
const ucs2_string_1 = require("../../lib/types/ucs2-string");
const test_1 = require("../helpers/test");
describe("Map", function () {
    const mapType = new map_1.MapType({
        keyType: new integer_1.IntegerType(),
        valueType: new integer_1.IntegerType(),
        maxSize: 5,
    });
    const items = [
        {
            name: "new Map([[1, 100], [2, 200]])",
            value: new Map([[1, 100], [2, 200]]),
            valid: true,
            output: {
                json: "{\"1\":100,\"2\":200}",
                qs: "ignore",
            },
        },
        { name: "new Date(0)", value: new Date(0), valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "[]", value: [], valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    test_1.runTests(mapType, items);
});
describe("Map (assumeStringKey)", function () {
    const mapType = new map_1.MapType({
        keyType: new ucs2_string_1.Ucs2StringType({ pattern: /^a+$/, maxLength: 10 }),
        valueType: new integer_1.IntegerType(),
        maxSize: 5,
        assumeStringKey: true,
    });
    const items = [
        {
            name: "new Map([[a, 100], [aa, 200]])",
            value: new Map([["a", 100], ["aa", 200]]),
            valid: true,
            output: {
                json: "{\"a\":100,\"aa\":200}",
            },
        },
    ];
    test_1.runTests(mapType, items);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL21hcC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscURBQXNEO0FBQ3RELDZDQUE4QztBQUM5Qyw2REFBNkQ7QUFDN0QsMENBQXVEO0FBRXZELFFBQVEsQ0FBQyxLQUFLLEVBQUU7SUFDZCxNQUFNLE9BQU8sR0FBNEIsSUFBSSxhQUFPLENBQUM7UUFDbkQsT0FBTyxFQUFFLElBQUkscUJBQVcsRUFBRTtRQUMxQixTQUFTLEVBQUUsSUFBSSxxQkFBVyxFQUFFO1FBQzVCLE9BQU8sRUFBRSxDQUFDO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsTUFBTSxLQUFLLEdBQWlCO1FBQzFCO1lBQ0UsSUFBSSxFQUFFLCtCQUErQjtZQUNyQyxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLEtBQUssRUFBRSxJQUFJO1lBQ1gsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSx1QkFBdUI7Z0JBQzdCLEVBQUUsRUFBRSxRQUFRO2FBQ2I7U0FDRjtRQUVELEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2RCxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25DLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2QyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3pDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDL0MsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNqRCxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ2pELEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3ZDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkQsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN6QyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3JDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDckMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztLQUNoRCxDQUFDO0lBRUYsZUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRTtJQUNoQyxNQUFNLE9BQU8sR0FBNEIsSUFBSSxhQUFPLENBQUM7UUFDbkQsT0FBTyxFQUFFLElBQUksNEJBQWMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQzdELFNBQVMsRUFBRSxJQUFJLHFCQUFXLEVBQUU7UUFDNUIsT0FBTyxFQUFFLENBQUM7UUFDVixlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUFDLENBQUM7SUFFSCxNQUFNLEtBQUssR0FBaUI7UUFDMUI7WUFDRSxJQUFJLEVBQUUsZ0NBQWdDO1lBQ3RDLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDekMsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLHdCQUF3QjthQUMvQjtTQUNGO0tBQ0YsQ0FBQztJQUVGLGVBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC90eXBlcy9tYXAuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVnZXJUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi90eXBlcy9pbnRlZ2VyXCI7XG5pbXBvcnQgeyBNYXBUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi90eXBlcy9tYXBcIjtcbmltcG9ydCB7IFVjczJTdHJpbmdUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi90eXBlcy91Y3MyLXN0cmluZ1wiO1xuaW1wb3J0IHsgcnVuVGVzdHMsIFR5cGVkVmFsdWUgfSBmcm9tIFwiLi4vaGVscGVycy90ZXN0XCI7XG5cbmRlc2NyaWJlKFwiTWFwXCIsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgbWFwVHlwZTogTWFwVHlwZTxudW1iZXIsIG51bWJlcj4gPSBuZXcgTWFwVHlwZSh7XG4gICAga2V5VHlwZTogbmV3IEludGVnZXJUeXBlKCksXG4gICAgdmFsdWVUeXBlOiBuZXcgSW50ZWdlclR5cGUoKSxcbiAgICBtYXhTaXplOiA1LFxuICB9KTtcblxuICBjb25zdCBpdGVtczogVHlwZWRWYWx1ZVtdID0gW1xuICAgIHtcbiAgICAgIG5hbWU6IFwibmV3IE1hcChbWzEsIDEwMF0sIFsyLCAyMDBdXSlcIixcbiAgICAgIHZhbHVlOiBuZXcgTWFwKFtbMSwgMTAwXSwgWzIsIDIwMF1dKSxcbiAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgb3V0cHV0OiB7XG4gICAgICAgIGpzb246IFwie1xcXCIxXFxcIjoxMDAsXFxcIjJcXFwiOjIwMH1cIixcbiAgICAgICAgcXM6IFwiaWdub3JlXCIsXG4gICAgICB9LFxuICAgIH0sXG5cbiAgICB7bmFtZTogXCJuZXcgRGF0ZSgwKVwiLCB2YWx1ZTogbmV3IERhdGUoMCksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiMFwiLCB2YWx1ZTogMCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIxXCIsIHZhbHVlOiAxLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJcXFwiXCIsIHZhbHVlOiBcIlwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCIwXFxcIlwiLCB2YWx1ZTogXCIwXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcInRydWVcXFwiXCIsIHZhbHVlOiBcInRydWVcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiZmFsc2VcXFwiXCIsIHZhbHVlOiBcImZhbHNlXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiSW5maW5pdHlcIiwgdmFsdWU6IEluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIi1JbmZpbml0eVwiLCB2YWx1ZTogLUluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIk5hTlwiLCB2YWx1ZTogTmFOLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInVuZGVmaW5lZFwiLCB2YWx1ZTogdW5kZWZpbmVkLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIm51bGxcIiwgdmFsdWU6IG51bGwsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiW11cIiwgdmFsdWU6IFtdLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInt9XCIsIHZhbHVlOiB7fSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIvcmVnZXgvXCIsIHZhbHVlOiAvcmVnZXgvLCB2YWxpZDogZmFsc2V9LFxuICBdO1xuXG4gIHJ1blRlc3RzKG1hcFR5cGUsIGl0ZW1zKTtcbn0pO1xuXG5kZXNjcmliZShcIk1hcCAoYXNzdW1lU3RyaW5nS2V5KVwiLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IG1hcFR5cGU6IE1hcFR5cGU8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcFR5cGUoe1xuICAgIGtleVR5cGU6IG5ldyBVY3MyU3RyaW5nVHlwZSh7cGF0dGVybjogL15hKyQvLCBtYXhMZW5ndGg6IDEwfSksXG4gICAgdmFsdWVUeXBlOiBuZXcgSW50ZWdlclR5cGUoKSxcbiAgICBtYXhTaXplOiA1LFxuICAgIGFzc3VtZVN0cmluZ0tleTogdHJ1ZSxcbiAgfSk7XG5cbiAgY29uc3QgaXRlbXM6IFR5cGVkVmFsdWVbXSA9IFtcbiAgICB7XG4gICAgICBuYW1lOiBcIm5ldyBNYXAoW1thLCAxMDBdLCBbYWEsIDIwMF1dKVwiLFxuICAgICAgdmFsdWU6IG5ldyBNYXAoW1tcImFcIiwgMTAwXSwgW1wiYWFcIiwgMjAwXV0pLFxuICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICBvdXRwdXQ6IHtcbiAgICAgICAganNvbjogXCJ7XFxcImFcXFwiOjEwMCxcXFwiYWFcXFwiOjIwMH1cIixcbiAgICAgIH0sXG4gICAgfSxcbiAgXTtcblxuICBydW5UZXN0cyhtYXBUeXBlLCBpdGVtcyk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
