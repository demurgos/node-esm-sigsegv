import chai from "chai";
import { BooleanType } from "../../lib/types/boolean";
import { runTests } from "../helpers/test";
describe("BooleanType", function () {
    const type = new BooleanType();
    const items = [
        { name: "true", value: true, valid: true },
        { name: "false", value: false, valid: true },
        // tslint:disable-next-line:no-construct
        { name: "new Boolean(true)", value: new Boolean(true), valid: false },
        // tslint:disable-next-line:no-construct
        { name: "new Boolean(false)", value: new Boolean(false), valid: false },
        { name: "0", value: 0, valid: false },
        { name: "1", value: 1, valid: false },
        { name: "\"\"", value: "", valid: false },
        { name: "\"0\"", value: "0", valid: false },
        { name: "\"true\"", value: "true", valid: false },
        { name: "\"false\"", value: "false", valid: false },
        { name: "Infinity", value: Infinity, valid: false },
        { name: "-Infinity", value: -Infinity, valid: false },
        { name: "NaN", value: NaN, valid: false },
        { name: "undefined", value: undefined, valid: false },
        { name: "null", value: null, valid: false },
        { name: "[]", value: [], valid: false },
        { name: "{}", value: {}, valid: false },
        { name: "new Date()", value: new Date(), valid: false },
        { name: "/regex/", value: /regex/, valid: false },
    ];
    runTests(type, items);
    describe("lte", function () {
        const $Boolean = new BooleanType();
        const testItems = [
            { left: false, right: false, expected: true },
            { left: false, right: true, expected: true },
            { left: true, right: false, expected: false },
            { left: true, right: true, expected: true },
        ];
        for (const { left, right, expected } of testItems) {
            it(`.lte(${left}, ${right}) should return ${expected}`, function () {
                chai.assert.strictEqual($Boolean.lte(left, right), expected);
            });
        }
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3R5cGVzL2Jvb2xlYW4uc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxRQUFRLEVBQWMsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RCxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3RCLE1BQU0sSUFBSSxHQUFnQixJQUFJLFdBQVcsRUFBRSxDQUFDO0lBRTVDLE1BQU0sS0FBSyxHQUFpQjtRQUMxQixFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO1FBQ3hDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7UUFFMUMsd0NBQXdDO1FBQ3hDLEVBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLEtBQUssRUFBRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25FLHdDQUF3QztRQUN4QyxFQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNyRSxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ25DLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN2QyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3pDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDL0MsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNqRCxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ2pELEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUNuRCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3ZDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDbkQsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztRQUN6QyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDO1FBQ3JDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDckMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUM7UUFDckQsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQztLQUNoRCxDQUFDO0lBRUYsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV0QixRQUFRLENBQUMsS0FBSyxFQUFFO1FBQ2QsTUFBTSxRQUFRLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7UUFRaEQsTUFBTSxTQUFTLEdBQWU7WUFDNUIsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQztZQUMzQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDO1lBQzFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUM7WUFDM0MsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQztTQUMxQyxDQUFDO1FBRUYsS0FBSyxNQUFNLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsSUFBSSxTQUFTLEVBQUU7WUFDL0MsRUFBRSxDQUFDLFFBQVEsSUFBSSxLQUFLLEtBQUssbUJBQW1CLFFBQVEsRUFBRSxFQUFFO2dCQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMvRCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3R5cGVzL2Jvb2xlYW4uc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBCb29sZWFuVHlwZSB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXMvYm9vbGVhblwiO1xuaW1wb3J0IHsgcnVuVGVzdHMsIFR5cGVkVmFsdWUgfSBmcm9tIFwiLi4vaGVscGVycy90ZXN0XCI7XG5cbmRlc2NyaWJlKFwiQm9vbGVhblR5cGVcIiwgZnVuY3Rpb24gKCkge1xuICBjb25zdCB0eXBlOiBCb29sZWFuVHlwZSA9IG5ldyBCb29sZWFuVHlwZSgpO1xuXG4gIGNvbnN0IGl0ZW1zOiBUeXBlZFZhbHVlW10gPSBbXG4gICAge25hbWU6IFwidHJ1ZVwiLCB2YWx1ZTogdHJ1ZSwgdmFsaWQ6IHRydWV9LFxuICAgIHtuYW1lOiBcImZhbHNlXCIsIHZhbHVlOiBmYWxzZSwgdmFsaWQ6IHRydWV9LFxuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnN0cnVjdFxuICAgIHtuYW1lOiBcIm5ldyBCb29sZWFuKHRydWUpXCIsIHZhbHVlOiBuZXcgQm9vbGVhbih0cnVlKSwgdmFsaWQ6IGZhbHNlfSxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc3RydWN0XG4gICAge25hbWU6IFwibmV3IEJvb2xlYW4oZmFsc2UpXCIsIHZhbHVlOiBuZXcgQm9vbGVhbihmYWxzZSksIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiMFwiLCB2YWx1ZTogMCwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCIxXCIsIHZhbHVlOiAxLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCJcXFwiXCIsIHZhbHVlOiBcIlwiLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIlxcXCIwXFxcIlwiLCB2YWx1ZTogXCIwXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiXFxcInRydWVcXFwiXCIsIHZhbHVlOiBcInRydWVcIiwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJcXFwiZmFsc2VcXFwiXCIsIHZhbHVlOiBcImZhbHNlXCIsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiSW5maW5pdHlcIiwgdmFsdWU6IEluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIi1JbmZpbml0eVwiLCB2YWx1ZTogLUluZmluaXR5LCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIk5hTlwiLCB2YWx1ZTogTmFOLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInVuZGVmaW5lZFwiLCB2YWx1ZTogdW5kZWZpbmVkLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIm51bGxcIiwgdmFsdWU6IG51bGwsIHZhbGlkOiBmYWxzZX0sXG4gICAge25hbWU6IFwiW11cIiwgdmFsdWU6IFtdLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcInt9XCIsIHZhbHVlOiB7fSwgdmFsaWQ6IGZhbHNlfSxcbiAgICB7bmFtZTogXCJuZXcgRGF0ZSgpXCIsIHZhbHVlOiBuZXcgRGF0ZSgpLCB2YWxpZDogZmFsc2V9LFxuICAgIHtuYW1lOiBcIi9yZWdleC9cIiwgdmFsdWU6IC9yZWdleC8sIHZhbGlkOiBmYWxzZX0sXG4gIF07XG5cbiAgcnVuVGVzdHModHlwZSwgaXRlbXMpO1xuXG4gIGRlc2NyaWJlKFwibHRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCAkQm9vbGVhbjogQm9vbGVhblR5cGUgPSBuZXcgQm9vbGVhblR5cGUoKTtcblxuICAgIGludGVyZmFjZSBUZXN0SXRlbSB7XG4gICAgICBsZWZ0OiBib29sZWFuO1xuICAgICAgcmlnaHQ6IGJvb2xlYW47XG4gICAgICBleHBlY3RlZDogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXN0SXRlbXM6IFRlc3RJdGVtW10gPSBbXG4gICAgICB7bGVmdDogZmFsc2UsIHJpZ2h0OiBmYWxzZSwgZXhwZWN0ZWQ6IHRydWV9LFxuICAgICAge2xlZnQ6IGZhbHNlLCByaWdodDogdHJ1ZSwgZXhwZWN0ZWQ6IHRydWV9LFxuICAgICAge2xlZnQ6IHRydWUsIHJpZ2h0OiBmYWxzZSwgZXhwZWN0ZWQ6IGZhbHNlfSxcbiAgICAgIHtsZWZ0OiB0cnVlLCByaWdodDogdHJ1ZSwgZXhwZWN0ZWQ6IHRydWV9LFxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IHtsZWZ0LCByaWdodCwgZXhwZWN0ZWR9IG9mIHRlc3RJdGVtcykge1xuICAgICAgaXQoYC5sdGUoJHtsZWZ0fSwgJHtyaWdodH0pIHNob3VsZCByZXR1cm4gJHtleHBlY3RlZH1gLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNoYWkuYXNzZXJ0LnN0cmljdEVxdWFsKCRCb29sZWFuLmx0ZShsZWZ0LCByaWdodCksIGV4cGVjdGVkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
