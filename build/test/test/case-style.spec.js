"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = __importDefault(require("chai"));
const case_style_1 = require("../lib/case-style");
describe("rename", function () {
    describe("detectCaseStyle", function () {
        const items = [
            { identifier: "id", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "Id", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "ID", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
            { identifier: "idLength", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "IdLength", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "id-length", expected: case_style_1.CaseStyle.KebabCase },
            { identifier: "id_length", expected: case_style_1.CaseStyle.SnakeCase },
            { identifier: "ID_LENGTH", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
            { identifier: "moduleId", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "ModuleId", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "module-id", expected: case_style_1.CaseStyle.KebabCase },
            { identifier: "module_id", expected: case_style_1.CaseStyle.SnakeCase },
            { identifier: "MODULE_ID", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
            { identifier: "ok", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "Ok", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "OK", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
            { identifier: "okResult", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "OkResult", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "ok-result", expected: case_style_1.CaseStyle.KebabCase },
            { identifier: "ok_result", expected: case_style_1.CaseStyle.SnakeCase },
            { identifier: "OK_RESULT", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
            { identifier: "returnOk", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "ReturnOk", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "return-ok", expected: case_style_1.CaseStyle.KebabCase },
            { identifier: "return_ok", expected: case_style_1.CaseStyle.SnakeCase },
            { identifier: "RETURN_OK", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
            { identifier: "ucs2StringType", expected: case_style_1.CaseStyle.CamelCase },
            { identifier: "Ucs2StringType", expected: case_style_1.CaseStyle.PascalCase },
            { identifier: "ucs2-string-type", expected: case_style_1.CaseStyle.KebabCase },
            { identifier: "ucs2_string_type", expected: case_style_1.CaseStyle.SnakeCase },
            { identifier: "UCS2_STRING_TYPE", expected: case_style_1.CaseStyle.ScreamingSnakeCase },
        ];
        for (const item of items) {
            it(`detectCaseStyle for ${item.identifier} should return ${case_style_1.CaseStyle[item.expected]}`, function () {
                chai_1.default.assert.deepEqual(case_style_1.detectCaseStyle(item.identifier), item.expected);
            });
        }
    });
    {
        const items = [
            { identifier: "id", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["id"] },
            { identifier: "Id", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["id"] },
            { identifier: "ID", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["id"] },
            { identifier: "idLength", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["id", "length"] },
            { identifier: "IdLength", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["id", "length"] },
            { identifier: "id-length", caseStyle: case_style_1.CaseStyle.KebabCase, parts: ["id", "length"] },
            { identifier: "id_length", caseStyle: case_style_1.CaseStyle.SnakeCase, parts: ["id", "length"] },
            { identifier: "ID_LENGTH", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["id", "length"] },
            { identifier: "moduleId", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["module", "id"] },
            { identifier: "ModuleId", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["module", "id"] },
            { identifier: "module-id", caseStyle: case_style_1.CaseStyle.KebabCase, parts: ["module", "id"] },
            { identifier: "module_id", caseStyle: case_style_1.CaseStyle.SnakeCase, parts: ["module", "id"] },
            { identifier: "MODULE_ID", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["module", "id"] },
            { identifier: "ok", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["ok"] },
            { identifier: "Ok", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["ok"] },
            { identifier: "OK", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["ok"] },
            { identifier: "okResult", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["ok", "result"] },
            { identifier: "OkResult", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["ok", "result"] },
            { identifier: "ok-result", caseStyle: case_style_1.CaseStyle.KebabCase, parts: ["ok", "result"] },
            { identifier: "ok_result", caseStyle: case_style_1.CaseStyle.SnakeCase, parts: ["ok", "result"] },
            { identifier: "OK_RESULT", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["ok", "result"] },
            { identifier: "returnOk", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["return", "ok"] },
            { identifier: "ReturnOk", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["return", "ok"] },
            { identifier: "return-ok", caseStyle: case_style_1.CaseStyle.KebabCase, parts: ["return", "ok"] },
            { identifier: "return_ok", caseStyle: case_style_1.CaseStyle.SnakeCase, parts: ["return", "ok"] },
            { identifier: "RETURN_OK", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["return", "ok"] },
            { identifier: "ucs2StringType", caseStyle: case_style_1.CaseStyle.CamelCase, parts: ["ucs2", "string", "type"] },
            { identifier: "Ucs2StringType", caseStyle: case_style_1.CaseStyle.PascalCase, parts: ["ucs2", "string", "type"] },
            { identifier: "ucs2-string-type", caseStyle: case_style_1.CaseStyle.KebabCase, parts: ["ucs2", "string", "type"] },
            { identifier: "ucs2_string_type", caseStyle: case_style_1.CaseStyle.SnakeCase, parts: ["ucs2", "string", "type"] },
            { identifier: "UCS2_STRING_TYPE", caseStyle: case_style_1.CaseStyle.ScreamingSnakeCase, parts: ["ucs2", "string", "type"] },
        ];
        describe("split", function () {
            for (const { caseStyle, identifier, parts } of items) {
                it(`split for ${case_style_1.CaseStyle[caseStyle]}, ${identifier} should return ${JSON.stringify(parts)}`, function () {
                    chai_1.default.assert.deepEqual(case_style_1.split(caseStyle, identifier), parts);
                });
            }
        });
        describe("join", function () {
            for (const { caseStyle, identifier, parts } of items) {
                it(`join for ${case_style_1.CaseStyle[caseStyle]}, ${JSON.stringify(parts)} should return ${identifier}`, function () {
                    chai_1.default.assert.deepEqual(case_style_1.join(caseStyle, parts), identifier);
                });
            }
        });
    }
    describe("rename", function () {
        const items = [
            { identifier: "Blue", to: case_style_1.CaseStyle.KebabCase, expected: "blue" },
            { identifier: "ucs2StringType", to: case_style_1.CaseStyle.KebabCase, expected: "ucs2-string-type" },
            { identifier: "Ucs2StringType", to: case_style_1.CaseStyle.KebabCase, expected: "ucs2-string-type" },
            { identifier: "ucs2-string-type", to: case_style_1.CaseStyle.KebabCase, expected: "ucs2-string-type" },
            { identifier: "ucs2_string_type", to: case_style_1.CaseStyle.KebabCase, expected: "ucs2-string-type" },
            { identifier: "UCS2_STRING_TYPE", to: case_style_1.CaseStyle.KebabCase, expected: "ucs2-string-type" },
        ];
        for (const { identifier, to, expected } of items) {
            it(`rename ${identifier} to ${case_style_1.CaseStyle[to]} should return ${expected}`, function () {
                chai_1.default.assert.deepEqual(case_style_1.rename(identifier, to), expected);
            });
        }
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
