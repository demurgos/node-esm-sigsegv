import bson from "bson";
import chai from "chai";
import qs from "qs";
import { BsonReader } from "../../lib/readers/bson";
import { JsonReader } from "../../lib/readers/json";
import { QsReader } from "../../lib/readers/qs";
import { BsonWriter } from "../../lib/writers/bson";
import { JsonWriter } from "../../lib/writers/json";
import { QsWriter } from "../../lib/writers/qs";
function getName(namedValue) {
    return "name" in namedValue ? namedValue.name : JSON.stringify(namedValue.value);
}
export function testInvalidValue(type, item) {
    if (type.testError !== undefined) {
        it("Should return an Error for .testError", function () {
            chai.assert.instanceOf(type.testError(item.value), Error);
        });
    }
    it("Should return `false` for .test", function () {
        chai.assert.isFalse(type.test(item.value));
    });
}
export function testValidValue(type, item) {
    if (type.testError !== undefined) {
        it("Should return `undefined` for .testError", function () {
            const error = type.testError(item.value);
            if (error !== undefined) {
                chai.assert.fail(error, undefined, String(error));
            }
        });
    }
    it("Should return `true` for .test", function () {
        chai.assert.isTrue(type.test(item.value));
    });
}
export function testBsonSerialization(type, typedValue) {
    const writer = new BsonWriter(bson);
    const reader = new BsonReader(bson);
    const trustedReader = new BsonReader(bson, true);
    let actualSerialized;
    if (typedValue.output !== undefined && "bson" in typedValue.output) {
        const output = typedValue.output["bson"];
        it("`.writeBson(val)` should return the expected value", function () {
            actualSerialized = type.write(writer, typedValue.value);
            chai.assert.deepEqual(actualSerialized, output);
        });
    }
    else {
        it("`t.writeBson(val)` should not throw", function () {
            actualSerialized = type.write(writer, typedValue.value);
        });
    }
    it("`t.readTrustedBson(t.writeBson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(trustedReader, actualSerialized);
        chai.assert.isTrue(type.test(imported));
        chai.assert.isTrue(type.equals(imported, typedValue.value));
    });
    it("`t.readBson(t.writeBson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(reader, actualSerialized);
        chai.assert.isTrue(type.test(imported));
        chai.assert.isTrue(type.equals(imported, typedValue.value));
    });
}
export function testJsonSerialization(type, typedValue) {
    const writer = new JsonWriter();
    const reader = new JsonReader();
    const trustedReader = new JsonReader(true);
    let actualSerialized;
    if (typedValue.output !== undefined && "json" in typedValue.output) {
        const output = typedValue.output["json"];
        const expectedSerialized = JSON.stringify(output);
        it(`\`.writeJson(val)\` should return \`${expectedSerialized}\``, function () {
            actualSerialized = type.write(writer, typedValue.value);
            chai.assert.strictEqual(actualSerialized, output);
        });
    }
    else {
        it("`t.writeJson(val)` should not throw", function () {
            actualSerialized = type.write(writer, typedValue.value);
        });
    }
    it("`t.readTrustedJson(t.writeJson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(trustedReader, actualSerialized);
        chai.assert.isTrue(type.test(imported));
        chai.assert.isTrue(type.equals(imported, typedValue.value));
    });
    it("`t.readJson(t.writeJson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(reader, actualSerialized);
        chai.assert.isTrue(type.test(imported));
        chai.assert.isTrue(type.equals(imported, typedValue.value));
    });
}
export function testQsSerialization(type, typedValue) {
    const writer = new QsWriter(qs);
    const reader = new QsReader(qs);
    const trustedReader = new QsReader(qs, true);
    let actualSerialized;
    if (typedValue.output !== undefined && "qs" in typedValue.output) {
        if (typedValue.output["qs"] === "ignore") {
            return;
        }
        const expectedSerialized = typedValue.output["qs"];
        it(`\`.writeQs(val)\` should return the value \`${expectedSerialized}\``, function () {
            actualSerialized = type.write(writer, typedValue.value);
            chai.assert.strictEqual(actualSerialized, expectedSerialized);
        });
    }
    else {
        it("`t.writeQs(val)` should not throw", function () {
            actualSerialized = type.write(writer, typedValue.value);
        });
    }
    it("`t.readTrustedQs(t.writeQs(val))` should be valid and equal to `val`", function () {
        const imported = type.read(trustedReader, actualSerialized);
        chai.assert.isTrue(type.test(imported));
        chai.assert.isTrue(type.equals(imported, typedValue.value));
    });
    it("`t.readQs(t.writeQs(val))` should be valid and equal to `val`", function () {
        const imported = type.read(reader, actualSerialized);
        chai.assert.isTrue(type.test(imported));
        chai.assert.isTrue(type.equals(imported, typedValue.value));
    });
}
export function testSerialization(type, typedValue) {
    testBsonSerialization(type, typedValue);
    testJsonSerialization(type, typedValue);
    testQsSerialization(type, typedValue);
}
export function testValueSync(type, item) {
    if (item.valid) {
        testValidValue(type, item);
        testSerialization(type, item);
    }
    else {
        testInvalidValue(type, item);
    }
}
export function runTests(type, items) {
    for (const item of items) {
        describe(`Item: ${getName(item)}`, function () {
            testValueSync(type, item);
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L2hlbHBlcnMvdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUVwQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWtDaEQsU0FBUyxPQUFPLENBQUMsVUFBc0I7SUFDckMsT0FBTyxNQUFNLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQWUsRUFBRSxJQUF1QjtJQUN2RSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO1FBQ2hDLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBRUQsRUFBRSxDQUFDLGlDQUFpQyxFQUFFO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENB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QkFBcUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEMscUJBQXFCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDLG1CQUFtQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxJQUFlLEVBQUUsSUFBZ0I7SUFDN0QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ2QsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQixpQkFBaUIsQ0FBQyxJQUFtQixFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzlDO1NBQU07UUFDTCxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDOUI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFlLEVBQUUsS0FBbUI7SUFDM0QsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsUUFBUSxDQUFDLFNBQVMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDakMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyIsImZpbGUiOiJ0ZXN0L2hlbHBlcnMvdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBic29uIGZyb20gXCJic29uXCI7XG5pbXBvcnQgY2hhaSBmcm9tIFwiY2hhaVwiO1xuaW1wb3J0IHFzIGZyb20gXCJxc1wiO1xuaW1wb3J0IHsgSW9UeXBlLCBUeXBlIH0gZnJvbSBcIi4uLy4uL2xpYi9jb3JlXCI7XG5pbXBvcnQgeyBCc29uUmVhZGVyIH0gZnJvbSBcIi4uLy4uL2xpYi9yZWFkZXJzL2Jzb25cIjtcbmltcG9ydCB7IEpzb25SZWFkZXIgfSBmcm9tIFwiLi4vLi4vbGliL3JlYWRlcnMvanNvblwiO1xuaW1wb3J0IHsgUXNSZWFkZXIgfSBmcm9tIFwiLi4vLi4vbGliL3JlYWRlcnMvcXNcIjtcbmltcG9ydCB7IEJzb25Xcml0ZXIgfSBmcm9tIFwiLi4vLi4vbGliL3dyaXRlcnMvYnNvblwiO1xuaW1wb3J0IHsgSnNvbldyaXRlciB9IGZyb20gXCIuLi8uLi9saWIvd3JpdGVycy9qc29uXCI7XG5pbXBvcnQgeyBRc1dyaXRlciB9IGZyb20gXCIuLi8uLi9saWIvd3JpdGVycy9xc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVkVmFsdWUge1xuICBuYW1lPzogc3RyaW5nO1xuICB2YWx1ZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoZWNrZWRWYWx1ZSBleHRlbmRzIE5hbWVkVmFsdWUge1xuICB2YWxpZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnZhbGlkVHlwZWRWYWx1ZSBleHRlbmRzIENoZWNrZWRWYWx1ZSB7XG4gIHZhbGlkOiBib29sZWFuO1xuICB0ZXN0RXJyb3I/OiBFcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZFR5cGVkVmFsdWUgZXh0ZW5kcyBDaGVja2VkVmFsdWUge1xuICB2YWxpZDogYm9vbGVhbjtcblxuICBvdXRwdXQ/OiB7XG4gICAgW2Zvcm1hdE5hbWU6IHN0cmluZ106IGFueTtcbiAgfTtcblxuICBpbnB1dHM/OiB7XG4gICAgW2Zvcm1hdE5hbWU6IHN0cmluZ106IGFueTtcbiAgfTtcblxuICBpbnZhbGlkSW5wdXRzPzoge1xuICAgIFtmb3JtYXROYW1lOiBzdHJpbmddOiBhbnk7XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFR5cGVkVmFsdWUgPSBJbnZhbGlkVHlwZWRWYWx1ZSB8IFZhbGlkVHlwZWRWYWx1ZTtcblxuZnVuY3Rpb24gZ2V0TmFtZShuYW1lZFZhbHVlOiBOYW1lZFZhbHVlKSB7XG4gIHJldHVybiBcIm5hbWVcIiBpbiBuYW1lZFZhbHVlID8gbmFtZWRWYWx1ZS5uYW1lIDogSlNPTi5zdHJpbmdpZnkobmFtZWRWYWx1ZS52YWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0SW52YWxpZFZhbHVlKHR5cGU6IFR5cGU8YW55PiwgaXRlbTogSW52YWxpZFR5cGVkVmFsdWUpIHtcbiAgaWYgKHR5cGUudGVzdEVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICBpdChcIlNob3VsZCByZXR1cm4gYW4gRXJyb3IgZm9yIC50ZXN0RXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgY2hhaS5hc3NlcnQuaW5zdGFuY2VPZih0eXBlLnRlc3RFcnJvciEoaXRlbS52YWx1ZSksIEVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIGl0KFwiU2hvdWxkIHJldHVybiBgZmFsc2VgIGZvciAudGVzdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY2hhaS5hc3NlcnQuaXNGYWxzZSh0eXBlLnRlc3QoaXRlbS52YWx1ZSkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RWYWxpZFZhbHVlKHR5cGU6IFR5cGU8YW55PiwgaXRlbTogVmFsaWRUeXBlZFZhbHVlKSB7XG4gIGlmICh0eXBlLnRlc3RFcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaXQoXCJTaG91bGQgcmV0dXJuIGB1bmRlZmluZWRgIGZvciAudGVzdEVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGVycm9yOiBFcnJvciB8IHVuZGVmaW5lZCA9IHR5cGUudGVzdEVycm9yIShpdGVtLnZhbHVlKTtcbiAgICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoYWkuYXNzZXJ0LmZhaWwoZXJyb3IsIHVuZGVmaW5lZCwgU3RyaW5nKGVycm9yKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpdChcIlNob3VsZCByZXR1cm4gYHRydWVgIGZvciAudGVzdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY2hhaS5hc3NlcnQuaXNUcnVlKHR5cGUudGVzdChpdGVtLnZhbHVlKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVzdEJzb25TZXJpYWxpemF0aW9uPFQ+KHR5cGU6IElvVHlwZTxUPiwgdHlwZWRWYWx1ZTogVmFsaWRUeXBlZFZhbHVlKTogdm9pZCB7XG4gIGNvbnN0IHdyaXRlcjogQnNvbldyaXRlciA9IG5ldyBCc29uV3JpdGVyKGJzb24pO1xuICBjb25zdCByZWFkZXI6IEJzb25SZWFkZXIgPSBuZXcgQnNvblJlYWRlcihic29uKTtcbiAgY29uc3QgdHJ1c3RlZFJlYWRlcjogQnNvblJlYWRlciA9IG5ldyBCc29uUmVhZGVyKGJzb24sIHRydWUpO1xuICBsZXQgYWN0dWFsU2VyaWFsaXplZDogQnVmZmVyO1xuXG4gIGlmICh0eXBlZFZhbHVlLm91dHB1dCAhPT0gdW5kZWZpbmVkICYmIFwiYnNvblwiIGluIHR5cGVkVmFsdWUub3V0cHV0KSB7XG4gICAgY29uc3Qgb3V0cHV0OiBhbnkgPSB0eXBlZFZhbHVlLm91dHB1dFtcImJzb25cIl07XG4gICAgaXQoXCJgLndyaXRlQnNvbih2YWwpYCBzaG91bGQgcmV0dXJuIHRoZSBleHBlY3RlZCB2YWx1ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxTZXJpYWxpemVkID0gdHlwZS53cml0ZSh3cml0ZXIsIHR5cGVkVmFsdWUudmFsdWUpO1xuICAgICAgY2hhaS5hc3NlcnQuZGVlcEVxdWFsKGFjdHVhbFNlcmlhbGl6ZWQsIG91dHB1dCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaXQoXCJgdC53cml0ZUJzb24odmFsKWAgc2hvdWxkIG5vdCB0aHJvd1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxTZXJpYWxpemVkID0gdHlwZS53cml0ZSh3cml0ZXIsIHR5cGVkVmFsdWUudmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgaXQoXCJgdC5yZWFkVHJ1c3RlZEJzb24odC53cml0ZUJzb24odmFsKSlgIHNob3VsZCBiZSB2YWxpZCBhbmQgZXF1YWwgdG8gYHZhbGBcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGltcG9ydGVkOiBUID0gdHlwZS5yZWFkISh0cnVzdGVkUmVhZGVyLCBhY3R1YWxTZXJpYWxpemVkKTtcbiAgICBjaGFpLmFzc2VydC5pc1RydWUodHlwZS50ZXN0KGltcG9ydGVkKSk7XG4gICAgY2hhaS5hc3NlcnQuaXNUcnVlKHR5cGUuZXF1YWxzKGltcG9ydGVkLCB0eXBlZFZhbHVlLnZhbHVlKSk7XG4gIH0pO1xuXG4gIGl0KFwiYHQucmVhZEJzb24odC53cml0ZUJzb24odmFsKSlgIHNob3VsZCBiZSB2YWxpZCBhbmQgZXF1YWwgdG8gYHZhbGBcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGltcG9ydGVkOiBUID0gdHlwZS5yZWFkIShyZWFkZXIsIGFjdHVhbFNlcmlhbGl6ZWQpO1xuICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZSh0eXBlLnRlc3QoaW1wb3J0ZWQpKTtcbiAgICBjaGFpLmFzc2VydC5pc1RydWUodHlwZS5lcXVhbHMoaW1wb3J0ZWQsIHR5cGVkVmFsdWUudmFsdWUpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0SnNvblNlcmlhbGl6YXRpb248VD4odHlwZTogSW9UeXBlPFQ+LCB0eXBlZFZhbHVlOiBWYWxpZFR5cGVkVmFsdWUpOiB2b2lkIHtcbiAgY29uc3Qgd3JpdGVyOiBKc29uV3JpdGVyID0gbmV3IEpzb25Xcml0ZXIoKTtcbiAgY29uc3QgcmVhZGVyOiBKc29uUmVhZGVyID0gbmV3IEpzb25SZWFkZXIoKTtcbiAgY29uc3QgdHJ1c3RlZFJlYWRlcjogSnNvblJlYWRlciA9IG5ldyBKc29uUmVhZGVyKHRydWUpO1xuICBsZXQgYWN0dWFsU2VyaWFsaXplZDogc3RyaW5nO1xuXG4gIGlmICh0eXBlZFZhbHVlLm91dHB1dCAhPT0gdW5kZWZpbmVkICYmIFwianNvblwiIGluIHR5cGVkVmFsdWUub3V0cHV0KSB7XG4gICAgY29uc3Qgb3V0cHV0OiBhbnkgPSB0eXBlZFZhbHVlLm91dHB1dFtcImpzb25cIl07XG4gICAgY29uc3QgZXhwZWN0ZWRTZXJpYWxpemVkOiBzdHJpbmcgPSBKU09OLnN0cmluZ2lmeShvdXRwdXQpO1xuICAgIGl0KGBcXGAud3JpdGVKc29uKHZhbClcXGAgc2hvdWxkIHJldHVybiBcXGAke2V4cGVjdGVkU2VyaWFsaXplZH1cXGBgLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3R1YWxTZXJpYWxpemVkID0gdHlwZS53cml0ZSh3cml0ZXIsIHR5cGVkVmFsdWUudmFsdWUpO1xuICAgICAgY2hhaS5hc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsU2VyaWFsaXplZCwgb3V0cHV0KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpdChcImB0LndyaXRlSnNvbih2YWwpYCBzaG91bGQgbm90IHRocm93XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbFNlcmlhbGl6ZWQgPSB0eXBlLndyaXRlKHdyaXRlciwgdHlwZWRWYWx1ZS52YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpdChcImB0LnJlYWRUcnVzdGVkSnNvbih0LndyaXRlSnNvbih2YWwpKWAgc2hvdWxkIGJlIHZhbGlkIGFuZCBlcXVhbCB0byBgdmFsYFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaW1wb3J0ZWQ6IFQgPSB0eXBlLnJlYWQhKHRydXN0ZWRSZWFkZXIsIGFjdHVhbFNlcmlhbGl6ZWQpO1xuICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZSh0eXBlLnRlc3QoaW1wb3J0ZWQpKTtcbiAgICBjaGFpLmFzc2VydC5pc1RydWUodHlwZS5lcXVhbHMoaW1wb3J0ZWQsIHR5cGVkVmFsdWUudmFsdWUpKTtcbiAgfSk7XG5cbiAgaXQoXCJgdC5yZWFkSnNvbih0LndyaXRlSnNvbih2YWwpKWAgc2hvdWxkIGJlIHZhbGlkIGFuZCBlcXVhbCB0byBgdmFsYFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaW1wb3J0ZWQ6IFQgPSB0eXBlLnJlYWQhKHJlYWRlciwgYWN0dWFsU2VyaWFsaXplZCk7XG4gICAgY2hhaS5hc3NlcnQuaXNUcnVlKHR5cGUudGVzdChpbXBvcnRlZCkpO1xuICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZSh0eXBlLmVxdWFscyhpbXBvcnRlZCwgdHlwZWRWYWx1ZS52YWx1ZSkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RRc1NlcmlhbGl6YXRpb248VD4odHlwZTogSW9UeXBlPFQ+LCB0eXBlZFZhbHVlOiBWYWxpZFR5cGVkVmFsdWUpOiB2b2lkIHtcbiAgY29uc3Qgd3JpdGVyOiBRc1dyaXRlciA9IG5ldyBRc1dyaXRlcihxcyk7XG4gIGNvbnN0IHJlYWRlcjogUXNSZWFkZXIgPSBuZXcgUXNSZWFkZXIocXMpO1xuICBjb25zdCB0cnVzdGVkUmVhZGVyOiBRc1JlYWRlciA9IG5ldyBRc1JlYWRlcihxcywgdHJ1ZSk7XG4gIGxldCBhY3R1YWxTZXJpYWxpemVkOiBzdHJpbmc7XG5cbiAgaWYgKHR5cGVkVmFsdWUub3V0cHV0ICE9PSB1bmRlZmluZWQgJiYgXCJxc1wiIGluIHR5cGVkVmFsdWUub3V0cHV0KSB7XG4gICAgaWYgKHR5cGVkVmFsdWUub3V0cHV0W1wicXNcIl0gPT09IFwiaWdub3JlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZXhwZWN0ZWRTZXJpYWxpemVkOiBzdHJpbmcgPSB0eXBlZFZhbHVlLm91dHB1dFtcInFzXCJdO1xuICAgIGl0KGBcXGAud3JpdGVRcyh2YWwpXFxgIHNob3VsZCByZXR1cm4gdGhlIHZhbHVlIFxcYCR7ZXhwZWN0ZWRTZXJpYWxpemVkfVxcYGAsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbFNlcmlhbGl6ZWQgPSB0eXBlLndyaXRlKHdyaXRlciwgdHlwZWRWYWx1ZS52YWx1ZSk7XG4gICAgICBjaGFpLmFzc2VydC5zdHJpY3RFcXVhbChhY3R1YWxTZXJpYWxpemVkLCBleHBlY3RlZFNlcmlhbGl6ZWQpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGl0KFwiYHQud3JpdGVRcyh2YWwpYCBzaG91bGQgbm90IHRocm93XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdHVhbFNlcmlhbGl6ZWQgPSB0eXBlLndyaXRlKHdyaXRlciwgdHlwZWRWYWx1ZS52YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpdChcImB0LnJlYWRUcnVzdGVkUXModC53cml0ZVFzKHZhbCkpYCBzaG91bGQgYmUgdmFsaWQgYW5kIGVxdWFsIHRvIGB2YWxgXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBpbXBvcnRlZDogVCA9IHR5cGUucmVhZCEodHJ1c3RlZFJlYWRlciwgYWN0dWFsU2VyaWFsaXplZCk7XG4gICAgY2hhaS5hc3NlcnQuaXNUcnVlKHR5cGUudGVzdChpbXBvcnRlZCkpO1xuICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZSh0eXBlLmVxdWFscyhpbXBvcnRlZCwgdHlwZWRWYWx1ZS52YWx1ZSkpO1xuICB9KTtcblxuICBpdChcImB0LnJlYWRRcyh0LndyaXRlUXModmFsKSlgIHNob3VsZCBiZSB2YWxpZCBhbmQgZXF1YWwgdG8gYHZhbGBcIiwgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGltcG9ydGVkOiBUID0gdHlwZS5yZWFkIShyZWFkZXIsIGFjdHVhbFNlcmlhbGl6ZWQpO1xuICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZSh0eXBlLnRlc3QoaW1wb3J0ZWQpKTtcbiAgICBjaGFpLmFzc2VydC5pc1RydWUodHlwZS5lcXVhbHMoaW1wb3J0ZWQsIHR5cGVkVmFsdWUudmFsdWUpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0U2VyaWFsaXphdGlvbjxUPih0eXBlOiBJb1R5cGU8VD4sIHR5cGVkVmFsdWU6IFZhbGlkVHlwZWRWYWx1ZSk6IHZvaWQge1xuICB0ZXN0QnNvblNlcmlhbGl6YXRpb24odHlwZSwgdHlwZWRWYWx1ZSk7XG4gIHRlc3RKc29uU2VyaWFsaXphdGlvbih0eXBlLCB0eXBlZFZhbHVlKTtcbiAgdGVzdFFzU2VyaWFsaXphdGlvbih0eXBlLCB0eXBlZFZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RWYWx1ZVN5bmModHlwZTogVHlwZTxhbnk+LCBpdGVtOiBUeXBlZFZhbHVlKTogdm9pZCB7XG4gIGlmIChpdGVtLnZhbGlkKSB7XG4gICAgdGVzdFZhbGlkVmFsdWUodHlwZSwgaXRlbSk7XG4gICAgdGVzdFNlcmlhbGl6YXRpb24odHlwZSBhcyBJb1R5cGU8YW55PiwgaXRlbSk7XG4gIH0gZWxzZSB7XG4gICAgdGVzdEludmFsaWRWYWx1ZSh0eXBlLCBpdGVtKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuVGVzdHModHlwZTogVHlwZTxhbnk+LCBpdGVtczogVHlwZWRWYWx1ZVtdKTogdm9pZCB7XG4gIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgIGRlc2NyaWJlKGBJdGVtOiAke2dldE5hbWUoaXRlbSl9YCwgZnVuY3Rpb24gKCkge1xuICAgICAgdGVzdFZhbHVlU3luYyh0eXBlLCBpdGVtKTtcbiAgICB9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
