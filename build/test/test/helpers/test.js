"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bson_1 = __importDefault(require("bson"));
const chai_1 = __importDefault(require("chai"));
const qs_1 = __importDefault(require("qs"));
const bson_2 = require("../../lib/readers/bson");
const json_1 = require("../../lib/readers/json");
const qs_2 = require("../../lib/readers/qs");
const bson_3 = require("../../lib/writers/bson");
const json_2 = require("../../lib/writers/json");
const qs_3 = require("../../lib/writers/qs");
function getName(namedValue) {
    return "name" in namedValue ? namedValue.name : JSON.stringify(namedValue.value);
}
function testInvalidValue(type, item) {
    if (type.testError !== undefined) {
        it("Should return an Error for .testError", function () {
            chai_1.default.assert.instanceOf(type.testError(item.value), Error);
        });
    }
    it("Should return `false` for .test", function () {
        chai_1.default.assert.isFalse(type.test(item.value));
    });
}
exports.testInvalidValue = testInvalidValue;
function testValidValue(type, item) {
    if (type.testError !== undefined) {
        it("Should return `undefined` for .testError", function () {
            const error = type.testError(item.value);
            if (error !== undefined) {
                chai_1.default.assert.fail(error, undefined, String(error));
            }
        });
    }
    it("Should return `true` for .test", function () {
        chai_1.default.assert.isTrue(type.test(item.value));
    });
}
exports.testValidValue = testValidValue;
function testBsonSerialization(type, typedValue) {
    const writer = new bson_3.BsonWriter(bson_1.default);
    const reader = new bson_2.BsonReader(bson_1.default);
    const trustedReader = new bson_2.BsonReader(bson_1.default, true);
    let actualSerialized;
    if (typedValue.output !== undefined && "bson" in typedValue.output) {
        const output = typedValue.output["bson"];
        it("`.writeBson(val)` should return the expected value", function () {
            actualSerialized = type.write(writer, typedValue.value);
            chai_1.default.assert.deepEqual(actualSerialized, output);
        });
    }
    else {
        it("`t.writeBson(val)` should not throw", function () {
            actualSerialized = type.write(writer, typedValue.value);
        });
    }
    it("`t.readTrustedBson(t.writeBson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(trustedReader, actualSerialized);
        chai_1.default.assert.isTrue(type.test(imported));
        chai_1.default.assert.isTrue(type.equals(imported, typedValue.value));
    });
    it("`t.readBson(t.writeBson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(reader, actualSerialized);
        chai_1.default.assert.isTrue(type.test(imported));
        chai_1.default.assert.isTrue(type.equals(imported, typedValue.value));
    });
}
exports.testBsonSerialization = testBsonSerialization;
function testJsonSerialization(type, typedValue) {
    const writer = new json_2.JsonWriter();
    const reader = new json_1.JsonReader();
    const trustedReader = new json_1.JsonReader(true);
    let actualSerialized;
    if (typedValue.output !== undefined && "json" in typedValue.output) {
        const output = typedValue.output["json"];
        const expectedSerialized = JSON.stringify(output);
        it(`\`.writeJson(val)\` should return \`${expectedSerialized}\``, function () {
            actualSerialized = type.write(writer, typedValue.value);
            chai_1.default.assert.strictEqual(actualSerialized, output);
        });
    }
    else {
        it("`t.writeJson(val)` should not throw", function () {
            actualSerialized = type.write(writer, typedValue.value);
        });
    }
    it("`t.readTrustedJson(t.writeJson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(trustedReader, actualSerialized);
        chai_1.default.assert.isTrue(type.test(imported));
        chai_1.default.assert.isTrue(type.equals(imported, typedValue.value));
    });
    it("`t.readJson(t.writeJson(val))` should be valid and equal to `val`", function () {
        const imported = type.read(reader, actualSerialized);
        chai_1.default.assert.isTrue(type.test(imported));
        chai_1.default.assert.isTrue(type.equals(imported, typedValue.value));
    });
}
exports.testJsonSerialization = testJsonSerialization;
function testQsSerialization(type, typedValue) {
    const writer = new qs_3.QsWriter(qs_1.default);
    const reader = new qs_2.QsReader(qs_1.default);
    const trustedReader = new qs_2.QsReader(qs_1.default, true);
    let actualSerialized;
    if (typedValue.output !== undefined && "qs" in typedValue.output) {
        if (typedValue.output["qs"] === "ignore") {
            return;
        }
        const expectedSerialized = typedValue.output["qs"];
        it(`\`.writeQs(val)\` should return the value \`${expectedSerialized}\``, function () {
            actualSerialized = type.write(writer, typedValue.value);
            chai_1.default.assert.strictEqual(actualSerialized, expectedSerialized);
        });
    }
    else {
        it("`t.writeQs(val)` should not throw", function () {
            actualSerialized = type.write(writer, typedValue.value);
        });
    }
    it("`t.readTrustedQs(t.writeQs(val))` should be valid and equal to `val`", function () {
        const imported = type.read(trustedReader, actualSerialized);
        chai_1.default.assert.isTrue(type.test(imported));
        chai_1.default.assert.isTrue(type.equals(imported, typedValue.value));
    });
    it("`t.readQs(t.writeQs(val))` should be valid and equal to `val`", function () {
        const imported = type.read(reader, actualSerialized);
        chai_1.default.assert.isTrue(type.test(imported));
        chai_1.default.assert.isTrue(type.equals(imported, typedValue.value));
    });
}
exports.testQsSerialization = testQsSerialization;
function testSerialization(type, typedValue) {
    testBsonSerialization(type, typedValue);
    testJsonSerialization(type, typedValue);
    testQsSerialization(type, typedValue);
}
exports.testSerialization = testSerialization;
function testValueSync(type, item) {
    if (item.valid) {
        testValidValue(type, item);
        testSerialization(type, item);
    }
    else {
        testInvalidValue(type, item);
    }
}
exports.testValueSync = testValueSync;
function runTests(type, items) {
    for (const item of items) {
        describe(`Item: ${getName(item)}`, function () {
            testValueSync(type, item);
        });
    }
}
exports.runTests = runTests;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
